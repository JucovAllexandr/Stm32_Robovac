
Robovac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009568  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08009678  08009678  00019678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e0  080099e0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080099e0  080099e0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099e0  080099e0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080099e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001138  200001e0  08009bc8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001318  08009bc8  00021318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bb8  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000315d  00000000  00000000  00033dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001240  00000000  00000000  00036f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b8  00000000  00000000  00038160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f997  00000000  00000000  00039218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de16  00000000  00000000  00048baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00056afd  00000000  00000000  000569c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad4c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005894  00000000  00000000  000ad540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009660 	.word	0x08009660

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009660 	.word	0x08009660

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_f2iz>:
 8000c54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c5c:	d30f      	bcc.n	8000c7e <__aeabi_f2iz+0x2a>
 8000c5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c66:	d90d      	bls.n	8000c84 <__aeabi_f2iz+0x30>
 8000c68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c70:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c74:	fa23 f002 	lsr.w	r0, r3, r2
 8000c78:	bf18      	it	ne
 8000c7a:	4240      	negne	r0, r0
 8000c7c:	4770      	bx	lr
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	4770      	bx	lr
 8000c84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c88:	d101      	bne.n	8000c8e <__aeabi_f2iz+0x3a>
 8000c8a:	0242      	lsls	r2, r0, #9
 8000c8c:	d105      	bne.n	8000c9a <__aeabi_f2iz+0x46>
 8000c8e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c92:	bf08      	it	eq
 8000c94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	4770      	bx	lr

08000ca0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <vApplicationGetIdleTaskMemory+0x28>)
 8000cb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <vApplicationGetIdleTaskMemory+0x2c>)
 8000cb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	200001fc 	.word	0x200001fc
 8000ccc:	20000250 	.word	0x20000250

08000cd0 <kalman_filter_init>:
 */

#include "kalman_filter.h"

void kalman_filter_init(KalmanFilter *f, double q, double r, double state, double covariance)
{
 8000cd0:	b490      	push	{r4, r7}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	e9c7 2300 	strd	r2, r3, [r7]
	f->q = q;
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ce2:	e9c2 3400 	strd	r3, r4, [r2]
	f->r = r;
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000cec:	e9c2 3402 	strd	r3, r4, [r2, #8]
	f->state = state;
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000cf6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	f->covariance = covariance;
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000d00:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	f->x0 = 0;
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	f04f 0400 	mov.w	r4, #0
 8000d0e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	f->p0 =0;
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	f04f 0400 	mov.w	r4, #0
 8000d1c:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc90      	pop	{r4, r7}
 8000d28:	4770      	bx	lr
	...

08000d2c <kalman_filter_calc>:

double kalman_filter_calc(KalmanFilter *f, double val)
{
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	e9c7 2300 	strd	r2, r3, [r7]
	f->x0 = f->state;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f103 0420 	add.w	r4, r3, #32
 8000d3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	e9c2 3404 	strd	r3, r4, [r2, #16]
	f->p0 = f->covariance + f->q;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	cb18      	ldmia	r3, {r3, r4}
 8000d52:	461a      	mov	r2, r3
 8000d54:	4623      	mov	r3, r4
 8000d56:	f7ff fa09 	bl	800016c <__adddf3>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460c      	mov	r4, r1
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	e9c2 3406 	strd	r3, r4, [r2, #24]

	double k = f->p0 / (f->p0 + f->r);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d76:	f7ff f9f9 	bl	800016c <__adddf3>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4620      	mov	r0, r4
 8000d80:	4629      	mov	r1, r5
 8000d82:	f7ff fcd3 	bl	800072c <__aeabi_ddiv>
 8000d86:	4603      	mov	r3, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	f->state = f->x0 + k * (val - f->x0);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000d9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d9e:	f7ff f9e3 	bl	8000168 <__aeabi_dsub>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4610      	mov	r0, r2
 8000da8:	4619      	mov	r1, r3
 8000daa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dae:	f7ff fb93 	bl	80004d8 <__aeabi_dmul>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4620      	mov	r0, r4
 8000db8:	4629      	mov	r1, r5
 8000dba:	f7ff f9d7 	bl	800016c <__adddf3>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	460c      	mov	r4, r1
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	e9c2 3408 	strd	r3, r4, [r2, #32]
	f->covariance = (1 - k) * f->p0;
 8000dc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dcc:	f04f 0000 	mov.w	r0, #0
 8000dd0:	490f      	ldr	r1, [pc, #60]	; (8000e10 <kalman_filter_calc+0xe4>)
 8000dd2:	f7ff f9c9 	bl	8000168 <__aeabi_dsub>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460c      	mov	r4, r1
 8000dda:	4618      	mov	r0, r3
 8000ddc:	4621      	mov	r1, r4
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f103 0418 	add.w	r4, r3, #24
 8000de4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4623      	mov	r3, r4
 8000dec:	f7ff fb74 	bl	80004d8 <__aeabi_dmul>
 8000df0:	4603      	mov	r3, r0
 8000df2:	460c      	mov	r4, r1
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	return f->state;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f103 0420 	add.w	r4, r3, #32
 8000e00:	e9d4 3400 	ldrd	r3, r4, [r4]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	4621      	mov	r1, r4
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	3ff00000 	.word	0x3ff00000

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b5b0      	push	{r4, r5, r7, lr}
 8000e16:	b08e      	sub	sp, #56	; 0x38
 8000e18:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1a:	f001 f951 	bl	80020c0 <HAL_Init>

  /* USER CODE BEGIN Init */
	TIM2->CNT = 0;
 8000e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e26:	f000 f843 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2a:	f000 f9db 	bl	80011e4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000e2e:	f000 f92d 	bl	800108c <MX_TIM4_Init>
  MX_RTC_Init();
 8000e32:	f000 f895 	bl	8000f60 <MX_RTC_Init>
  MX_TIM2_Init();
 8000e36:	f000 f8dd 	bl	8000ff4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000e3a:	f000 f9a9 	bl	8001190 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	//
	//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
	//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	HAL_TIM_Base_Start_IT(&htim2);
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <main+0x7c>)
 8000e40:	f002 fd17 	bl	8003872 <HAL_TIM_Base_Start_IT>
	wheel_init(&r_wheel, &huart1, RM_ENC_EN_GPIO_Port, RM_ENC_EN_Pin, &htim4,
 8000e44:	2304      	movs	r3, #4
 8000e46:	9305      	str	r3, [sp, #20]
 8000e48:	2308      	movs	r3, #8
 8000e4a:	9304      	str	r3, [sp, #16]
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <main+0x80>)
 8000e4e:	9303      	str	r3, [sp, #12]
 8000e50:	2300      	movs	r3, #0
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	2304      	movs	r3, #4
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <main+0x84>)
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <main+0x88>)
 8000e60:	490f      	ldr	r1, [pc, #60]	; (8000ea0 <main+0x8c>)
 8000e62:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <main+0x90>)
 8000e64:	f000 fec4 	bl	8001bf0 <wheel_init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <main+0x94>)
 8000e6a:	1d3c      	adds	r4, r7, #4
 8000e6c:	461d      	mov	r5, r3
 8000e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f003 fcc6 	bl	8004810 <osThreadCreate>
 8000e84:	4602      	mov	r2, r0
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <main+0x98>)
 8000e88:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e8a:	f003 fcba 	bl	8004802 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000e8e:	e7fe      	b.n	8000e8e <main+0x7a>
 8000e90:	200012d0 	.word	0x200012d0
 8000e94:	40011800 	.word	0x40011800
 8000e98:	2000123c 	.word	0x2000123c
 8000e9c:	40011400 	.word	0x40011400
 8000ea0:	2000127c 	.word	0x2000127c
 8000ea4:	20000458 	.word	0x20000458
 8000ea8:	08009684 	.word	0x08009684
 8000eac:	20001238 	.word	0x20001238

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b092      	sub	sp, #72	; 0x48
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2228      	movs	r2, #40	; 0x28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 fe9d 	bl	8005bfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000ede:	2306      	movs	r3, #6
 8000ee0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eea:	2310      	movs	r3, #16
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ef6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000efa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efc:	f107 0320 	add.w	r3, r7, #32
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 fbe3 	bl	80026cc <HAL_RCC_OscConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000f0c:	f000 fb0c 	bl	8001528 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f10:	230f      	movs	r3, #15
 8000f12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f14:	2302      	movs	r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fe4e 	bl	8002bcc <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f36:	f000 faf7 	bl	8001528 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 ffdc 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f52:	f000 fae9 	bl	8001528 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3748      	adds	r7, #72	; 0x48
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2100      	movs	r1, #0
 8000f6a:	460a      	mov	r2, r1
 8000f6c:	801a      	strh	r2, [r3, #0]
 8000f6e:	460a      	mov	r2, r1
 8000f70:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_RTC_Init+0x8c>)
 8000f78:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <MX_RTC_Init+0x90>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_RTC_Init+0x8c>)
 8000f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f82:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_RTC_Init+0x8c>)
 8000f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f8c:	4817      	ldr	r0, [pc, #92]	; (8000fec <MX_RTC_Init+0x8c>)
 8000f8e:	f002 f8b7 	bl	8003100 <HAL_RTC_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000f98:	f000 fac6 	bl	8001528 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	480f      	ldr	r0, [pc, #60]	; (8000fec <MX_RTC_Init+0x8c>)
 8000fb0:	f002 f93c 	bl	800322c <HAL_RTC_SetTime>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000fba:	f000 fab5 	bl	8001528 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_RTC_Init+0x8c>)
 8000fd6:	f002 f9c1 	bl	800335c <HAL_RTC_SetDate>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000fe0:	f000 faa2 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200012bc 	.word	0x200012bc
 8000ff0:	40002800 	.word	0x40002800

08000ff4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001010:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_TIM2_Init+0x94>)
 8001012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001016:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_TIM2_Init+0x94>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <MX_TIM2_Init+0x94>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1799;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_TIM2_Init+0x94>)
 8001026:	f240 7207 	movw	r2, #1799	; 0x707
 800102a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_TIM2_Init+0x94>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_TIM2_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_TIM2_Init+0x94>)
 800103a:	f002 fbef 	bl	800381c <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001044:	f000 fa70 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_TIM2_Init+0x94>)
 8001056:	f002 fe81 	bl	8003d5c <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 fa62 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_TIM2_Init+0x94>)
 8001072:	f003 f94e 	bl	8004312 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800107c:	f000 fa54 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200012d0 	.word	0x200012d0

0800108c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
 80010b8:	615a      	str	r2, [r3, #20]
 80010ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010bc:	4b32      	ldr	r3, [pc, #200]	; (8001188 <MX_TIM4_Init+0xfc>)
 80010be:	4a33      	ldr	r2, [pc, #204]	; (800118c <MX_TIM4_Init+0x100>)
 80010c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <MX_TIM4_Init+0xfc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c8:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <MX_TIM4_Init+0xfc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1799;
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <MX_TIM4_Init+0xfc>)
 80010d0:	f240 7207 	movw	r2, #1799	; 0x707
 80010d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <MX_TIM4_Init+0xfc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <MX_TIM4_Init+0xfc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010e2:	4829      	ldr	r0, [pc, #164]	; (8001188 <MX_TIM4_Init+0xfc>)
 80010e4:	f002 fb9a 	bl	800381c <HAL_TIM_Base_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010ee:	f000 fa1b 	bl	8001528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4822      	ldr	r0, [pc, #136]	; (8001188 <MX_TIM4_Init+0xfc>)
 8001100:	f002 fe2c 	bl	8003d5c <HAL_TIM_ConfigClockSource>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800110a:	f000 fa0d 	bl	8001528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800110e:	481e      	ldr	r0, [pc, #120]	; (8001188 <MX_TIM4_Init+0xfc>)
 8001110:	f002 fbd2 	bl	80038b8 <HAL_TIM_PWM_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800111a:	f000 fa05 	bl	8001528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	4619      	mov	r1, r3
 800112c:	4816      	ldr	r0, [pc, #88]	; (8001188 <MX_TIM4_Init+0xfc>)
 800112e:	f003 f8f0 	bl	8004312 <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001138:	f000 f9f6 	bl	8001528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113c:	2360      	movs	r3, #96	; 0x60
 800113e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_TIM4_Init+0xfc>)
 8001154:	f002 fd3c 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800115e:	f000 f9e3 	bl	8001528 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2204      	movs	r2, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <MX_TIM4_Init+0xfc>)
 800116a:	f002 fd31 	bl	8003bd0 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001174:	f000 f9d8 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <MX_TIM4_Init+0xfc>)
 800117a:	f000 fb6d 	bl	8001858 <HAL_TIM_MspPostInit>

}
 800117e:	bf00      	nop
 8001180:	3738      	adds	r7, #56	; 0x38
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000123c 	.word	0x2000123c
 800118c:	40000800 	.word	0x40000800

08001190 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_USART1_UART_Init+0x48>)
 8001196:	4a11      	ldr	r2, [pc, #68]	; (80011dc <MX_USART1_UART_Init+0x4c>)
 8001198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1152000;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_USART1_UART_Init+0x48>)
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <MX_USART1_UART_Init+0x50>)
 800119e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MX_USART1_UART_Init+0x48>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_USART1_UART_Init+0x48>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_USART1_UART_Init+0x48>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_USART1_UART_Init+0x48>)
 80011b4:	220c      	movs	r2, #12
 80011b6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_USART1_UART_Init+0x48>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_USART1_UART_Init+0x48>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_USART1_UART_Init+0x48>)
 80011c6:	f003 f8fa 	bl	80043be <HAL_UART_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80011d0:	f000 f9aa 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000127c 	.word	0x2000127c
 80011dc:	40013800 	.word	0x40013800
 80011e0:	00119400 	.word	0x00119400

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f8:	4b5e      	ldr	r3, [pc, #376]	; (8001374 <MX_GPIO_Init+0x190>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a5d      	ldr	r2, [pc, #372]	; (8001374 <MX_GPIO_Init+0x190>)
 80011fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <MX_GPIO_Init+0x190>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001210:	4b58      	ldr	r3, [pc, #352]	; (8001374 <MX_GPIO_Init+0x190>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a57      	ldr	r2, [pc, #348]	; (8001374 <MX_GPIO_Init+0x190>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b55      	ldr	r3, [pc, #340]	; (8001374 <MX_GPIO_Init+0x190>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001228:	4b52      	ldr	r3, [pc, #328]	; (8001374 <MX_GPIO_Init+0x190>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a51      	ldr	r2, [pc, #324]	; (8001374 <MX_GPIO_Init+0x190>)
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <MX_GPIO_Init+0x190>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <MX_GPIO_Init+0x190>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a4b      	ldr	r2, [pc, #300]	; (8001374 <MX_GPIO_Init+0x190>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b49      	ldr	r3, [pc, #292]	; (8001374 <MX_GPIO_Init+0x190>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <MX_GPIO_Init+0x190>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a45      	ldr	r2, [pc, #276]	; (8001374 <MX_GPIO_Init+0x190>)
 800125e:	f043 0320 	orr.w	r3, r3, #32
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <MX_GPIO_Init+0x190>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RM_2_1_Pin|RM_1_1_Pin|MB_S2_1_Pin|MB_S1_1_Pin 
 8001270:	2200      	movs	r2, #0
 8001272:	f24c 010f 	movw	r1, #49167	; 0xc00f
 8001276:	4840      	ldr	r0, [pc, #256]	; (8001378 <MX_GPIO_Init+0x194>)
 8001278:	f001 f9ec 	bl	8002654 <HAL_GPIO_WritePin>
                          |LM_1_1_Pin|LM_2_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MB_S1_2_Pin|LM_2_2_Pin|LM_1_2_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001282:	483e      	ldr	r0, [pc, #248]	; (800137c <MX_GPIO_Init+0x198>)
 8001284:	f001 f9e6 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_S2_2_GPIO_Port, MB_S2_2_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800128e:	483c      	ldr	r0, [pc, #240]	; (8001380 <MX_GPIO_Init+0x19c>)
 8001290:	f001 f9e0 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RM_ENC_EN_GPIO_Port, RM_ENC_EN_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2120      	movs	r1, #32
 8001298:	483a      	ldr	r0, [pc, #232]	; (8001384 <MX_GPIO_Init+0x1a0>)
 800129a:	f001 f9db 	bl	8002654 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RM_2_1_Pin RM_1_1_Pin MB_S2_1_Pin MB_S1_1_Pin 
                           LM_1_1_Pin LM_2_1_Pin */
  GPIO_InitStruct.Pin = RM_2_1_Pin|RM_1_1_Pin|MB_S2_1_Pin|MB_S1_1_Pin 
 800129e:	f24c 030f 	movw	r3, #49167	; 0xc00f
 80012a2:	61bb      	str	r3, [r7, #24]
                          |LM_1_1_Pin|LM_2_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2302      	movs	r3, #2
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4830      	ldr	r0, [pc, #192]	; (8001378 <MX_GPIO_Init+0x194>)
 80012b8:	f001 f872 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RM_EXTI4_ENC_Pin */
  GPIO_InitStruct.Pin = RM_EXTI4_ENC_Pin;
 80012bc:	2310      	movs	r3, #16
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <MX_GPIO_Init+0x1a4>)
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c4:	2301      	movs	r3, #1
 80012c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RM_EXTI4_ENC_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0318 	add.w	r3, r7, #24
 80012cc:	4619      	mov	r1, r3
 80012ce:	482a      	ldr	r0, [pc, #168]	; (8001378 <MX_GPIO_Init+0x194>)
 80012d0:	f001 f866 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RM_SW_Pin */
  GPIO_InitStruct.Pin = RM_SW_Pin;
 80012d4:	2320      	movs	r3, #32
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RM_SW_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4824      	ldr	r0, [pc, #144]	; (8001378 <MX_GPIO_Init+0x194>)
 80012e8:	f001 f85a 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_S1_2_Pin LM_2_2_Pin LM_1_2_Pin */
  GPIO_InitStruct.Pin = MB_S1_2_Pin|LM_2_2_Pin|LM_1_2_Pin;
 80012ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	4619      	mov	r1, r3
 8001304:	481d      	ldr	r0, [pc, #116]	; (800137c <MX_GPIO_Init+0x198>)
 8001306:	f001 f84b 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_S2_2_Pin */
  GPIO_InitStruct.Pin = MB_S2_2_Pin;
 800130a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2302      	movs	r3, #2
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MB_S2_2_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	4619      	mov	r1, r3
 8001322:	4817      	ldr	r0, [pc, #92]	; (8001380 <MX_GPIO_Init+0x19c>)
 8001324:	f001 f83c 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RM_ENC_EN_Pin */
  GPIO_InitStruct.Pin = RM_ENC_EN_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2302      	movs	r3, #2
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RM_ENC_EN_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	4619      	mov	r1, r3
 800133e:	4811      	ldr	r0, [pc, #68]	; (8001384 <MX_GPIO_Init+0x1a0>)
 8001340:	f001 f82e 	bl	80023a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM_SW_Pin */
  GPIO_InitStruct.Pin = LM_SW_Pin;
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LM_SW_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	4619      	mov	r1, r3
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <MX_GPIO_Init+0x1a0>)
 8001358:	f001 f822 	bl	80023a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2105      	movs	r1, #5
 8001360:	200a      	movs	r0, #10
 8001362:	f000 ffe6 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001366:	200a      	movs	r0, #10
 8001368:	f000 ffff 	bl	800236a <HAL_NVIC_EnableIRQ>

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	40011800 	.word	0x40011800
 800137c:	40010c00 	.word	0x40010c00
 8001380:	40011000 	.word	0x40011000
 8001384:	40011400 	.word	0x40011400
 8001388:	10210000 	.word	0x10210000

0800138c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]

	if (RM_EXTI4_ENC_Pin == GPIO_Pin) {
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	2b10      	cmp	r3, #16
 800139a:	d102      	bne.n	80013a2 <HAL_GPIO_EXTI_Callback+0x16>
		wheel_encoder_task(&r_wheel);
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <HAL_GPIO_EXTI_Callback+0x20>)
 800139e:	f000 fdbb 	bl	8001f18 <wheel_encoder_task>
		 }*/

		//rm_enc_it++;
		//last_rm_enc_time_us = time_us;
	}
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000458 	.word	0x20000458

080013b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013b0:	b490      	push	{r4, r7}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c0:	d10e      	bne.n	80013e0 <HAL_TIM_PeriodElapsedCallback+0x30>
		time_us += 50;
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013c4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80013c8:	f111 0332 	adds.w	r3, r1, #50	; 0x32
 80013cc:	f142 0400 	adc.w	r4, r2, #0
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013d2:	e9c2 3400 	strd	r3, r4, [r2]
		r_wheel.time_us = time_us;
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013d8:	cb18      	ldmia	r3, {r3, r4}
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80013dc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	}
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc90      	pop	{r4, r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000450 	.word	0x20000450
 80013f0:	20000458 	.word	0x20000458

080013f4 <setGPIOMode>:

void setGPIOMode(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t Mode) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	460b      	mov	r3, r1
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001410:	897b      	ldrh	r3, [r7, #10]
 8001412:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = Mode;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 ffba 	bl	80023a0 <HAL_GPIO_Init>
}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	turn_clockwise(&r_wheel, 4000);
 800143c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001440:	4837      	ldr	r0, [pc, #220]	; (8001520 <StartDefaultTask+0xec>)
 8001442:	f000 fc77 	bl	8001d34 <turn_clockwise>
	 HAL_GPIO_WritePin(RM_2_1_GPIO_Port, RM_2_1_Pin, GPIO_PIN_SET);

	 setGPIOMode(RM_2_1_GPIO_Port, RM_2_1_Pin, GPIO_MODE_OUTPUT_PP);

	 HAL_GPIO_WritePin(RM_1_1_GPIO_Port, RM_1_1_Pin, GPIO_PIN_RESET);*/
	char buffer[30] = { 0 };
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	221e      	movs	r2, #30
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fbd5 	bl	8005bfe <memset>
	uint32_t compare = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (;;) {

		if (r_wheel.status == TurnCkw) {
 8001458:	4b31      	ldr	r3, [pc, #196]	; (8001520 <StartDefaultTask+0xec>)
 800145a:	7f1b      	ldrb	r3, [r3, #28]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d120      	bne.n	80014a4 <StartDefaultTask+0x70>
			compare = __HAL_TIM_GET_COMPARE(r_wheel.htim, r_wheel.channel_ckw);
 8001462:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <StartDefaultTask+0xec>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d104      	bne.n	8001474 <StartDefaultTask+0x40>
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <StartDefaultTask+0xec>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001472:	e015      	b.n	80014a0 <StartDefaultTask+0x6c>
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <StartDefaultTask+0xec>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b04      	cmp	r3, #4
 800147a:	d104      	bne.n	8001486 <StartDefaultTask+0x52>
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <StartDefaultTask+0xec>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001484:	e00c      	b.n	80014a0 <StartDefaultTask+0x6c>
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <StartDefaultTask+0xec>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b08      	cmp	r3, #8
 800148c:	d104      	bne.n	8001498 <StartDefaultTask+0x64>
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <StartDefaultTask+0xec>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001496:	e003      	b.n	80014a0 <StartDefaultTask+0x6c>
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <StartDefaultTask+0xec>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a2:	e024      	b.n	80014ee <StartDefaultTask+0xba>
		} else if (r_wheel.status == TurnC_ckw) {
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <StartDefaultTask+0xec>)
 80014a6:	7f1b      	ldrb	r3, [r3, #28]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d11f      	bne.n	80014ee <StartDefaultTask+0xba>
			compare = __HAL_TIM_GET_COMPARE(r_wheel.htim, r_wheel.channel_c_ckw);
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <StartDefaultTask+0xec>)
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d104      	bne.n	80014c0 <StartDefaultTask+0x8c>
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <StartDefaultTask+0xec>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014be:	e015      	b.n	80014ec <StartDefaultTask+0xb8>
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <StartDefaultTask+0xec>)
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d104      	bne.n	80014d2 <StartDefaultTask+0x9e>
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <StartDefaultTask+0xec>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d0:	e00c      	b.n	80014ec <StartDefaultTask+0xb8>
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <StartDefaultTask+0xec>)
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d104      	bne.n	80014e4 <StartDefaultTask+0xb0>
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <StartDefaultTask+0xec>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e2:	e003      	b.n	80014ec <StartDefaultTask+0xb8>
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <StartDefaultTask+0xec>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		sprintf(buffer, "!%d %d\r\n", (int)r_wheel.current_rpm, compare);
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <StartDefaultTask+0xec>)
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fbae 	bl	8000c54 <__aeabi_f2iz>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f107 000c 	add.w	r0, r7, #12
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	4908      	ldr	r1, [pc, #32]	; (8001524 <StartDefaultTask+0xf0>)
 8001502:	f005 fa6f 	bl	80069e4 <siprintf>

		//if (ret >= sizeof buffer || ret >= (sizeof buffer / 2)) {
		HAL_UART_Transmit(r_wheel.huart, buffer, sizeof buffer, 100);
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <StartDefaultTask+0xec>)
 8001508:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800150c:	f107 010c 	add.w	r1, r7, #12
 8001510:	2364      	movs	r3, #100	; 0x64
 8001512:	221e      	movs	r2, #30
 8001514:	f002 ffa0 	bl	8004458 <HAL_UART_Transmit>
		//}

		osDelay(1);
 8001518:	2001      	movs	r0, #1
 800151a:	f003 f9c5 	bl	80048a8 <osDelay>
	for (;;) {
 800151e:	e79b      	b.n	8001458 <StartDefaultTask+0x24>
 8001520:	20000458 	.word	0x20000458
 8001524:	080096a0 	.word	0x080096a0

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	0000      	movs	r0, r0
	...

08001538 <pid_init>:
#include "pid.h"
#include "config.h"
#include <stdlib.h>

PID* pid_init(double kp, double ki, double kd, double cv_min, double cv_max)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001542:	e9c7 2300 	strd	r2, r3, [r7]
	PID *pid = (PID*) malloc(sizeof(PID));
 8001546:	2048      	movs	r0, #72	; 0x48
 8001548:	f004 fb46 	bl	8005bd8 <malloc>
 800154c:	4603      	mov	r3, r0
 800154e:	617b      	str	r3, [r7, #20]

	pid->integral = 0;
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	f04f 0400 	mov.w	r4, #0
 800155a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	pid->derivate = 0;
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f04f 0400 	mov.w	r4, #0
 8001568:	e9c2 3408 	strd	r3, r4, [r2, #32]
	pid->last_error = 0;
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f04f 0400 	mov.w	r4, #0
 8001576:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	pid->kp = kp;
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001580:	e9c2 3400 	strd	r3, r4, [r2]
	pid->ki = ki;
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	e9d7 3400 	ldrd	r3, r4, [r7]
 800158a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	pid->kd = kd;
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001594:	e9c2 3404 	strd	r3, r4, [r2, #16]
	pid->cv_min = cv_min;
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800159e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	pid->cv_max = cv_max;
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015a8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	pid->dt = 0.6;
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	a406      	add	r4, pc, #24	; (adr r4, 80015c8 <pid_init+0x90>)
 80015b0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80015b4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	return pid;
 80015b8:	697b      	ldr	r3, [r7, #20]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd90      	pop	{r4, r7, pc}
 80015c2:	bf00      	nop
 80015c4:	f3af 8000 	nop.w
 80015c8:	33333333 	.word	0x33333333
 80015cc:	3fe33333 	.word	0x3fe33333

080015d0 <pid_calc>:

double pid_calc(PID *pid, double process_variable, double set_point)
{
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	e9c7 2300 	strd	r2, r3, [r7]
	double error = set_point - process_variable;
 80015dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015e4:	f7fe fdc0 	bl	8000168 <__aeabi_dsub>
 80015e8:	4603      	mov	r3, r0
 80015ea:	460c      	mov	r4, r1
 80015ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double out;

	pid->integral += pid->ki * error * pid->dt;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001600:	f7fe ff6a 	bl	80004d8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001612:	f7fe ff61 	bl	80004d8 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe fda5 	bl	800016c <__adddf3>
 8001622:	4603      	mov	r3, r0
 8001624:	460c      	mov	r4, r1
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	e9c2 3406 	strd	r3, r4, [r2, #24]

	out = pid->kp * error; //proportional
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	cb18      	ldmia	r3, {r3, r4}
 8001630:	461a      	mov	r2, r3
 8001632:	4623      	mov	r3, r4
 8001634:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001638:	f7fe ff4e 	bl	80004d8 <__aeabi_dmul>
 800163c:	4603      	mov	r3, r0
 800163e:	460c      	mov	r4, r1
 8001640:	e9c7 3406 	strd	r3, r4, [r7, #24]
	out += ((error - pid->last_error) / pid->dt) * pid->kd; //derivative
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800164a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800164e:	461a      	mov	r2, r3
 8001650:	4623      	mov	r3, r4
 8001652:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001656:	f7fe fd87 	bl	8000168 <__aeabi_dsub>
 800165a:	4603      	mov	r3, r0
 800165c:	460c      	mov	r4, r1
 800165e:	4618      	mov	r0, r3
 8001660:	4621      	mov	r1, r4
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001668:	e9d4 3400 	ldrd	r3, r4, [r4]
 800166c:	461a      	mov	r2, r3
 800166e:	4623      	mov	r3, r4
 8001670:	f7ff f85c 	bl	800072c <__aeabi_ddiv>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	4618      	mov	r0, r3
 800167a:	4621      	mov	r1, r4
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f103 0410 	add.w	r4, r3, #16
 8001682:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001686:	461a      	mov	r2, r3
 8001688:	4623      	mov	r3, r4
 800168a:	f7fe ff25 	bl	80004d8 <__aeabi_dmul>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	461a      	mov	r2, r3
 8001694:	4623      	mov	r3, r4
 8001696:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800169a:	f7fe fd67 	bl	800016c <__adddf3>
 800169e:	4603      	mov	r3, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	out += pid->integral;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f103 0418 	add.w	r4, r3, #24
 80016ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4623      	mov	r3, r4
 80016b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016b8:	f7fe fd58 	bl	800016c <__adddf3>
 80016bc:	4603      	mov	r3, r0
 80016be:	460c      	mov	r4, r1
 80016c0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	/*if(pid->integral > PID_INTEGRAL_MAX) {pid->integral = PID_INTEGRAL_MAX;}
	if(pid->integral < PID_INTEGRAL_MIN) {pid->integral = PID_INTEGRAL_MIN;}
	if(pid->derivate > PID_DERIVATE_MAX) {pid->derivate = PID_DERIVATE_MAX;}
	if(pid->derivate < PID_DERIVATE_MIN) {pid->derivate = PID_DERIVATE_MIN;}*/

	pid->last_error = error;
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016ca:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	//out =  + pid->integral + pid->derivate;

	if(out > pid->cv_max)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80016d4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016e0:	f7ff f98a 	bl	80009f8 <__aeabi_dcmpgt>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <pid_calc+0x128>
	{
		out = pid->cv_max;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80016f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016f4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	}

	if(out < pid->cv_min)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80016fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001702:	461a      	mov	r2, r3
 8001704:	4623      	mov	r3, r4
 8001706:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800170a:	f7ff f957 	bl	80009bc <__aeabi_dcmplt>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <pid_calc+0x152>
	{
		out = pid->cv_min;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800171a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800171e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	}


	return out;
 8001722:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
}
 8001726:	4618      	mov	r0, r3
 8001728:	4621      	mov	r1, r4
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bdb0      	pop	{r4, r5, r7, pc}

08001730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_MspInit+0x68>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_MspInit+0x68>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_MspInit+0x68>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_MspInit+0x68>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a11      	ldr	r2, [pc, #68]	; (8001798 <HAL_MspInit+0x68>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_MspInit+0x68>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	210f      	movs	r1, #15
 800176a:	f06f 0001 	mvn.w	r0, #1
 800176e:	f000 fde0 	bl	8002332 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_MspInit+0x6c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_MspInit+0x6c>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000

080017a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_RTC_MspInit+0x3c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d110      	bne.n	80017d4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80017b2:	f000 ff7f 	bl	80026b4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_RTC_MspInit+0x40>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <HAL_RTC_MspInit+0x40>)
 80017bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017c0:	61d3      	str	r3, [r2, #28]
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_RTC_MspInit+0x40>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RTC_MspInit+0x44>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40002800 	.word	0x40002800
 80017e0:	40021000 	.word	0x40021000
 80017e4:	4242043c 	.word	0x4242043c

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d114      	bne.n	8001824 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_TIM_Base_MspInit+0x68>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_TIM_Base_MspInit+0x68>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_TIM_Base_MspInit+0x68>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	201c      	movs	r0, #28
 8001818:	f000 fd8b 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800181c:	201c      	movs	r0, #28
 800181e:	f000 fda4 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001822:	e010      	b.n	8001846 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_TIM_Base_MspInit+0x6c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10b      	bne.n	8001846 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_TIM_Base_MspInit+0x68>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_TIM_Base_MspInit+0x68>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	61d3      	str	r3, [r2, #28]
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_TIM_Base_MspInit+0x68>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	40000800 	.word	0x40000800

08001858 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_TIM_MspPostInit+0x58>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d117      	bne.n	80018a8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_TIM_MspPostInit+0x5c>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <HAL_TIM_MspPostInit+0x5c>)
 800187e:	f043 0308 	orr.w	r3, r3, #8
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_TIM_MspPostInit+0x5c>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = RM_2_2PWM1_Pin|RM_1_2PWM2_Pin;
 8001890:	23c0      	movs	r3, #192	; 0xc0
 8001892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2302      	movs	r3, #2
 800189a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_TIM_MspPostInit+0x60>)
 80018a4:	f000 fd7c 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40000800 	.word	0x40000800
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010c00 	.word	0x40010c00

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <HAL_UART_MspInit+0x8c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d131      	bne.n	8001940 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_UART_MspInit+0x90>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a1a      	ldr	r2, [pc, #104]	; (800194c <HAL_UART_MspInit+0x90>)
 80018e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x90>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x90>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <HAL_UART_MspInit+0x90>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_UART_MspInit+0x90>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800190c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001910:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4619      	mov	r1, r3
 8001920:	480b      	ldr	r0, [pc, #44]	; (8001950 <HAL_UART_MspInit+0x94>)
 8001922:	f000 fd3d 	bl	80023a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4619      	mov	r1, r3
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <HAL_UART_MspInit+0x94>)
 800193c:	f000 fd30 	bl	80023a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40013800 	.word	0x40013800
 800194c:	40021000 	.word	0x40021000
 8001950:	40010800 	.word	0x40010800

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <HardFault_Handler+0x4>

08001966 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <MemManage_Handler+0x4>

0800196c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <BusFault_Handler+0x4>

08001972 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <UsageFault_Handler+0x4>

08001978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 fbe0 	bl	800214c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800198c:	f003 fcfe 	bl	800538c <xTaskGetSchedulerState>
 8001990:	4603      	mov	r3, r0
 8001992:	2b01      	cmp	r3, #1
 8001994:	d001      	beq.n	800199a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001996:	f003 fedf 	bl	8005758 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}

0800199e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80019a2:	2010      	movs	r0, #16
 80019a4:	f000 fe6e 	bl	8002684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM2_IRQHandler+0x10>)
 80019b2:	f002 f804 	bl	80039be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200012d0 	.word	0x200012d0

080019c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x50>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d102      	bne.n	80019d6 <_sbrk+0x16>
		heap_end = &end;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <_sbrk+0x50>)
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <_sbrk+0x54>)
 80019d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <_sbrk+0x50>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <_sbrk+0x50>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	466a      	mov	r2, sp
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d907      	bls.n	80019fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019ea:	f004 f8cb 	bl	8005b84 <__errno>
 80019ee:	4602      	mov	r2, r0
 80019f0:	230c      	movs	r3, #12
 80019f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	e006      	b.n	8001a08 <_sbrk+0x48>
	}

	heap_end += incr;
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <_sbrk+0x50>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <_sbrk+0x50>)
 8001a04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200004e0 	.word	0x200004e0
 8001a14:	20001318 	.word	0x20001318

08001a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <SystemInit+0x5c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <SystemInit+0x5c>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <SystemInit+0x5c>)
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	4911      	ldr	r1, [pc, #68]	; (8001a74 <SystemInit+0x5c>)
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <SystemInit+0x60>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <SystemInit+0x5c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <SystemInit+0x5c>)
 8001a3a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <SystemInit+0x5c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <SystemInit+0x5c>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <SystemInit+0x5c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <SystemInit+0x5c>)
 8001a56:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a5a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SystemInit+0x5c>)
 8001a5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SystemInit+0x64>)
 8001a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a6a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000
 8001a78:	f8ff0000 	.word	0xf8ff0000
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <pid_task>:

#include "wheel_control.h"
#include <stdlib.h>
#include <stdio.h>

void pid_task(const void *wheel) {
 8001a80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a84:	b088      	sub	sp, #32
 8001a86:	af02      	add	r7, sp, #8
 8001a88:	6078      	str	r0, [r7, #4]
	WheelControl *w = (WheelControl*) wheel;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	617b      	str	r3, [r7, #20]

	double compare = 0;
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	f04f 0400 	mov.w	r4, #0
 8001a96:	e9c7 3402 	strd	r3, r4, [r7, #8]

	while (1) {
		if (w->time_us - w->last_time_us > 50000) {
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	e9d3 8910 	ldrd	r8, r9, [r3, #64]	; 0x40
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	ebb3 0308 	subs.w	r3, r3, r8
 8001aae:	eb64 0409 	sbc.w	r4, r4, r9
 8001ab2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	42a2      	cmp	r2, r4
 8001abc:	bf08      	it	eq
 8001abe:	4299      	cmpeq	r1, r3
 8001ac0:	d20a      	bcs.n	8001ad8 <pid_task+0x58>
			w->encoder_delay_us = 0;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
			w->current_rpm = 0;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	62da      	str	r2, [r3, #44]	; 0x2c
			w->current_freq = 0;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
			//w->status = Stand;
			//w->status_changed = 1;
		}
		compare = pid_calc(w->pid, w->current_rpm, w->rpm);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fca1 	bl	8000428 <__aeabi_f2d>
 8001ae6:	4680      	mov	r8, r0
 8001ae8:	4689      	mov	r9, r1
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fc78 	bl	80003e4 <__aeabi_ui2d>
 8001af4:	4603      	mov	r3, r0
 8001af6:	460c      	mov	r4, r1
 8001af8:	e9cd 3400 	strd	r3, r4, [sp]
 8001afc:	4642      	mov	r2, r8
 8001afe:	464b      	mov	r3, r9
 8001b00:	4628      	mov	r0, r5
 8001b02:	f7ff fd65 	bl	80015d0 <pid_calc>
 8001b06:	e9c7 0102 	strd	r0, r1, [r7, #8]
		if (w->status == TurnCkw) {
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	7f1b      	ldrb	r3, [r3, #28]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d133      	bne.n	8001b7a <pid_task+0xfa>
			__HAL_TIM_SET_COMPARE(w->htim, w->channel_ckw, compare);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <pid_task+0xae>
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	681c      	ldr	r4, [r3, #0]
 8001b20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b24:	f7fe ffb0 	bl	8000a88 <__aeabi_d2uiz>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	6363      	str	r3, [r4, #52]	; 0x34
 8001b2c:	e05c      	b.n	8001be8 <pid_task+0x168>
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d109      	bne.n	8001b4a <pid_task+0xca>
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	681c      	ldr	r4, [r3, #0]
 8001b3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b40:	f7fe ffa2 	bl	8000a88 <__aeabi_d2uiz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b48:	e04e      	b.n	8001be8 <pid_task+0x168>
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d109      	bne.n	8001b66 <pid_task+0xe6>
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	681c      	ldr	r4, [r3, #0]
 8001b58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b5c:	f7fe ff94 	bl	8000a88 <__aeabi_d2uiz>
 8001b60:	4603      	mov	r3, r0
 8001b62:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001b64:	e040      	b.n	8001be8 <pid_task+0x168>
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	681c      	ldr	r4, [r3, #0]
 8001b6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b70:	f7fe ff8a 	bl	8000a88 <__aeabi_d2uiz>
 8001b74:	4603      	mov	r3, r0
 8001b76:	6423      	str	r3, [r4, #64]	; 0x40
 8001b78:	e036      	b.n	8001be8 <pid_task+0x168>
		} else if (w->status == TurnC_ckw) {
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	7f1b      	ldrb	r3, [r3, #28]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d132      	bne.n	8001be8 <pid_task+0x168>
			__HAL_TIM_SET_COMPARE(w->htim, w->channel_c_ckw, compare);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <pid_task+0x11e>
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	681c      	ldr	r4, [r3, #0]
 8001b90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b94:	f7fe ff78 	bl	8000a88 <__aeabi_d2uiz>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	6363      	str	r3, [r4, #52]	; 0x34
 8001b9c:	e024      	b.n	8001be8 <pid_task+0x168>
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d109      	bne.n	8001bba <pid_task+0x13a>
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	681c      	ldr	r4, [r3, #0]
 8001bac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb0:	f7fe ff6a 	bl	8000a88 <__aeabi_d2uiz>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	63a3      	str	r3, [r4, #56]	; 0x38
 8001bb8:	e016      	b.n	8001be8 <pid_task+0x168>
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d109      	bne.n	8001bd6 <pid_task+0x156>
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	681c      	ldr	r4, [r3, #0]
 8001bc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bcc:	f7fe ff5c 	bl	8000a88 <__aeabi_d2uiz>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001bd4:	e008      	b.n	8001be8 <pid_task+0x168>
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	681c      	ldr	r4, [r3, #0]
 8001bdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001be0:	f7fe ff52 	bl	8000a88 <__aeabi_d2uiz>
 8001be4:	4603      	mov	r3, r0
 8001be6:	6423      	str	r3, [r4, #64]	; 0x40
		}



		osDelay(100);
 8001be8:	2064      	movs	r0, #100	; 0x64
 8001bea:	f002 fe5d 	bl	80048a8 <osDelay>
		if (w->time_us - w->last_time_us > 50000) {
 8001bee:	e754      	b.n	8001a9a <pid_task+0x1a>

08001bf0 <wheel_init>:
}

void wheel_init(WheelControl *wheel, UART_HandleTypeDef *huart,
		GPIO_TypeDef *gpio_port_en, uint16_t GPIO_Pin_en,
		TIM_HandleTypeDef *htim, uint32_t Channel_ckw, uint32_t Channel_c_ckw,
		GPIO_TypeDef *gpio_port, uint16_t GPIO_Pin_1, uint16_t GPIO_Pin_2) {
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b098      	sub	sp, #96	; 0x60
 8001bf4:	af06      	add	r7, sp, #24
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	807b      	strh	r3, [r7, #2]

	wheel->huart = huart;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	kalman_filter_init(&wheel->kf, 1, 500, 0, 0);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	f04f 0400 	mov.w	r4, #0
 8001c14:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	f04f 0400 	mov.w	r4, #0
 8001c20:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	4c3d      	ldr	r4, [pc, #244]	; (8001d20 <wheel_init+0x130>)
 8001c2a:	e9cd 3400 	strd	r3, r4, [sp]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <wheel_init+0x134>)
 8001c34:	4608      	mov	r0, r1
 8001c36:	f7ff f84b 	bl	8000cd0 <kalman_filter_init>

	wheel->pid = pid_init(0.02, 0.02, 0, 0, TIM4->ARR);
 8001c3a:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <wheel_init+0x138>)
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fbd0 	bl	80003e4 <__aeabi_ui2d>
 8001c44:	4603      	mov	r3, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	f04f 0400 	mov.w	r4, #0
 8001c54:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	e9cd 3400 	strd	r3, r4, [sp]
 8001c64:	a32c      	add	r3, pc, #176	; (adr r3, 8001d18 <wheel_init+0x128>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	a12b      	add	r1, pc, #172	; (adr r1, 8001d18 <wheel_init+0x128>)
 8001c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c70:	f7ff fc62 	bl	8001538 <pid_init>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	649a      	str	r2, [r3, #72]	; 0x48

	wheel->gpio_port_en = gpio_port_en;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	601a      	str	r2, [r3, #0]
	wheel->gpio_pin_en = GPIO_Pin_en;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	887a      	ldrh	r2, [r7, #2]
 8001c84:	809a      	strh	r2, [r3, #4]

	wheel->htim = htim;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c8a:	609a      	str	r2, [r3, #8]
	wheel->channel_ckw = Channel_ckw;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001c90:	60da      	str	r2, [r3, #12]
	wheel->channel_c_ckw = Channel_c_ckw;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c96:	611a      	str	r2, [r3, #16]

	wheel->gpio_port = gpio_port;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c9c:	615a      	str	r2, [r3, #20]
	wheel->gpio_pin_1 = GPIO_Pin_1;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8001ca4:	831a      	strh	r2, [r3, #24]
	wheel->gpio_pin_2 = GPIO_Pin_2;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001cac:	835a      	strh	r2, [r3, #26]

	wheel->status_changed = 1;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	775a      	strb	r2, [r3, #29]
	wheel->status = Stand;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	771a      	strb	r2, [r3, #28]
	wheel->rpm = 0;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]

	osThreadDef(wheelTask, wheel_control_task, osPriorityNormal, 0, 128);
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <wheel_init+0x13c>)
 8001cc2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ccc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	wheel->taskHandle = osThreadCreate(osThread(wheelTask), (void*) wheel);
 8001cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fd98 	bl	8004810 <osThreadCreate>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24

	osThreadDef(encTask, pid_task, osPriorityNormal, 0, 128);
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <wheel_init+0x140>)
 8001ce8:	f107 0410 	add.w	r4, r7, #16
 8001cec:	461d      	mov	r5, r3
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	wheel->taskHandle = osThreadCreate(osThread(encTask), (void*) wheel);
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fd85 	bl	8004810 <osThreadCreate>
 8001d06:	4602      	mov	r2, r0
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24

	//return wheel;
}
 8001d0c:	bf00      	nop
 8001d0e:	3748      	adds	r7, #72	; 0x48
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bdb0      	pop	{r4, r5, r7, pc}
 8001d14:	f3af 8000 	nop.w
 8001d18:	47ae147b 	.word	0x47ae147b
 8001d1c:	3f947ae1 	.word	0x3f947ae1
 8001d20:	407f4000 	.word	0x407f4000
 8001d24:	3ff00000 	.word	0x3ff00000
 8001d28:	40000800 	.word	0x40000800
 8001d2c:	080096b8 	.word	0x080096b8
 8001d30:	080096dc 	.word	0x080096dc

08001d34 <turn_clockwise>:

void turn_clockwise(WheelControl *wheel, uint32_t rpm) {
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
	wheel->status_changed = 1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	775a      	strb	r2, [r3, #29]
	wheel->status = TurnCkw;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	771a      	strb	r2, [r3, #28]
	wheel->rpm = rpm;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	621a      	str	r2, [r3, #32]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
	...

08001d5c <wheel_control_task>:
	wheel->status_changed = 1;
	wheel->status = TurnC_ckw;
	wheel->rpm = rpm;
}

void wheel_control_task(void const *wheel) {
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	WheelControl *w = (WheelControl*) wheel;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (w->status_changed) {
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	7f5b      	ldrb	r3, [r3, #29]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80cd 	beq.w	8001f0c <wheel_control_task+0x1b0>
			switch (w->status) {
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	7f1b      	ldrb	r3, [r3, #28]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	f200 80c8 	bhi.w	8001f0c <wheel_control_task+0x1b0>
 8001d7c:	a201      	add	r2, pc, #4	; (adr r2, 8001d84 <wheel_control_task+0x28>)
 8001d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d82:	bf00      	nop
 8001d84:	08001d95 	.word	0x08001d95
 8001d88:	08001e1d 	.word	0x08001e1d
 8001d8c:	08001e95 	.word	0x08001e95
 8001d90:	08001f0d 	.word	0x08001f0d
			case Stand:
				HAL_TIM_PWM_Stop(w->htim, w->channel_ckw);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f001 fde0 	bl	8003964 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Stop(w->htim, w->channel_c_ckw);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f001 fdd8 	bl	8003964 <HAL_TIM_PWM_Stop>

				setGPIOMode(w->gpio_port_en, w->gpio_pin_en,
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7ff fb18 	bl	80013f4 <setGPIOMode>
				GPIO_MODE_OUTPUT_PP);
				HAL_GPIO_WritePin(w->gpio_port_en, w->gpio_pin_en,
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	889b      	ldrh	r3, [r3, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f000 fc40 	bl	8002654 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);

				setGPIOMode(w->gpio_port, w->gpio_pin_1, GPIO_MODE_OUTPUT_PP);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6958      	ldr	r0, [r3, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8b1b      	ldrh	r3, [r3, #24]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7ff fb08 	bl	80013f4 <setGPIOMode>
				HAL_GPIO_WritePin(w->gpio_port, w->gpio_pin_1, GPIO_PIN_RESET);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6958      	ldr	r0, [r3, #20]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8b1b      	ldrh	r3, [r3, #24]
 8001dec:	2200      	movs	r2, #0
 8001dee:	4619      	mov	r1, r3
 8001df0:	f000 fc30 	bl	8002654 <HAL_GPIO_WritePin>
				setGPIOMode(w->gpio_port, w->gpio_pin_2, GPIO_MODE_OUTPUT_PP);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6958      	ldr	r0, [r3, #20]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8b5b      	ldrh	r3, [r3, #26]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7ff faf8 	bl	80013f4 <setGPIOMode>
				HAL_GPIO_WritePin(w->gpio_port, w->gpio_pin_2, GPIO_PIN_RESET);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6958      	ldr	r0, [r3, #20]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8b5b      	ldrh	r3, [r3, #26]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f000 fc20 	bl	8002654 <HAL_GPIO_WritePin>
				w->status_changed = 0;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	775a      	strb	r2, [r3, #29]
				break;
 8001e1a:	e077      	b.n	8001f0c <wheel_control_task+0x1b0>
			case TurnCkw:
				HAL_TIM_PWM_Stop(w->htim, w->channel_c_ckw);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4619      	mov	r1, r3
 8001e26:	4610      	mov	r0, r2
 8001e28:	f001 fd9c 	bl	8003964 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(w->htim, w->channel_ckw);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4619      	mov	r1, r3
 8001e36:	4610      	mov	r0, r2
 8001e38:	f001 fd72 	bl	8003920 <HAL_TIM_PWM_Start>
				setGPIOMode(w->gpio_port, w->gpio_pin_1, GPIO_MODE_INPUT);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6958      	ldr	r0, [r3, #20]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8b1b      	ldrh	r3, [r3, #24]
 8001e44:	2200      	movs	r2, #0
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7ff fad4 	bl	80013f4 <setGPIOMode>
				HAL_GPIO_WritePin(w->gpio_port, w->gpio_pin_1, GPIO_PIN_RESET);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6958      	ldr	r0, [r3, #20]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8b1b      	ldrh	r3, [r3, #24]
 8001e54:	2200      	movs	r2, #0
 8001e56:	4619      	mov	r1, r3
 8001e58:	f000 fbfc 	bl	8002654 <HAL_GPIO_WritePin>
				setGPIOMode(w->gpio_port, w->gpio_pin_2, GPIO_MODE_OUTPUT_PP);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6958      	ldr	r0, [r3, #20]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8b5b      	ldrh	r3, [r3, #26]
 8001e64:	2201      	movs	r2, #1
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7ff fac4 	bl	80013f4 <setGPIOMode>
				HAL_GPIO_WritePin(w->gpio_port, w->gpio_pin_2, GPIO_PIN_SET);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6958      	ldr	r0, [r3, #20]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8b5b      	ldrh	r3, [r3, #26]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4619      	mov	r1, r3
 8001e78:	f000 fbec 	bl	8002654 <HAL_GPIO_WritePin>
				w->status_changed = 0;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	775a      	strb	r2, [r3, #29]
				w->last_time_us = w->time_us;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001e88:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
				//w->current_rpm = 0;
				//__HAL_TIM_SET_COMPARE(w->htim, w->channel_ckw, 1700);
				break;
 8001e92:	e03b      	b.n	8001f0c <wheel_control_task+0x1b0>
			case TurnC_ckw:
				HAL_TIM_PWM_Stop(w->htim, w->channel_ckw);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	f001 fd60 	bl	8003964 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(w->htim, w->channel_c_ckw);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4610      	mov	r0, r2
 8001eb0:	f001 fd36 	bl	8003920 <HAL_TIM_PWM_Start>
				setGPIOMode(w->gpio_port, w->gpio_pin_2, GPIO_MODE_INPUT);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6958      	ldr	r0, [r3, #20]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8b5b      	ldrh	r3, [r3, #26]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7ff fa98 	bl	80013f4 <setGPIOMode>
				HAL_GPIO_WritePin(w->gpio_port, w->gpio_pin_2, GPIO_PIN_RESET);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6958      	ldr	r0, [r3, #20]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8b5b      	ldrh	r3, [r3, #26]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f000 fbc0 	bl	8002654 <HAL_GPIO_WritePin>
				setGPIOMode(w->gpio_port, w->gpio_pin_1, GPIO_MODE_OUTPUT_PP);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6958      	ldr	r0, [r3, #20]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8b1b      	ldrh	r3, [r3, #24]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7ff fa88 	bl	80013f4 <setGPIOMode>
				HAL_GPIO_WritePin(w->gpio_port, w->gpio_pin_1, GPIO_PIN_SET);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6958      	ldr	r0, [r3, #20]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8b1b      	ldrh	r3, [r3, #24]
 8001eec:	2201      	movs	r2, #1
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f000 fbb0 	bl	8002654 <HAL_GPIO_WritePin>
				w->status_changed = 0;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	775a      	strb	r2, [r3, #29]
				w->last_time_us = w->time_us;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001f00:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
				//w->current_rpm = 0;
				//__HAL_TIM_SET_COMPARE(w->htim, w->channel_c_ckw, 1700);
				break;
 8001f0a:	bf00      	nop
			}

		} /*else {

		 }*/
		osDelay(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f002 fccb 	bl	80048a8 <osDelay>
		if (w->status_changed) {
 8001f12:	e729      	b.n	8001d68 <wheel_control_task+0xc>
 8001f14:	0000      	movs	r0, r0
	...

08001f18 <wheel_encoder_task>:
	}
}

void wheel_encoder_task(WheelControl *w) {
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_SET_COMPARE(wheel->htim, wheel->channel_ckw, wheel->rpm);
	w->encoder_delay_us = w->time_us - w->last_time_us;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001f26:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001f32:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f36:	1ad2      	subs	r2, r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
	w->last_time_us = w->time_us;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001f42:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	if (w->encoder_delay_us > 0) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d07d      	beq.n	8002050 <wheel_encoder_task+0x138>
		w->current_freq = 1.0 / (w->encoder_delay_us * 0.000001);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fa43 	bl	80003e4 <__aeabi_ui2d>
 8001f5e:	a33e      	add	r3, pc, #248	; (adr r3, 8002058 <wheel_encoder_task+0x140>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	f7fe fab8 	bl	80004d8 <__aeabi_dmul>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	460c      	mov	r4, r1
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4623      	mov	r3, r4
 8001f70:	f04f 0000 	mov.w	r0, #0
 8001f74:	493a      	ldr	r1, [pc, #232]	; (8002060 <wheel_encoder_task+0x148>)
 8001f76:	f7fe fbd9 	bl	800072c <__aeabi_ddiv>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	460c      	mov	r4, r1
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4621      	mov	r1, r4
 8001f82:	f7fe fda1 	bl	8000ac8 <__aeabi_d2f>
 8001f86:	4602      	mov	r2, r0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
		w->current_rpm = ((w->current_freq * 0.0625) * 60.0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fa49 	bl	8000428 <__aeabi_f2d>
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	4b32      	ldr	r3, [pc, #200]	; (8002064 <wheel_encoder_task+0x14c>)
 8001f9c:	f7fe fa9c 	bl	80004d8 <__aeabi_dmul>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	460c      	mov	r4, r1
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <wheel_encoder_task+0x150>)
 8001fae:	f7fe fa93 	bl	80004d8 <__aeabi_dmul>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4621      	mov	r1, r4
 8001fba:	f7fe fd85 	bl	8000ac8 <__aeabi_d2f>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c

		if (w->current_rpm > 10000) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	4928      	ldr	r1, [pc, #160]	; (800206c <wheel_encoder_task+0x154>)
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fe38 	bl	8000c40 <__aeabi_fcmpgt>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <wheel_encoder_task+0xc6>
		 w->current_rpm = 10000;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a24      	ldr	r2, [pc, #144]	; (800206c <wheel_encoder_task+0x154>)
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fdc:	e00d      	b.n	8001ffa <wheel_encoder_task+0xe2>
		 } else if (w->current_rpm < 0) {
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	f04f 0100 	mov.w	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fe0c 	bl	8000c04 <__aeabi_fcmplt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <wheel_encoder_task+0xe2>
			w->current_rpm = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		if (w->current_rpm < 11000 && w->current_rpm > 0) {
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	491c      	ldr	r1, [pc, #112]	; (8002070 <wheel_encoder_task+0x158>)
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fdff 	bl	8000c04 <__aeabi_fcmplt>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d100      	bne.n	800200e <wheel_encoder_task+0xf6>

		}

	}

}
 800200c:	e020      	b.n	8002050 <wheel_encoder_task+0x138>
		if (w->current_rpm < 11000 && w->current_rpm > 0) {
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fe12 	bl	8000c40 <__aeabi_fcmpgt>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d100      	bne.n	8002024 <wheel_encoder_task+0x10c>
}
 8002022:	e015      	b.n	8002050 <wheel_encoder_task+0x138>
			w->current_rpm = kalman_filter_calc(&w->kf, w->current_rpm);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe f9fa 	bl	8000428 <__aeabi_f2d>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4620      	mov	r0, r4
 800203a:	f7fe fe77 	bl	8000d2c <kalman_filter_calc>
 800203e:	4603      	mov	r3, r0
 8002040:	460c      	mov	r4, r1
 8002042:	4618      	mov	r0, r3
 8002044:	4621      	mov	r1, r4
 8002046:	f7fe fd3f 	bl	8000ac8 <__aeabi_d2f>
 800204a:	4602      	mov	r2, r0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	a0b5ed8d 	.word	0xa0b5ed8d
 800205c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002060:	3ff00000 	.word	0x3ff00000
 8002064:	3fb00000 	.word	0x3fb00000
 8002068:	404e0000 	.word	0x404e0000
 800206c:	461c4000 	.word	0x461c4000
 8002070:	462be000 	.word	0x462be000

08002074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002074:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002076:	e003      	b.n	8002080 <LoopCopyDataInit>

08002078 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800207a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800207c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800207e:	3104      	adds	r1, #4

08002080 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002080:	480a      	ldr	r0, [pc, #40]	; (80020ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002084:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002086:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002088:	d3f6      	bcc.n	8002078 <CopyDataInit>
  ldr r2, =_sbss
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800208c:	e002      	b.n	8002094 <LoopFillZerobss>

0800208e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002090:	f842 3b04 	str.w	r3, [r2], #4

08002094 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002096:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002098:	d3f9      	bcc.n	800208e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800209a:	f7ff fcbd 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800209e:	f003 fd77 	bl	8005b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020a2:	f7fe feb7 	bl	8000e14 <main>
  bx lr
 80020a6:	4770      	bx	lr
  ldr r3, =_sidata
 80020a8:	080099e8 	.word	0x080099e8
  ldr r0, =_sdata
 80020ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80020b4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80020b8:	20001318 	.word	0x20001318

080020bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020bc:	e7fe      	b.n	80020bc <ADC1_IRQHandler>
	...

080020c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <HAL_Init+0x28>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a07      	ldr	r2, [pc, #28]	; (80020e8 <HAL_Init+0x28>)
 80020ca:	f043 0310 	orr.w	r3, r3, #16
 80020ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f000 f923 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d6:	200f      	movs	r0, #15
 80020d8:	f000 f808 	bl	80020ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020dc:	f7ff fb28 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000

080020ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_InitTick+0x54>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_InitTick+0x58>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002102:	fbb3 f3f1 	udiv	r3, r3, r1
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f93b 	bl	8002386 <HAL_SYSTICK_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e00e      	b.n	8002138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0f      	cmp	r3, #15
 800211e:	d80a      	bhi.n	8002136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002120:	2200      	movs	r2, #0
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f000 f903 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800212c:	4a06      	ldr	r2, [pc, #24]	; (8002148 <HAL_InitTick+0x5c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000000 	.word	0x20000000
 8002144:	20000008 	.word	0x20000008
 8002148:	20000004 	.word	0x20000004

0800214c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_IncTick+0x1c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_IncTick+0x20>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a03      	ldr	r2, [pc, #12]	; (800216c <HAL_IncTick+0x20>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	20000008 	.word	0x20000008
 800216c:	20001310 	.word	0x20001310

08002170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <HAL_GetTick+0x10>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20001310 	.word	0x20001310

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4906      	ldr	r1, [pc, #24]	; (800221c <__NVIC_EnableIRQ+0x34>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff90 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff2d 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff42 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff90 	bl	8002274 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5f 	bl	8002220 <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff35 	bl	80021e8 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b08b      	sub	sp, #44	; 0x2c
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b2:	e127      	b.n	8002604 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023b4:	2201      	movs	r2, #1
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	f040 8116 	bne.w	80025fe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b12      	cmp	r3, #18
 80023d8:	d034      	beq.n	8002444 <HAL_GPIO_Init+0xa4>
 80023da:	2b12      	cmp	r3, #18
 80023dc:	d80d      	bhi.n	80023fa <HAL_GPIO_Init+0x5a>
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d02b      	beq.n	800243a <HAL_GPIO_Init+0x9a>
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d804      	bhi.n	80023f0 <HAL_GPIO_Init+0x50>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d031      	beq.n	800244e <HAL_GPIO_Init+0xae>
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d01c      	beq.n	8002428 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ee:	e048      	b.n	8002482 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d043      	beq.n	800247c <HAL_GPIO_Init+0xdc>
 80023f4:	2b11      	cmp	r3, #17
 80023f6:	d01b      	beq.n	8002430 <HAL_GPIO_Init+0x90>
          break;
 80023f8:	e043      	b.n	8002482 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80023fa:	4a89      	ldr	r2, [pc, #548]	; (8002620 <HAL_GPIO_Init+0x280>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d026      	beq.n	800244e <HAL_GPIO_Init+0xae>
 8002400:	4a87      	ldr	r2, [pc, #540]	; (8002620 <HAL_GPIO_Init+0x280>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d806      	bhi.n	8002414 <HAL_GPIO_Init+0x74>
 8002406:	4a87      	ldr	r2, [pc, #540]	; (8002624 <HAL_GPIO_Init+0x284>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d020      	beq.n	800244e <HAL_GPIO_Init+0xae>
 800240c:	4a86      	ldr	r2, [pc, #536]	; (8002628 <HAL_GPIO_Init+0x288>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01d      	beq.n	800244e <HAL_GPIO_Init+0xae>
          break;
 8002412:	e036      	b.n	8002482 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002414:	4a85      	ldr	r2, [pc, #532]	; (800262c <HAL_GPIO_Init+0x28c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d019      	beq.n	800244e <HAL_GPIO_Init+0xae>
 800241a:	4a85      	ldr	r2, [pc, #532]	; (8002630 <HAL_GPIO_Init+0x290>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d016      	beq.n	800244e <HAL_GPIO_Init+0xae>
 8002420:	4a84      	ldr	r2, [pc, #528]	; (8002634 <HAL_GPIO_Init+0x294>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0xae>
          break;
 8002426:	e02c      	b.n	8002482 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	623b      	str	r3, [r7, #32]
          break;
 800242e:	e028      	b.n	8002482 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	3304      	adds	r3, #4
 8002436:	623b      	str	r3, [r7, #32]
          break;
 8002438:	e023      	b.n	8002482 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	3308      	adds	r3, #8
 8002440:	623b      	str	r3, [r7, #32]
          break;
 8002442:	e01e      	b.n	8002482 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	330c      	adds	r3, #12
 800244a:	623b      	str	r3, [r7, #32]
          break;
 800244c:	e019      	b.n	8002482 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002456:	2304      	movs	r3, #4
 8002458:	623b      	str	r3, [r7, #32]
          break;
 800245a:	e012      	b.n	8002482 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002464:	2308      	movs	r3, #8
 8002466:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	611a      	str	r2, [r3, #16]
          break;
 800246e:	e008      	b.n	8002482 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002470:	2308      	movs	r3, #8
 8002472:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	615a      	str	r2, [r3, #20]
          break;
 800247a:	e002      	b.n	8002482 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800247c:	2300      	movs	r3, #0
 800247e:	623b      	str	r3, [r7, #32]
          break;
 8002480:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2bff      	cmp	r3, #255	; 0xff
 8002486:	d801      	bhi.n	800248c <HAL_GPIO_Init+0xec>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	e001      	b.n	8002490 <HAL_GPIO_Init+0xf0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3304      	adds	r3, #4
 8002490:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2bff      	cmp	r3, #255	; 0xff
 8002496:	d802      	bhi.n	800249e <HAL_GPIO_Init+0xfe>
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x104>
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	3b08      	subs	r3, #8
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	210f      	movs	r1, #15
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	401a      	ands	r2, r3
 80024b6:	6a39      	ldr	r1, [r7, #32]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	431a      	orrs	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 8096 	beq.w	80025fe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024d2:	4b59      	ldr	r3, [pc, #356]	; (8002638 <HAL_GPIO_Init+0x298>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	4a58      	ldr	r2, [pc, #352]	; (8002638 <HAL_GPIO_Init+0x298>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6193      	str	r3, [r2, #24]
 80024de:	4b56      	ldr	r3, [pc, #344]	; (8002638 <HAL_GPIO_Init+0x298>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024ea:	4a54      	ldr	r2, [pc, #336]	; (800263c <HAL_GPIO_Init+0x29c>)
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	3302      	adds	r3, #2
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4b      	ldr	r2, [pc, #300]	; (8002640 <HAL_GPIO_Init+0x2a0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_GPIO_Init+0x19e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4a      	ldr	r2, [pc, #296]	; (8002644 <HAL_GPIO_Init+0x2a4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00d      	beq.n	800253a <HAL_GPIO_Init+0x19a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a49      	ldr	r2, [pc, #292]	; (8002648 <HAL_GPIO_Init+0x2a8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0x196>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a48      	ldr	r2, [pc, #288]	; (800264c <HAL_GPIO_Init+0x2ac>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_GPIO_Init+0x192>
 800252e:	2303      	movs	r3, #3
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x1a0>
 8002532:	2304      	movs	r3, #4
 8002534:	e004      	b.n	8002540 <HAL_GPIO_Init+0x1a0>
 8002536:	2302      	movs	r3, #2
 8002538:	e002      	b.n	8002540 <HAL_GPIO_Init+0x1a0>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_GPIO_Init+0x1a0>
 800253e:	2300      	movs	r3, #0
 8002540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002542:	f002 0203 	and.w	r2, r2, #3
 8002546:	0092      	lsls	r2, r2, #2
 8002548:	4093      	lsls	r3, r2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002550:	493a      	ldr	r1, [pc, #232]	; (800263c <HAL_GPIO_Init+0x29c>)
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	3302      	adds	r3, #2
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d006      	beq.n	8002578 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800256a:	4b39      	ldr	r3, [pc, #228]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4938      	ldr	r1, [pc, #224]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
 8002576:	e006      	b.n	8002586 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002578:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	43db      	mvns	r3, r3
 8002580:	4933      	ldr	r1, [pc, #204]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 8002582:	4013      	ands	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002592:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	492e      	ldr	r1, [pc, #184]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
 800259e:	e006      	b.n	80025ae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	4929      	ldr	r1, [pc, #164]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025ba:	4b25      	ldr	r3, [pc, #148]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	4924      	ldr	r1, [pc, #144]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
 80025c6:	e006      	b.n	80025d6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	491f      	ldr	r1, [pc, #124]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	491a      	ldr	r1, [pc, #104]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60cb      	str	r3, [r1, #12]
 80025ee:	e006      	b.n	80025fe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	4915      	ldr	r1, [pc, #84]	; (8002650 <HAL_GPIO_Init+0x2b0>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	3301      	adds	r3, #1
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	fa22 f303 	lsr.w	r3, r2, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	f47f aed0 	bne.w	80023b4 <HAL_GPIO_Init+0x14>
  }
}
 8002614:	bf00      	nop
 8002616:	372c      	adds	r7, #44	; 0x2c
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	10210000 	.word	0x10210000
 8002624:	10110000 	.word	0x10110000
 8002628:	10120000 	.word	0x10120000
 800262c:	10310000 	.word	0x10310000
 8002630:	10320000 	.word	0x10320000
 8002634:	10220000 	.word	0x10220000
 8002638:	40021000 	.word	0x40021000
 800263c:	40010000 	.word	0x40010000
 8002640:	40010800 	.word	0x40010800
 8002644:	40010c00 	.word	0x40010c00
 8002648:	40011000 	.word	0x40011000
 800264c:	40011400 	.word	0x40011400
 8002650:	40010400 	.word	0x40010400

08002654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
 8002660:	4613      	mov	r3, r2
 8002662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002664:	787b      	ldrb	r3, [r7, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002670:	e003      	b.n	800267a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	041a      	lsls	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fe72 	bl	800138c <HAL_GPIO_EXTI_Callback>
  }
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	420e0020 	.word	0x420e0020

080026cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e26c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8087 	beq.w	80027fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ec:	4b92      	ldr	r3, [pc, #584]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d00c      	beq.n	8002712 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026f8:	4b8f      	ldr	r3, [pc, #572]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d112      	bne.n	800272a <HAL_RCC_OscConfig+0x5e>
 8002704:	4b8c      	ldr	r3, [pc, #560]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002710:	d10b      	bne.n	800272a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002712:	4b89      	ldr	r3, [pc, #548]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d06c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x12c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d168      	bne.n	80027f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e246      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x76>
 8002734:	4b80      	ldr	r3, [pc, #512]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a7f      	ldr	r2, [pc, #508]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 800273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e02e      	b.n	80027a0 <HAL_RCC_OscConfig+0xd4>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x98>
 800274a:	4b7b      	ldr	r3, [pc, #492]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a7a      	ldr	r2, [pc, #488]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b78      	ldr	r3, [pc, #480]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a77      	ldr	r2, [pc, #476]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 800275c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e01d      	b.n	80027a0 <HAL_RCC_OscConfig+0xd4>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0xbc>
 800276e:	4b72      	ldr	r3, [pc, #456]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a71      	ldr	r2, [pc, #452]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6e      	ldr	r2, [pc, #440]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0xd4>
 8002788:	4b6b      	ldr	r3, [pc, #428]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a6a      	ldr	r2, [pc, #424]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a67      	ldr	r2, [pc, #412]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7ff fce2 	bl	8002170 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff fcde 	bl	8002170 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e1fa      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b5d      	ldr	r3, [pc, #372]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0xe4>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7ff fcce 	bl	8002170 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7ff fcca 	bl	8002170 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1e6      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	4b53      	ldr	r3, [pc, #332]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x10c>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d063      	beq.n	80028ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002806:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002812:	4b49      	ldr	r3, [pc, #292]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b08      	cmp	r3, #8
 800281c:	d11c      	bne.n	8002858 <HAL_RCC_OscConfig+0x18c>
 800281e:	4b46      	ldr	r3, [pc, #280]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d116      	bne.n	8002858 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	4b43      	ldr	r3, [pc, #268]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x176>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e1ba      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4939      	ldr	r1, [pc, #228]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	e03a      	b.n	80028ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_RCC_OscConfig+0x270>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7ff fc83 	bl	8002170 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286e:	f7ff fc7f 	bl	8002170 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e19b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288c:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4927      	ldr	r1, [pc, #156]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a2:	4b26      	ldr	r3, [pc, #152]	; (800293c <HAL_RCC_OscConfig+0x270>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff fc62 	bl	8002170 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b0:	f7ff fc5e 	bl	8002170 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e17a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d03a      	beq.n	8002950 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d019      	beq.n	8002916 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e8:	f7ff fc42 	bl	8002170 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f0:	f7ff fc3e 	bl	8002170 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e15a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_RCC_OscConfig+0x26c>)
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800290e:	2001      	movs	r0, #1
 8002910:	f000 fada 	bl	8002ec8 <RCC_Delay>
 8002914:	e01c      	b.n	8002950 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_RCC_OscConfig+0x274>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291c:	f7ff fc28 	bl	8002170 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002922:	e00f      	b.n	8002944 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002924:	f7ff fc24 	bl	8002170 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d908      	bls.n	8002944 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e140      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	42420000 	.word	0x42420000
 8002940:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002944:	4b9e      	ldr	r3, [pc, #632]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e9      	bne.n	8002924 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80a6 	beq.w	8002aaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002962:	4b97      	ldr	r3, [pc, #604]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10d      	bne.n	800298a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b94      	ldr	r3, [pc, #592]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a93      	ldr	r2, [pc, #588]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	61d3      	str	r3, [r2, #28]
 800297a:	4b91      	ldr	r3, [pc, #580]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002986:	2301      	movs	r3, #1
 8002988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298a:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <HAL_RCC_OscConfig+0x4f8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d118      	bne.n	80029c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002996:	4b8b      	ldr	r3, [pc, #556]	; (8002bc4 <HAL_RCC_OscConfig+0x4f8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a8a      	ldr	r2, [pc, #552]	; (8002bc4 <HAL_RCC_OscConfig+0x4f8>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a2:	f7ff fbe5 	bl	8002170 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029aa:	f7ff fbe1 	bl	8002170 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b64      	cmp	r3, #100	; 0x64
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0fd      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	4b81      	ldr	r3, [pc, #516]	; (8002bc4 <HAL_RCC_OscConfig+0x4f8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x312>
 80029d0:	4b7b      	ldr	r3, [pc, #492]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	4a7a      	ldr	r2, [pc, #488]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6213      	str	r3, [r2, #32]
 80029dc:	e02d      	b.n	8002a3a <HAL_RCC_OscConfig+0x36e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x334>
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4a75      	ldr	r2, [pc, #468]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	6213      	str	r3, [r2, #32]
 80029f2:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	4a72      	ldr	r2, [pc, #456]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	6213      	str	r3, [r2, #32]
 80029fe:	e01c      	b.n	8002a3a <HAL_RCC_OscConfig+0x36e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d10c      	bne.n	8002a22 <HAL_RCC_OscConfig+0x356>
 8002a08:	4b6d      	ldr	r3, [pc, #436]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4a6c      	ldr	r2, [pc, #432]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	6213      	str	r3, [r2, #32]
 8002a14:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4a69      	ldr	r2, [pc, #420]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6213      	str	r3, [r2, #32]
 8002a20:	e00b      	b.n	8002a3a <HAL_RCC_OscConfig+0x36e>
 8002a22:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4a66      	ldr	r2, [pc, #408]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	6213      	str	r3, [r2, #32]
 8002a2e:	4b64      	ldr	r3, [pc, #400]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4a63      	ldr	r2, [pc, #396]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	f023 0304 	bic.w	r3, r3, #4
 8002a38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d015      	beq.n	8002a6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a42:	f7ff fb95 	bl	8002170 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7ff fb91 	bl	8002170 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e0ab      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	4b57      	ldr	r3, [pc, #348]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ee      	beq.n	8002a4a <HAL_RCC_OscConfig+0x37e>
 8002a6c:	e014      	b.n	8002a98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fb7f 	bl	8002170 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7ff fb7b 	bl	8002170 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e095      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8c:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ee      	bne.n	8002a76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d105      	bne.n	8002aaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9e:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	4a47      	ldr	r2, [pc, #284]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8081 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 030c 	and.w	r3, r3, #12
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d061      	beq.n	8002b84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d146      	bne.n	8002b56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac8:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_RCC_OscConfig+0x4fc>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7ff fb4f 	bl	8002170 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7ff fb4b 	bl	8002170 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e067      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f0      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d108      	bne.n	8002b10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002afe:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	492d      	ldr	r1, [pc, #180]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a19      	ldr	r1, [r3, #32]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	430b      	orrs	r3, r1
 8002b22:	4927      	ldr	r1, [pc, #156]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_RCC_OscConfig+0x4fc>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7ff fb1f 	bl	8002170 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7ff fb1b 	bl	8002170 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e037      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x46a>
 8002b54:	e02f      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <HAL_RCC_OscConfig+0x4fc>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7ff fb08 	bl	8002170 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7ff fb04 	bl	8002170 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e020      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x498>
 8002b82:	e018      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e013      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x4f4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	42420060 	.word	0x42420060

08002bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0d0      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b6a      	ldr	r3, [pc, #424]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d910      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b67      	ldr	r3, [pc, #412]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 0207 	bic.w	r2, r3, #7
 8002bf6:	4965      	ldr	r1, [pc, #404]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b63      	ldr	r3, [pc, #396]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b8      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c28:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c40:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a52      	ldr	r2, [pc, #328]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	494d      	ldr	r1, [pc, #308]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d040      	beq.n	8002cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d115      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e073      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e06b      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4936      	ldr	r1, [pc, #216]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7ff fa58 	bl	8002170 <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7ff fa54 	bl	8002170 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e053      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d210      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4922      	ldr	r1, [pc, #136]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4916      	ldr	r1, [pc, #88]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490e      	ldr	r1, [pc, #56]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 f821 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4601      	mov	r1, r0
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6c:	5cd3      	ldrb	r3, [r2, r3]
 8002d6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002d72:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1cc>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x1d0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f9b6 	bl	80020ec <HAL_InitTick>

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	08009714 	.word	0x08009714
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000004 	.word	0x20000004

08002da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da0:	b490      	push	{r4, r7}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002da6:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002da8:	1d3c      	adds	r4, r7, #4
 8002daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d002      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x40>
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x46>
 8002dde:	e02d      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002de2:	623b      	str	r3, [r7, #32]
      break;
 8002de4:	e02d      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	0c9b      	lsrs	r3, r3, #18
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002df2:	4413      	add	r3, r2
 8002df4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002df8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0c5b      	lsrs	r3, r3, #17
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e12:	4413      	add	r3, r2
 8002e14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	4a0f      	ldr	r2, [pc, #60]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e1e:	fb02 f203 	mul.w	r2, r2, r3
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	e004      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e30:	fb02 f303 	mul.w	r3, r2, r3
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	623b      	str	r3, [r7, #32]
      break;
 8002e3a:	e002      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e3e:	623b      	str	r3, [r7, #32]
      break;
 8002e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e42:	6a3b      	ldr	r3, [r7, #32]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3728      	adds	r7, #40	; 0x28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc90      	pop	{r4, r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	080096f8 	.word	0x080096f8
 8002e54:	08009708 	.word	0x08009708
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	007a1200 	.word	0x007a1200
 8002e60:	003d0900 	.word	0x003d0900

08002e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b02      	ldr	r3, [pc, #8]	; (8002e74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	20000000 	.word	0x20000000

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e7c:	f7ff fff2 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002e80:	4601      	mov	r1, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e8e:	5cd3      	ldrb	r3, [r2, r3]
 8002e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	08009724 	.word	0x08009724

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4601      	mov	r1, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	0adb      	lsrs	r3, r3, #11
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4a03      	ldr	r2, [pc, #12]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08009724 	.word	0x08009724

08002ec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <RCC_Delay+0x34>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <RCC_Delay+0x38>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0a5b      	lsrs	r3, r3, #9
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ee4:	bf00      	nop
  }
  while (Delay --);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	60fa      	str	r2, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f9      	bne.n	8002ee4 <RCC_Delay+0x1c>
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000000 	.word	0x20000000
 8002f00:	10624dd3 	.word	0x10624dd3

08002f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	2300      	movs	r3, #0
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d07d      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f20:	2300      	movs	r3, #0
 8002f22:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f24:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10d      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b44      	ldr	r3, [pc, #272]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4a43      	ldr	r2, [pc, #268]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	61d3      	str	r3, [r2, #28]
 8002f3c:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	4b3e      	ldr	r3, [pc, #248]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d118      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f58:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a3a      	ldr	r2, [pc, #232]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f64:	f7ff f904 	bl	8002170 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6a:	e008      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6c:	f7ff f900 	bl	8002170 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e05e      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7e:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02e      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d027      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa8:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fbe:	4a21      	ldr	r2, [pc, #132]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d014      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7ff f8cf 	bl	8002170 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd4:	e00a      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7ff f8cb 	bl	8002170 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e027      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ee      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	490f      	ldr	r1, [pc, #60]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003006:	4313      	orrs	r3, r2
 8003008:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4903      	ldr	r1, [pc, #12]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
 800304c:	42420440 	.word	0x42420440

08003050 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d002      	beq.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8003066:	2b02      	cmp	r3, #2
 8003068:	d033      	beq.n	80030d2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800306a:	e041      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      temp_reg = RCC->BDCR;
 800306c:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	60bb      	str	r3, [r7, #8]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307c:	d108      	bne.n	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
        frequency = LSE_VALUE;
 8003088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	e01f      	b.n	80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800309a:	d109      	bne.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = LSI_VALUE;
 80030a8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e00f      	b.n	80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ba:	d118      	bne.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d012      	beq.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        frequency = HSE_VALUE / 128U;
 80030c8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80030cc:	60fb      	str	r3, [r7, #12]
      break;
 80030ce:	e00e      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80030d0:	e00d      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030d2:	f7ff fee5 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	0b9b      	lsrs	r3, r3, #14
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	3301      	adds	r3, #1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	60fb      	str	r3, [r7, #12]
      break;
 80030ec:	e000      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      break;
 80030ee:	bf00      	nop
    }
  }
  return (frequency);
 80030f0:	68fb      	ldr	r3, [r7, #12]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000

08003100 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e084      	b.n	8003220 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7c5b      	ldrb	r3, [r3, #17]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe fb3a 	bl	80017a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9c8 	bl	80034c8 <HAL_RTC_WaitForSynchro>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2204      	movs	r2, #4
 8003142:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e06b      	b.n	8003220 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fa81 	bl	8003650 <RTC_EnterInitMode>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d004      	beq.n	800315e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2204      	movs	r2, #4
 8003158:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e060      	b.n	8003220 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0207 	bic.w	r2, r2, #7
 800316c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003176:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <HAL_RTC_Init+0x128>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a2b      	ldr	r2, [pc, #172]	; (8003228 <HAL_RTC_Init+0x128>)
 800317c:	f023 0301 	bic.w	r3, r3, #1
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RTC_Init+0x128>)
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4926      	ldr	r1, [pc, #152]	; (8003228 <HAL_RTC_Init+0x128>)
 8003190:	4313      	orrs	r3, r2
 8003192:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d003      	beq.n	80031a6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e00e      	b.n	80031c4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7ff ff52 	bl	8003050 <HAL_RCCEx_GetPeriphCLKFreq>
 80031ac:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2204      	movs	r2, #4
 80031b8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e030      	b.n	8003220 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f023 010f 	bic.w	r1, r3, #15
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	0c1a      	lsrs	r2, r3, #16
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	041b      	lsls	r3, r3, #16
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	b291      	uxth	r1, r2
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fa55 	bl	80036a0 <RTC_ExitInitMode>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d004      	beq.n	8003206 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2204      	movs	r2, #4
 8003200:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e00c      	b.n	8003220 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800321e:	2300      	movs	r3, #0
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40006c00 	.word	0x40006c00

0800322c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	2300      	movs	r3, #0
 800323e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_RTC_SetTime+0x20>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e080      	b.n	8003352 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	7c1b      	ldrb	r3, [r3, #16]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_RTC_SetTime+0x30>
 8003258:	2302      	movs	r3, #2
 800325a:	e07a      	b.n	8003352 <HAL_RTC_SetTime+0x126>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2202      	movs	r2, #2
 8003266:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d113      	bne.n	8003296 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003278:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	785b      	ldrb	r3, [r3, #1]
 8003280:	4619      	mov	r1, r3
 8003282:	460b      	mov	r3, r1
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a5b      	subs	r3, r3, r1
 8003288:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800328a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003290:	4413      	add	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e01e      	b.n	80032d4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fa28 	bl	80036f0 <RTC_Bcd2ToByte>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80032a8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fa1d 	bl	80036f0 <RTC_Bcd2ToByte>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80032c2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	789b      	ldrb	r3, [r3, #2]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fa11 	bl	80036f0 <RTC_Bcd2ToByte>
 80032ce:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80032d0:	4423      	add	r3, r4
 80032d2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80032d4:	6979      	ldr	r1, [r7, #20]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f953 	bl	8003582 <RTC_WriteTimeCounter>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2204      	movs	r2, #4
 80032e6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e02f      	b.n	8003352 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0205 	bic.w	r2, r2, #5
 8003300:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f964 	bl	80035d0 <RTC_ReadAlarmCounter>
 8003308:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d018      	beq.n	8003344 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	429a      	cmp	r2, r3
 8003318:	d214      	bcs.n	8003344 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003320:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003324:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003326:	6939      	ldr	r1, [r7, #16]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f96a 	bl	8003602 <RTC_WriteAlarmCounter>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2204      	movs	r2, #4
 8003338:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e006      	b.n	8003352 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2201      	movs	r2, #1
 8003348:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	bd90      	pop	{r4, r7, pc}
	...

0800335c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <HAL_RTC_SetDate+0x24>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e097      	b.n	80034b4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	7c1b      	ldrb	r3, [r3, #16]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_RTC_SetDate+0x34>
 800338c:	2302      	movs	r3, #2
 800338e:	e091      	b.n	80034b4 <HAL_RTC_SetDate+0x158>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2202      	movs	r2, #2
 800339a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10c      	bne.n	80033bc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	78da      	ldrb	r2, [r3, #3]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	785a      	ldrb	r2, [r3, #1]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	789a      	ldrb	r2, [r3, #2]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	739a      	strb	r2, [r3, #14]
 80033ba:	e01a      	b.n	80033f2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	78db      	ldrb	r3, [r3, #3]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f995 	bl	80036f0 <RTC_Bcd2ToByte>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	785b      	ldrb	r3, [r3, #1]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f98c 	bl	80036f0 <RTC_Bcd2ToByte>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	789b      	ldrb	r3, [r3, #2]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f983 	bl	80036f0 <RTC_Bcd2ToByte>
 80033ea:	4603      	mov	r3, r0
 80033ec:	461a      	mov	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	7bdb      	ldrb	r3, [r3, #15]
 80033f6:	4618      	mov	r0, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	7b59      	ldrb	r1, [r3, #13]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	7b9b      	ldrb	r3, [r3, #14]
 8003400:	461a      	mov	r2, r3
 8003402:	f000 f993 	bl	800372c <RTC_WeekDayNum>
 8003406:	4603      	mov	r3, r0
 8003408:	461a      	mov	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	7b1a      	ldrb	r2, [r3, #12]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f883 	bl	8003522 <RTC_ReadTimeCounter>
 800341c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4a26      	ldr	r2, [pc, #152]	; (80034bc <HAL_RTC_SetDate+0x160>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0adb      	lsrs	r3, r3, #11
 8003428:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b18      	cmp	r3, #24
 800342e:	d93a      	bls.n	80034a6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_RTC_SetDate+0x164>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_RTC_SetDate+0x168>)
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003446:	69f9      	ldr	r1, [r7, #28]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f89a 	bl	8003582 <RTC_WriteTimeCounter>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2204      	movs	r2, #4
 8003458:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e027      	b.n	80034b4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f8b3 	bl	80035d0 <RTC_ReadAlarmCounter>
 800346a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d018      	beq.n	80034a6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	429a      	cmp	r2, r3
 800347a:	d214      	bcs.n	80034a6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003482:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003486:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003488:	69b9      	ldr	r1, [r7, #24]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f8b9 	bl	8003602 <RTC_WriteAlarmCounter>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2204      	movs	r2, #4
 800349a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e006      	b.n	80034b4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	91a2b3c5 	.word	0x91a2b3c5
 80034c0:	aaaaaaab 	.word	0xaaaaaaab
 80034c4:	00015180 	.word	0x00015180

080034c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e01d      	b.n	800351a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0208 	bic.w	r2, r2, #8
 80034ec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80034ee:	f7fe fe3f 	bl	8002170 <HAL_GetTick>
 80034f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80034f4:	e009      	b.n	800350a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80034f6:	f7fe fe3b 	bl	8002170 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003504:	d901      	bls.n	800350a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e007      	b.n	800351a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ee      	beq.n	80034f6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003522:	b480      	push	{r7}
 8003524:	b087      	sub	sp, #28
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	827b      	strh	r3, [r7, #18]
 800352e:	2300      	movs	r3, #0
 8003530:	823b      	strh	r3, [r7, #16]
 8003532:	2300      	movs	r3, #0
 8003534:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003552:	8a7a      	ldrh	r2, [r7, #18]
 8003554:	8a3b      	ldrh	r3, [r7, #16]
 8003556:	429a      	cmp	r2, r3
 8003558:	d008      	beq.n	800356c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800355a:	8a3b      	ldrh	r3, [r7, #16]
 800355c:	041a      	lsls	r2, r3, #16
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	b29b      	uxth	r3, r3
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e004      	b.n	8003576 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800356c:	8a7b      	ldrh	r3, [r7, #18]
 800356e:	041a      	lsls	r2, r3, #16
 8003570:	89fb      	ldrh	r3, [r7, #14]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003576:	697b      	ldr	r3, [r7, #20]
}
 8003578:	4618      	mov	r0, r3
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f85d 	bl	8003650 <RTC_EnterInitMode>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
 80035a0:	e011      	b.n	80035c6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	0c12      	lsrs	r2, r2, #16
 80035aa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	b292      	uxth	r2, r2
 80035b4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f872 	bl	80036a0 <RTC_ExitInitMode>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	81fb      	strh	r3, [r7, #14]
 80035dc:	2300      	movs	r3, #0
 80035de:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80035f0:	89fb      	ldrh	r3, [r7, #14]
 80035f2:	041a      	lsls	r2, r3, #16
 80035f4:	89bb      	ldrh	r3, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr

08003602 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f81d 	bl	8003650 <RTC_EnterInitMode>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e011      	b.n	8003646 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	0c12      	lsrs	r2, r2, #16
 800362a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	b292      	uxth	r2, r2
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f832 	bl	80036a0 <RTC_ExitInitMode>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003646:	7bfb      	ldrb	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800365c:	f7fe fd88 	bl	8002170 <HAL_GetTick>
 8003660:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003662:	e009      	b.n	8003678 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003664:	f7fe fd84 	bl	8002170 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003672:	d901      	bls.n	8003678 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e00f      	b.n	8003698 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0ee      	beq.n	8003664 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0210 	orr.w	r2, r2, #16
 8003694:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0210 	bic.w	r2, r2, #16
 80036ba:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80036bc:	f7fe fd58 	bl	8002170 <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80036c2:	e009      	b.n	80036d8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80036c4:	f7fe fd54 	bl	8002170 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036d2:	d901      	bls.n	80036d8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e007      	b.n	80036e8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ee      	beq.n	80036c4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4413      	add	r3, r2
 800371e:	b2db      	uxtb	r3, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr
	...

0800372c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
 8003738:	4613      	mov	r3, r2
 800373a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800374a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d82d      	bhi.n	80037ae <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <RTC_WeekDayNum+0xe4>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	085a      	lsrs	r2, r3, #1
 8003766:	78bb      	ldrb	r3, [r7, #2]
 8003768:	441a      	add	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	441a      	add	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3b01      	subs	r3, #1
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	3b01      	subs	r3, #1
 800377a:	4926      	ldr	r1, [pc, #152]	; (8003814 <RTC_WeekDayNum+0xe8>)
 800377c:	fba1 1303 	umull	r1, r3, r1, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	1ad2      	subs	r2, r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	3b01      	subs	r3, #1
 8003788:	4922      	ldr	r1, [pc, #136]	; (8003814 <RTC_WeekDayNum+0xe8>)
 800378a:	fba1 1303 	umull	r1, r3, r1, r3
 800378e:	09db      	lsrs	r3, r3, #7
 8003790:	4413      	add	r3, r2
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	4b20      	ldr	r3, [pc, #128]	; (8003818 <RTC_WeekDayNum+0xec>)
 8003796:	fba3 1302 	umull	r1, r3, r3, r2
 800379a:	1ad1      	subs	r1, r2, r3
 800379c:	0849      	lsrs	r1, r1, #1
 800379e:	440b      	add	r3, r1
 80037a0:	0899      	lsrs	r1, r3, #2
 80037a2:	460b      	mov	r3, r1
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	1a5b      	subs	r3, r3, r1
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e029      	b.n	8003802 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <RTC_WeekDayNum+0xe4>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	085a      	lsrs	r2, r3, #1
 80037c2:	78bb      	ldrb	r3, [r7, #2]
 80037c4:	441a      	add	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	441a      	add	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	441a      	add	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4910      	ldr	r1, [pc, #64]	; (8003814 <RTC_WeekDayNum+0xe8>)
 80037d4:	fba1 1303 	umull	r1, r3, r1, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	490d      	ldr	r1, [pc, #52]	; (8003814 <RTC_WeekDayNum+0xe8>)
 80037e0:	fba1 1303 	umull	r1, r3, r1, r3
 80037e4:	09db      	lsrs	r3, r3, #7
 80037e6:	4413      	add	r3, r2
 80037e8:	1c9a      	adds	r2, r3, #2
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <RTC_WeekDayNum+0xec>)
 80037ec:	fba3 1302 	umull	r1, r3, r3, r2
 80037f0:	1ad1      	subs	r1, r2, r3
 80037f2:	0849      	lsrs	r1, r1, #1
 80037f4:	440b      	add	r3, r1
 80037f6:	0899      	lsrs	r1, r3, #2
 80037f8:	460b      	mov	r3, r1
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	1a5b      	subs	r3, r3, r1
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	b2db      	uxtb	r3, r3
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	38e38e39 	.word	0x38e38e39
 8003814:	51eb851f 	.word	0x51eb851f
 8003818:	24924925 	.word	0x24924925

0800381c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e01d      	b.n	800386a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd ffd0 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 fb5a 	bl	8003f14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b085      	sub	sp, #20
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b06      	cmp	r3, #6
 800389a:	d007      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e01d      	b.n	8003906 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f815 	bl	800390e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f000 fb0c 	bl	8003f14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2201      	movs	r2, #1
 8003930:	6839      	ldr	r1, [r7, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fcc9 	bl	80042ca <TIM_CCxChannelCmd>
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d007      	beq.n	800395a <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fca7 	bl	80042ca <TIM_CCxChannelCmd>
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6a1a      	ldr	r2, [r3, #32]
 8003982:	f241 1311 	movw	r3, #4369	; 0x1111
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <HAL_TIM_PWM_Stop+0x48>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a1a      	ldr	r2, [r3, #32]
 8003992:	f240 4344 	movw	r3, #1092	; 0x444
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d107      	bne.n	80039ac <HAL_TIM_PWM_Stop+0x48>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d122      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d11b      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f06f 0202 	mvn.w	r2, #2
 80039ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fa6b 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003a06:	e005      	b.n	8003a14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fa5e 	bl	8003eca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fa6d 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d122      	bne.n	8003a6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d11b      	bne.n	8003a6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f06f 0204 	mvn.w	r2, #4
 8003a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fa41 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003a5a:	e005      	b.n	8003a68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fa34 	bl	8003eca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fa43 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d122      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d11b      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f06f 0208 	mvn.w	r2, #8
 8003a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa17 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003aae:	e005      	b.n	8003abc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fa0a 	bl	8003eca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fa19 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d122      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d11b      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0210 	mvn.w	r2, #16
 8003ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2208      	movs	r2, #8
 8003aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f9ed 	bl	8003edc <HAL_TIM_IC_CaptureCallback>
 8003b02:	e005      	b.n	8003b10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f9e0 	bl	8003eca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f9ef 	bl	8003eee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d10e      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f06f 0201 	mvn.w	r2, #1
 8003b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fd fc37 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b80      	cmp	r3, #128	; 0x80
 8003b4e:	d10e      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b80      	cmp	r3, #128	; 0x80
 8003b5c:	d107      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fc1f 	bl	80043ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d10e      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b40      	cmp	r3, #64	; 0x40
 8003b88:	d107      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f9b3 	bl	8003f00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d10e      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0220 	mvn.w	r2, #32
 8003bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fbea 	bl	800439a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e0b4      	b.n	8003d54 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	f200 809f 	bhi.w	8003d40 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003c02:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c3d 	.word	0x08003c3d
 8003c0c:	08003d41 	.word	0x08003d41
 8003c10:	08003d41 	.word	0x08003d41
 8003c14:	08003d41 	.word	0x08003d41
 8003c18:	08003c7d 	.word	0x08003c7d
 8003c1c:	08003d41 	.word	0x08003d41
 8003c20:	08003d41 	.word	0x08003d41
 8003c24:	08003d41 	.word	0x08003d41
 8003c28:	08003cbf 	.word	0x08003cbf
 8003c2c:	08003d41 	.word	0x08003d41
 8003c30:	08003d41 	.word	0x08003d41
 8003c34:	08003d41 	.word	0x08003d41
 8003c38:	08003cff 	.word	0x08003cff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68b9      	ldr	r1, [r7, #8]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f9b6 	bl	8003fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0208 	orr.w	r2, r2, #8
 8003c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699a      	ldr	r2, [r3, #24]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0204 	bic.w	r2, r2, #4
 8003c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6999      	ldr	r1, [r3, #24]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	619a      	str	r2, [r3, #24]
      break;
 8003c7a:	e062      	b.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f9d2 	bl	800402c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6999      	ldr	r1, [r3, #24]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	021a      	lsls	r2, r3, #8
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	619a      	str	r2, [r3, #24]
      break;
 8003cbc:	e041      	b.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 f9ef 	bl	80040a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0208 	orr.w	r2, r2, #8
 8003cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0204 	bic.w	r2, r2, #4
 8003ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69d9      	ldr	r1, [r3, #28]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	61da      	str	r2, [r3, #28]
      break;
 8003cfc:	e021      	b.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fa0c 	bl	8004122 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	021a      	lsls	r2, r3, #8
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	61da      	str	r2, [r3, #28]
      break;
 8003d3e:	e000      	b.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d40:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_TIM_ConfigClockSource+0x18>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e0a6      	b.n	8003ec2 <HAL_TIM_ConfigClockSource+0x166>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d067      	beq.n	8003e7c <HAL_TIM_ConfigClockSource+0x120>
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d80b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x6c>
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d073      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x140>
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d802      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x62>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d06f      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003dbc:	e078      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d06c      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x140>
 8003dc2:	2b30      	cmp	r3, #48	; 0x30
 8003dc4:	d06a      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dc6:	e073      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc8:	2b70      	cmp	r3, #112	; 0x70
 8003dca:	d00d      	beq.n	8003de8 <HAL_TIM_ConfigClockSource+0x8c>
 8003dcc:	2b70      	cmp	r3, #112	; 0x70
 8003dce:	d804      	bhi.n	8003dda <HAL_TIM_ConfigClockSource+0x7e>
 8003dd0:	2b50      	cmp	r3, #80	; 0x50
 8003dd2:	d033      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0xe0>
 8003dd4:	2b60      	cmp	r3, #96	; 0x60
 8003dd6:	d041      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dd8:	e06a      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dde:	d066      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x152>
 8003de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de4:	d017      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003de6:	e063      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6899      	ldr	r1, [r3, #8]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f000 fa48 	bl	800428c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	609a      	str	r2, [r3, #8]
      break;
 8003e14:	e04c      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6899      	ldr	r1, [r3, #8]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f000 fa31 	bl	800428c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e38:	609a      	str	r2, [r3, #8]
      break;
 8003e3a:	e039      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f000 f9a8 	bl	800419e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2150      	movs	r1, #80	; 0x50
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f9ff 	bl	8004258 <TIM_ITRx_SetConfig>
      break;
 8003e5a:	e029      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6859      	ldr	r1, [r3, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f000 f9c6 	bl	80041fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2160      	movs	r1, #96	; 0x60
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 f9ef 	bl	8004258 <TIM_ITRx_SetConfig>
      break;
 8003e7a:	e019      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f000 f988 	bl	800419e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2140      	movs	r1, #64	; 0x40
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f9df 	bl	8004258 <TIM_ITRx_SetConfig>
      break;
 8003e9a:	e009      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f000 f9d6 	bl	8004258 <TIM_ITRx_SetConfig>
      break;
 8003eac:	e000      	b.n	8003eb0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr
	...

08003f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2a:	d007      	beq.n	8003f3c <TIM_Base_SetConfig+0x28>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a1f      	ldr	r2, [pc, #124]	; (8003fac <TIM_Base_SetConfig+0x98>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0x28>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <TIM_Base_SetConfig+0x9c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d108      	bne.n	8003f4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f54:	d007      	beq.n	8003f66 <TIM_Base_SetConfig+0x52>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a14      	ldr	r2, [pc, #80]	; (8003fac <TIM_Base_SetConfig+0x98>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_Base_SetConfig+0x52>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <TIM_Base_SetConfig+0x9c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d108      	bne.n	8003f78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	615a      	str	r2, [r3, #20]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40000800 	.word	0x40000800

08003fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0201 	bic.w	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 0302 	bic.w	r3, r3, #2
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr

0800402c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0210 	bic.w	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004062:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0320 	bic.w	r3, r3, #32
 8004076:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	621a      	str	r2, [r3, #32]
}
 8004118:	bf00      	nop
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004122:	b480      	push	{r7}
 8004124:	b087      	sub	sp, #28
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004150:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004158:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800416c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	031b      	lsls	r3, r3, #12
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	621a      	str	r2, [r3, #32]
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr

0800419e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800419e:	b480      	push	{r7}
 80041a0:	b087      	sub	sp, #28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f023 0201 	bic.w	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 030a 	bic.w	r3, r3, #10
 80041da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	621a      	str	r2, [r3, #32]
}
 80041f0:	bf00      	nop
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b087      	sub	sp, #28
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0210 	bic.w	r2, r3, #16
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004236:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	f043 0307 	orr.w	r3, r3, #7
 800427a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	609a      	str	r2, [r3, #8]
}
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr

080042ca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b087      	sub	sp, #28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2201      	movs	r2, #1
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	401a      	ands	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1a      	ldr	r2, [r3, #32]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004302:	431a      	orrs	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	621a      	str	r2, [r3, #32]
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	bc80      	pop	{r7}
 8004310:	4770      	bx	lr

08004312 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004326:	2302      	movs	r3, #2
 8004328:	e032      	b.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004350:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004362:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	4313      	orrs	r3, r2
 800436c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e03f      	b.n	8004450 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d106      	bne.n	80043ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fd fa69 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2224      	movs	r2, #36	; 0x24
 80043ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004400:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f90c 	bl	8004620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004416:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004426:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004436:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b20      	cmp	r3, #32
 8004476:	f040 8083 	bne.w	8004580 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_UART_Transmit+0x2e>
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e07b      	b.n	8004582 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_UART_Transmit+0x40>
 8004494:	2302      	movs	r3, #2
 8004496:	e074      	b.n	8004582 <HAL_UART_Transmit+0x12a>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2221      	movs	r2, #33	; 0x21
 80044aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80044ae:	f7fd fe5f 	bl	8002170 <HAL_GetTick>
 80044b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	88fa      	ldrh	r2, [r7, #6]
 80044b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044c0:	e042      	b.n	8004548 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d8:	d122      	bne.n	8004520 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f850 	bl	800458a <UART_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e046      	b.n	8004582 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004506:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	3302      	adds	r3, #2
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	e017      	b.n	8004548 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	3301      	adds	r3, #1
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	e013      	b.n	8004548 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2200      	movs	r2, #0
 8004528:	2180      	movs	r1, #128	; 0x80
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f82d 	bl	800458a <UART_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e023      	b.n	8004582 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	60ba      	str	r2, [r7, #8]
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1b7      	bne.n	80044c2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2200      	movs	r2, #0
 800455a:	2140      	movs	r1, #64	; 0x40
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f814 	bl	800458a <UART_WaitOnFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e00a      	b.n	8004582 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	4613      	mov	r3, r2
 8004598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459a:	e02c      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a2:	d028      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0x30>
 80045aa:	f7fd fde1 	bl	8002170 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d21d      	bcs.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e00f      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4013      	ands	r3, r2
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	bf0c      	ite	eq
 8004606:	2301      	moveq	r3, #1
 8004608:	2300      	movne	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	429a      	cmp	r2, r3
 8004612:	d0c3      	beq.n	800459c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800465a:	f023 030c 	bic.w	r3, r3, #12
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	68f9      	ldr	r1, [r7, #12]
 8004664:	430b      	orrs	r3, r1
 8004666:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a52      	ldr	r2, [pc, #328]	; (80047cc <UART_SetConfig+0x1ac>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d14e      	bne.n	8004726 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004688:	f7fe fc0a 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 800468c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009a      	lsls	r2, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <UART_SetConfig+0x1b0>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	0119      	lsls	r1, r3, #4
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009a      	lsls	r2, r3, #2
 80046b8:	441a      	add	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c4:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <UART_SetConfig+0x1b0>)
 80046c6:	fba3 0302 	umull	r0, r3, r3, r2
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2064      	movs	r0, #100	; 0x64
 80046ce:	fb00 f303 	mul.w	r3, r0, r3
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	3332      	adds	r3, #50	; 0x32
 80046d8:	4a3d      	ldr	r2, [pc, #244]	; (80047d0 <UART_SetConfig+0x1b0>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e4:	4419      	add	r1, r3
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	009a      	lsls	r2, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046fc:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <UART_SetConfig+0x1b0>)
 80046fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	2064      	movs	r0, #100	; 0x64
 8004706:	fb00 f303 	mul.w	r3, r0, r3
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	3332      	adds	r3, #50	; 0x32
 8004710:	4a2f      	ldr	r2, [pc, #188]	; (80047d0 <UART_SetConfig+0x1b0>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	f003 020f 	and.w	r2, r3, #15
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	440a      	add	r2, r1
 8004722:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004724:	e04d      	b.n	80047c2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004726:	f7fe fba7 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 800472a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	009a      	lsls	r2, r3, #2
 8004736:	441a      	add	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	4a23      	ldr	r2, [pc, #140]	; (80047d0 <UART_SetConfig+0x1b0>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	0119      	lsls	r1, r3, #4
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	009a      	lsls	r2, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <UART_SetConfig+0x1b0>)
 8004764:	fba3 0302 	umull	r0, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2064      	movs	r0, #100	; 0x64
 800476c:	fb00 f303 	mul.w	r3, r0, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <UART_SetConfig+0x1b0>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004782:	4419      	add	r1, r3
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	009a      	lsls	r2, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	fbb2 f2f3 	udiv	r2, r2, r3
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <UART_SetConfig+0x1b0>)
 800479c:	fba3 0302 	umull	r0, r3, r3, r2
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	2064      	movs	r0, #100	; 0x64
 80047a4:	fb00 f303 	mul.w	r3, r0, r3
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	3332      	adds	r3, #50	; 0x32
 80047ae:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <UART_SetConfig+0x1b0>)
 80047b0:	fba2 2303 	umull	r2, r3, r2, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	f003 020f 	and.w	r2, r3, #15
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	440a      	add	r2, r1
 80047c0:	609a      	str	r2, [r3, #8]
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40013800 	.word	0x40013800
 80047d0:	51eb851f 	.word	0x51eb851f

080047d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80047e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047e6:	2b84      	cmp	r3, #132	; 0x84
 80047e8:	d005      	beq.n	80047f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80047ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	3303      	adds	r3, #3
 80047f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80047f6:	68fb      	ldr	r3, [r7, #12]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr

08004802 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004806:	f000 facd 	bl	8004da4 <vTaskStartScheduler>
  
  return osOK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	bd80      	pop	{r7, pc}

08004810 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af04      	add	r7, sp, #16
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d020      	beq.n	8004864 <osThreadCreate+0x54>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01c      	beq.n	8004864 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685c      	ldr	r4, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681d      	ldr	r5, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691e      	ldr	r6, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ffc9 	bl	80047d4 <makeFreeRtosPriority>
 8004842:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800484c:	9202      	str	r2, [sp, #8]
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	9100      	str	r1, [sp, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	4632      	mov	r2, r6
 8004856:	4629      	mov	r1, r5
 8004858:	4620      	mov	r0, r4
 800485a:	f000 f8e8 	bl	8004a2e <xTaskCreateStatic>
 800485e:	4603      	mov	r3, r0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	e01c      	b.n	800489e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685c      	ldr	r4, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004870:	b29e      	uxth	r6, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff ffab 	bl	80047d4 <makeFreeRtosPriority>
 800487e:	4602      	mov	r2, r0
 8004880:	f107 030c 	add.w	r3, r7, #12
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	9200      	str	r2, [sp, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4632      	mov	r2, r6
 800488c:	4629      	mov	r1, r5
 800488e:	4620      	mov	r0, r4
 8004890:	f000 f926 	bl	8004ae0 <xTaskCreate>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d001      	beq.n	800489e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800489e:	68fb      	ldr	r3, [r7, #12]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <osDelay+0x16>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	e000      	b.n	80048c0 <osDelay+0x18>
 80048be:	2301      	movs	r3, #1
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fa3b 	bl	8004d3c <vTaskDelay>
  
  return osOK;
 80048c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f103 0208 	add.w	r2, r3, #8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f04f 32ff 	mov.w	r2, #4294967295
 80048e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f103 0208 	add.w	r2, r3, #8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f103 0208 	add.w	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr

0800490e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr

08004926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d103      	bne.n	800498c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e00c      	b.n	80049a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3308      	adds	r3, #8
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	e002      	b.n	800499a <vListInsert+0x2e>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d2f6      	bcs.n	8004994 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
}
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6892      	ldr	r2, [r2, #8]
 80049f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6852      	ldr	r2, [r2, #4]
 80049fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d103      	bne.n	8004a10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	1e5a      	subs	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b08e      	sub	sp, #56	; 0x38
 8004a32:	af04      	add	r7, sp, #16
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	e7fe      	b.n	8004a54 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <xTaskCreateStatic+0x42>
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	e7fe      	b.n	8004a6e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a70:	2354      	movs	r3, #84	; 0x54
 8004a72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b54      	cmp	r3, #84	; 0x54
 8004a78:	d009      	beq.n	8004a8e <xTaskCreateStatic+0x60>
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e7fe      	b.n	8004a8c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01e      	beq.n	8004ad2 <xTaskCreateStatic+0xa4>
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01b      	beq.n	8004ad2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004aac:	2300      	movs	r3, #0
 8004aae:	9303      	str	r3, [sp, #12]
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	9302      	str	r3, [sp, #8]
 8004ab4:	f107 0314 	add.w	r3, r7, #20
 8004ab8:	9301      	str	r3, [sp, #4]
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f850 	bl	8004b6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004acc:	f000 f8cc 	bl	8004c68 <prvAddNewTaskToReadyList>
 8004ad0:	e001      	b.n	8004ad6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ad6:	697b      	ldr	r3, [r7, #20]
	}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08c      	sub	sp, #48	; 0x30
 8004ae4:	af04      	add	r7, sp, #16
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	4613      	mov	r3, r2
 8004aee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fe71 	bl	80057dc <pvPortMalloc>
 8004afa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00e      	beq.n	8004b20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b02:	2054      	movs	r0, #84	; 0x54
 8004b04:	f000 fe6a 	bl	80057dc <pvPortMalloc>
 8004b08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
 8004b16:	e005      	b.n	8004b24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f000 ff21 	bl	8005960 <vPortFree>
 8004b1e:	e001      	b.n	8004b24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d017      	beq.n	8004b5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	2300      	movs	r3, #0
 8004b36:	9303      	str	r3, [sp, #12]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	9302      	str	r3, [sp, #8]
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f80e 	bl	8004b6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b4e:	69f8      	ldr	r0, [r7, #28]
 8004b50:	f000 f88a 	bl	8004c68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b54:	2301      	movs	r3, #1
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	e002      	b.n	8004b60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b60:	69bb      	ldr	r3, [r7, #24]
	}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3720      	adds	r7, #32
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b088      	sub	sp, #32
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
 8004b76:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b82:	3b01      	subs	r3, #1
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	f023 0307 	bic.w	r3, r3, #7
 8004b90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d009      	beq.n	8004bb0 <prvInitialiseNewTask+0x46>
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e7fe      	b.n	8004bae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	e012      	b.n	8004bdc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	7819      	ldrb	r1, [r3, #0]
 8004bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3334      	adds	r3, #52	; 0x34
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d006      	beq.n	8004be4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	61fb      	str	r3, [r7, #28]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	2b0f      	cmp	r3, #15
 8004be0:	d9e9      	bls.n	8004bb6 <prvInitialiseNewTask+0x4c>
 8004be2:	e000      	b.n	8004be6 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004be4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	2b06      	cmp	r3, #6
 8004bf2:	d901      	bls.n	8004bf8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bf4:	2306      	movs	r3, #6
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	2200      	movs	r2, #0
 8004c08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fe7d 	bl	800490e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	3318      	adds	r3, #24
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fe78 	bl	800490e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	f1c3 0207 	rsb	r2, r3, #7
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	68f9      	ldr	r1, [r7, #12]
 8004c46:	69b8      	ldr	r0, [r7, #24]
 8004c48:	f000 fc24 	bl	8005494 <pxPortInitialiseStack>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c5e:	bf00      	nop
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c70:	f000 fcfa 	bl	8005668 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <prvAddNewTaskToReadyList+0xb8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	4a29      	ldr	r2, [pc, #164]	; (8004d20 <prvAddNewTaskToReadyList+0xb8>)
 8004c7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c7e:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <prvAddNewTaskToReadyList+0xbc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c86:	4a27      	ldr	r2, [pc, #156]	; (8004d24 <prvAddNewTaskToReadyList+0xbc>)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c8c:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <prvAddNewTaskToReadyList+0xb8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d110      	bne.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c94:	f000 fabc 	bl	8005210 <prvInitialiseTaskLists>
 8004c98:	e00d      	b.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c9a:	4b23      	ldr	r3, [pc, #140]	; (8004d28 <prvAddNewTaskToReadyList+0xc0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ca2:	4b20      	ldr	r3, [pc, #128]	; (8004d24 <prvAddNewTaskToReadyList+0xbc>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d802      	bhi.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cb0:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <prvAddNewTaskToReadyList+0xbc>)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cb6:	4b1d      	ldr	r3, [pc, #116]	; (8004d2c <prvAddNewTaskToReadyList+0xc4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	; (8004d2c <prvAddNewTaskToReadyList+0xc4>)
 8004cbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	4b19      	ldr	r3, [pc, #100]	; (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4a15      	ldr	r2, [pc, #84]	; (8004d34 <prvAddNewTaskToReadyList+0xcc>)
 8004ce0:	441a      	add	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7ff fe1c 	bl	8004926 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cee:	f000 fce9 	bl	80056c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <prvAddNewTaskToReadyList+0xc0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00e      	beq.n	8004d18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <prvAddNewTaskToReadyList+0xbc>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d207      	bcs.n	8004d18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <prvAddNewTaskToReadyList+0xd0>)
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	200005e4 	.word	0x200005e4
 8004d24:	200004e4 	.word	0x200004e4
 8004d28:	200005f0 	.word	0x200005f0
 8004d2c:	20000600 	.word	0x20000600
 8004d30:	200005ec 	.word	0x200005ec
 8004d34:	200004e8 	.word	0x200004e8
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d016      	beq.n	8004d7c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d4e:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <vTaskDelay+0x60>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <vTaskDelay+0x2e>
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	e7fe      	b.n	8004d68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004d6a:	f000 f879 	bl	8004e60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d6e:	2100      	movs	r1, #0
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fb29 	bl	80053c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d76:	f000 f881 	bl	8004e7c <xTaskResumeAll>
 8004d7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004d82:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <vTaskDelay+0x64>)
 8004d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000060c 	.word	0x2000060c
 8004da0:	e000ed04 	.word	0xe000ed04

08004da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004db2:	463a      	mov	r2, r7
 8004db4:	1d39      	adds	r1, r7, #4
 8004db6:	f107 0308 	add.w	r3, r7, #8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fb ff70 	bl	8000ca0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	9202      	str	r2, [sp, #8]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	460a      	mov	r2, r1
 8004dd2:	491d      	ldr	r1, [pc, #116]	; (8004e48 <vTaskStartScheduler+0xa4>)
 8004dd4:	481d      	ldr	r0, [pc, #116]	; (8004e4c <vTaskStartScheduler+0xa8>)
 8004dd6:	f7ff fe2a 	bl	8004a2e <xTaskCreateStatic>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <vTaskStartScheduler+0xac>)
 8004dde:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004de0:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <vTaskStartScheduler+0xac>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004de8:	2301      	movs	r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e001      	b.n	8004df2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d115      	bne.n	8004e24 <vTaskStartScheduler+0x80>
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <vTaskStartScheduler+0xb0>)
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <vTaskStartScheduler+0xb4>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004e18:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <vTaskStartScheduler+0xb8>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e1e:	f000 fbb3 	bl	8005588 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e22:	e00d      	b.n	8004e40 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d109      	bne.n	8004e40 <vTaskStartScheduler+0x9c>
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	e7fe      	b.n	8004e3e <vTaskStartScheduler+0x9a>
}
 8004e40:	bf00      	nop
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	0800970c 	.word	0x0800970c
 8004e4c:	080051e1 	.word	0x080051e1
 8004e50:	20000608 	.word	0x20000608
 8004e54:	20000604 	.word	0x20000604
 8004e58:	200005f0 	.word	0x200005f0
 8004e5c:	200005e8 	.word	0x200005e8

08004e60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e64:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <vTaskSuspendAll+0x18>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	4a03      	ldr	r2, [pc, #12]	; (8004e78 <vTaskSuspendAll+0x18>)
 8004e6c:	6013      	str	r3, [r2, #0]
}
 8004e6e:	bf00      	nop
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	2000060c 	.word	0x2000060c

08004e7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e8a:	4b41      	ldr	r3, [pc, #260]	; (8004f90 <xTaskResumeAll+0x114>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <xTaskResumeAll+0x2a>
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	e7fe      	b.n	8004ea4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ea6:	f000 fbdf 	bl	8005668 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004eaa:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <xTaskResumeAll+0x114>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	4a37      	ldr	r2, [pc, #220]	; (8004f90 <xTaskResumeAll+0x114>)
 8004eb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb4:	4b36      	ldr	r3, [pc, #216]	; (8004f90 <xTaskResumeAll+0x114>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d161      	bne.n	8004f80 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ebc:	4b35      	ldr	r3, [pc, #212]	; (8004f94 <xTaskResumeAll+0x118>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d05d      	beq.n	8004f80 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ec4:	e02e      	b.n	8004f24 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004ec6:	4b34      	ldr	r3, [pc, #208]	; (8004f98 <xTaskResumeAll+0x11c>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3318      	adds	r3, #24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff fd82 	bl	80049dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fd7d 	bl	80049dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	4b2c      	ldr	r3, [pc, #176]	; (8004f9c <xTaskResumeAll+0x120>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	4a2a      	ldr	r2, [pc, #168]	; (8004f9c <xTaskResumeAll+0x120>)
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4a27      	ldr	r2, [pc, #156]	; (8004fa0 <xTaskResumeAll+0x124>)
 8004f02:	441a      	add	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7ff fd0b 	bl	8004926 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <xTaskResumeAll+0x128>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004f1e:	4b22      	ldr	r3, [pc, #136]	; (8004fa8 <xTaskResumeAll+0x12c>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f24:	4b1c      	ldr	r3, [pc, #112]	; (8004f98 <xTaskResumeAll+0x11c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1cc      	bne.n	8004ec6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f32:	f000 fa07 	bl	8005344 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f36:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <xTaskResumeAll+0x130>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d010      	beq.n	8004f64 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f42:	f000 f837 	bl	8004fb4 <xTaskIncrementTick>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004f4c:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <xTaskResumeAll+0x12c>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f1      	bne.n	8004f42 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <xTaskResumeAll+0x130>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f64:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <xTaskResumeAll+0x12c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f70:	4b0f      	ldr	r3, [pc, #60]	; (8004fb0 <xTaskResumeAll+0x134>)
 8004f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f80:	f000 fba0 	bl	80056c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004f84:	68bb      	ldr	r3, [r7, #8]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000060c 	.word	0x2000060c
 8004f94:	200005e4 	.word	0x200005e4
 8004f98:	200005a4 	.word	0x200005a4
 8004f9c:	200005ec 	.word	0x200005ec
 8004fa0:	200004e8 	.word	0x200004e8
 8004fa4:	200004e4 	.word	0x200004e4
 8004fa8:	200005f8 	.word	0x200005f8
 8004fac:	200005f4 	.word	0x200005f4
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fbe:	4b50      	ldr	r3, [pc, #320]	; (8005100 <xTaskIncrementTick+0x14c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f040 808c 	bne.w	80050e0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fc8:	4b4e      	ldr	r3, [pc, #312]	; (8005104 <xTaskIncrementTick+0x150>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fd0:	4a4c      	ldr	r2, [pc, #304]	; (8005104 <xTaskIncrementTick+0x150>)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d11f      	bne.n	800501c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fdc:	4b4a      	ldr	r3, [pc, #296]	; (8005108 <xTaskIncrementTick+0x154>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <xTaskIncrementTick+0x46>
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	e7fe      	b.n	8004ff8 <xTaskIncrementTick+0x44>
 8004ffa:	4b43      	ldr	r3, [pc, #268]	; (8005108 <xTaskIncrementTick+0x154>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	4b42      	ldr	r3, [pc, #264]	; (800510c <xTaskIncrementTick+0x158>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a40      	ldr	r2, [pc, #256]	; (8005108 <xTaskIncrementTick+0x154>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	4a40      	ldr	r2, [pc, #256]	; (800510c <xTaskIncrementTick+0x158>)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	4b40      	ldr	r3, [pc, #256]	; (8005110 <xTaskIncrementTick+0x15c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3301      	adds	r3, #1
 8005014:	4a3e      	ldr	r2, [pc, #248]	; (8005110 <xTaskIncrementTick+0x15c>)
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	f000 f994 	bl	8005344 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800501c:	4b3d      	ldr	r3, [pc, #244]	; (8005114 <xTaskIncrementTick+0x160>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	429a      	cmp	r2, r3
 8005024:	d34d      	bcc.n	80050c2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005026:	4b38      	ldr	r3, [pc, #224]	; (8005108 <xTaskIncrementTick+0x154>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <xTaskIncrementTick+0x80>
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <xTaskIncrementTick+0x82>
 8005034:	2300      	movs	r3, #0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800503a:	4b36      	ldr	r3, [pc, #216]	; (8005114 <xTaskIncrementTick+0x160>)
 800503c:	f04f 32ff 	mov.w	r2, #4294967295
 8005040:	601a      	str	r2, [r3, #0]
					break;
 8005042:	e03e      	b.n	80050c2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005044:	4b30      	ldr	r3, [pc, #192]	; (8005108 <xTaskIncrementTick+0x154>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d203      	bcs.n	8005064 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800505c:	4a2d      	ldr	r2, [pc, #180]	; (8005114 <xTaskIncrementTick+0x160>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6013      	str	r3, [r2, #0]
						break;
 8005062:	e02e      	b.n	80050c2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	3304      	adds	r3, #4
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fcb7 	bl	80049dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	3318      	adds	r3, #24
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fcae 	bl	80049dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	2201      	movs	r2, #1
 8005086:	409a      	lsls	r2, r3
 8005088:	4b23      	ldr	r3, [pc, #140]	; (8005118 <xTaskIncrementTick+0x164>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4313      	orrs	r3, r2
 800508e:	4a22      	ldr	r2, [pc, #136]	; (8005118 <xTaskIncrementTick+0x164>)
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4a1f      	ldr	r2, [pc, #124]	; (800511c <xTaskIncrementTick+0x168>)
 80050a0:	441a      	add	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	3304      	adds	r3, #4
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7ff fc3c 	bl	8004926 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b2:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <xTaskIncrementTick+0x16c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d3b4      	bcc.n	8005026 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80050bc:	2301      	movs	r3, #1
 80050be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050c0:	e7b1      	b.n	8005026 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050c2:	4b17      	ldr	r3, [pc, #92]	; (8005120 <xTaskIncrementTick+0x16c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c8:	4914      	ldr	r1, [pc, #80]	; (800511c <xTaskIncrementTick+0x168>)
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d907      	bls.n	80050ea <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80050da:	2301      	movs	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e004      	b.n	80050ea <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80050e0:	4b10      	ldr	r3, [pc, #64]	; (8005124 <xTaskIncrementTick+0x170>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	4a0f      	ldr	r2, [pc, #60]	; (8005124 <xTaskIncrementTick+0x170>)
 80050e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <xTaskIncrementTick+0x174>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80050f2:	2301      	movs	r3, #1
 80050f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80050f6:	697b      	ldr	r3, [r7, #20]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	2000060c 	.word	0x2000060c
 8005104:	200005e8 	.word	0x200005e8
 8005108:	2000059c 	.word	0x2000059c
 800510c:	200005a0 	.word	0x200005a0
 8005110:	200005fc 	.word	0x200005fc
 8005114:	20000604 	.word	0x20000604
 8005118:	200005ec 	.word	0x200005ec
 800511c:	200004e8 	.word	0x200004e8
 8005120:	200004e4 	.word	0x200004e4
 8005124:	200005f4 	.word	0x200005f4
 8005128:	200005f8 	.word	0x200005f8

0800512c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005132:	4b26      	ldr	r3, [pc, #152]	; (80051cc <vTaskSwitchContext+0xa0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800513a:	4b25      	ldr	r3, [pc, #148]	; (80051d0 <vTaskSwitchContext+0xa4>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005140:	e03e      	b.n	80051c0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005142:	4b23      	ldr	r3, [pc, #140]	; (80051d0 <vTaskSwitchContext+0xa4>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005148:	4b22      	ldr	r3, [pc, #136]	; (80051d4 <vTaskSwitchContext+0xa8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	fab3 f383 	clz	r3, r3
 8005154:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005156:	7afb      	ldrb	r3, [r7, #11]
 8005158:	f1c3 031f 	rsb	r3, r3, #31
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	491e      	ldr	r1, [pc, #120]	; (80051d8 <vTaskSwitchContext+0xac>)
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d109      	bne.n	8005186 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	607b      	str	r3, [r7, #4]
 8005184:	e7fe      	b.n	8005184 <vTaskSwitchContext+0x58>
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4a11      	ldr	r2, [pc, #68]	; (80051d8 <vTaskSwitchContext+0xac>)
 8005192:	4413      	add	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	3308      	adds	r3, #8
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d104      	bne.n	80051b6 <vTaskSwitchContext+0x8a>
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a07      	ldr	r2, [pc, #28]	; (80051dc <vTaskSwitchContext+0xb0>)
 80051be:	6013      	str	r3, [r2, #0]
}
 80051c0:	bf00      	nop
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	2000060c 	.word	0x2000060c
 80051d0:	200005f8 	.word	0x200005f8
 80051d4:	200005ec 	.word	0x200005ec
 80051d8:	200004e8 	.word	0x200004e8
 80051dc:	200004e4 	.word	0x200004e4

080051e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051e8:	f000 f852 	bl	8005290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <prvIdleTask+0x28>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d9f9      	bls.n	80051e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <prvIdleTask+0x2c>)
 80051f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005204:	e7f0      	b.n	80051e8 <prvIdleTask+0x8>
 8005206:	bf00      	nop
 8005208:	200004e8 	.word	0x200004e8
 800520c:	e000ed04 	.word	0xe000ed04

08005210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005216:	2300      	movs	r3, #0
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	e00c      	b.n	8005236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <prvInitialiseTaskLists+0x60>)
 8005228:	4413      	add	r3, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fb50 	bl	80048d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3301      	adds	r3, #1
 8005234:	607b      	str	r3, [r7, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b06      	cmp	r3, #6
 800523a:	d9ef      	bls.n	800521c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800523c:	480d      	ldr	r0, [pc, #52]	; (8005274 <prvInitialiseTaskLists+0x64>)
 800523e:	f7ff fb47 	bl	80048d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005242:	480d      	ldr	r0, [pc, #52]	; (8005278 <prvInitialiseTaskLists+0x68>)
 8005244:	f7ff fb44 	bl	80048d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005248:	480c      	ldr	r0, [pc, #48]	; (800527c <prvInitialiseTaskLists+0x6c>)
 800524a:	f7ff fb41 	bl	80048d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800524e:	480c      	ldr	r0, [pc, #48]	; (8005280 <prvInitialiseTaskLists+0x70>)
 8005250:	f7ff fb3e 	bl	80048d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005254:	480b      	ldr	r0, [pc, #44]	; (8005284 <prvInitialiseTaskLists+0x74>)
 8005256:	f7ff fb3b 	bl	80048d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <prvInitialiseTaskLists+0x78>)
 800525c:	4a05      	ldr	r2, [pc, #20]	; (8005274 <prvInitialiseTaskLists+0x64>)
 800525e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <prvInitialiseTaskLists+0x7c>)
 8005262:	4a05      	ldr	r2, [pc, #20]	; (8005278 <prvInitialiseTaskLists+0x68>)
 8005264:	601a      	str	r2, [r3, #0]
}
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	200004e8 	.word	0x200004e8
 8005274:	20000574 	.word	0x20000574
 8005278:	20000588 	.word	0x20000588
 800527c:	200005a4 	.word	0x200005a4
 8005280:	200005b8 	.word	0x200005b8
 8005284:	200005d0 	.word	0x200005d0
 8005288:	2000059c 	.word	0x2000059c
 800528c:	200005a0 	.word	0x200005a0

08005290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005296:	e019      	b.n	80052cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005298:	f000 f9e6 	bl	8005668 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800529c:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <prvCheckTasksWaitingTermination+0x4c>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fb97 	bl	80049dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <prvCheckTasksWaitingTermination+0x50>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	4a0a      	ldr	r2, [pc, #40]	; (80052e0 <prvCheckTasksWaitingTermination+0x50>)
 80052b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <prvCheckTasksWaitingTermination+0x54>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3b01      	subs	r3, #1
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <prvCheckTasksWaitingTermination+0x54>)
 80052c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052c2:	f000 f9ff 	bl	80056c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f80e 	bl	80052e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052cc:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <prvCheckTasksWaitingTermination+0x54>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e1      	bne.n	8005298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052d4:	bf00      	nop
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	200005b8 	.word	0x200005b8
 80052e0:	200005e4 	.word	0x200005e4
 80052e4:	200005cc 	.word	0x200005cc

080052e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d108      	bne.n	800530c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fb2e 	bl	8005960 <vPortFree>
				vPortFree( pxTCB );
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fb2b 	bl	8005960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800530a:	e017      	b.n	800533c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005312:	2b01      	cmp	r3, #1
 8005314:	d103      	bne.n	800531e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fb22 	bl	8005960 <vPortFree>
	}
 800531c:	e00e      	b.n	800533c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005324:	2b02      	cmp	r3, #2
 8005326:	d009      	beq.n	800533c <prvDeleteTCB+0x54>
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	e7fe      	b.n	800533a <prvDeleteTCB+0x52>
	}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800534a:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <prvResetNextTaskUnblockTime+0x40>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <prvResetNextTaskUnblockTime+0x14>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <prvResetNextTaskUnblockTime+0x16>
 8005358:	2300      	movs	r3, #0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800535e:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <prvResetNextTaskUnblockTime+0x44>)
 8005360:	f04f 32ff 	mov.w	r2, #4294967295
 8005364:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005366:	e008      	b.n	800537a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <prvResetNextTaskUnblockTime+0x40>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4a04      	ldr	r2, [pc, #16]	; (8005388 <prvResetNextTaskUnblockTime+0x44>)
 8005378:	6013      	str	r3, [r2, #0]
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr
 8005384:	2000059c 	.word	0x2000059c
 8005388:	20000604 	.word	0x20000604

0800538c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <xTaskGetSchedulerState+0x34>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800539a:	2301      	movs	r3, #1
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	e008      	b.n	80053b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a0:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <xTaskGetSchedulerState+0x38>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053a8:	2302      	movs	r3, #2
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	e001      	b.n	80053b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053b2:	687b      	ldr	r3, [r7, #4]
	}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	200005f0 	.word	0x200005f0
 80053c4:	2000060c 	.word	0x2000060c

080053c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053d2:	4b29      	ldr	r3, [pc, #164]	; (8005478 <prvAddCurrentTaskToDelayedList+0xb0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053d8:	4b28      	ldr	r3, [pc, #160]	; (800547c <prvAddCurrentTaskToDelayedList+0xb4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3304      	adds	r3, #4
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fafc 	bl	80049dc <uxListRemove>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80053ea:	4b24      	ldr	r3, [pc, #144]	; (800547c <prvAddCurrentTaskToDelayedList+0xb4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	2201      	movs	r2, #1
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43da      	mvns	r2, r3
 80053f8:	4b21      	ldr	r3, [pc, #132]	; (8005480 <prvAddCurrentTaskToDelayedList+0xb8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4013      	ands	r3, r2
 80053fe:	4a20      	ldr	r2, [pc, #128]	; (8005480 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005400:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d10a      	bne.n	8005420 <prvAddCurrentTaskToDelayedList+0x58>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005410:	4b1a      	ldr	r3, [pc, #104]	; (800547c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3304      	adds	r3, #4
 8005416:	4619      	mov	r1, r3
 8005418:	481a      	ldr	r0, [pc, #104]	; (8005484 <prvAddCurrentTaskToDelayedList+0xbc>)
 800541a:	f7ff fa84 	bl	8004926 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800541e:	e026      	b.n	800546e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4413      	add	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005428:	4b14      	ldr	r3, [pc, #80]	; (800547c <prvAddCurrentTaskToDelayedList+0xb4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	429a      	cmp	r2, r3
 8005436:	d209      	bcs.n	800544c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005438:	4b13      	ldr	r3, [pc, #76]	; (8005488 <prvAddCurrentTaskToDelayedList+0xc0>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <prvAddCurrentTaskToDelayedList+0xb4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3304      	adds	r3, #4
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f7ff fa91 	bl	800496c <vListInsert>
}
 800544a:	e010      	b.n	800546e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <prvAddCurrentTaskToDelayedList+0xc4>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4b0a      	ldr	r3, [pc, #40]	; (800547c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3304      	adds	r3, #4
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f7ff fa87 	bl	800496c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800545e:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	d202      	bcs.n	800546e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005468:	4a09      	ldr	r2, [pc, #36]	; (8005490 <prvAddCurrentTaskToDelayedList+0xc8>)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6013      	str	r3, [r2, #0]
}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200005e8 	.word	0x200005e8
 800547c:	200004e4 	.word	0x200004e4
 8005480:	200005ec 	.word	0x200005ec
 8005484:	200005d0 	.word	0x200005d0
 8005488:	200005a0 	.word	0x200005a0
 800548c:	2000059c 	.word	0x2000059c
 8005490:	20000604 	.word	0x20000604

08005494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3b04      	subs	r3, #4
 80054a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3b04      	subs	r3, #4
 80054b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f023 0201 	bic.w	r2, r3, #1
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3b04      	subs	r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054c4:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <pxPortInitialiseStack+0x54>)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3b14      	subs	r3, #20
 80054ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3b20      	subs	r3, #32
 80054da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054dc:	68fb      	ldr	r3, [r7, #12]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	080054ed 	.word	0x080054ed

080054ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054f6:	4b10      	ldr	r3, [pc, #64]	; (8005538 <prvTaskExitError+0x4c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d009      	beq.n	8005514 <prvTaskExitError+0x28>
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e7fe      	b.n	8005512 <prvTaskExitError+0x26>
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005526:	bf00      	nop
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0fc      	beq.n	8005528 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr
 8005538:	2000000c 	.word	0x2000000c
 800553c:	00000000 	.word	0x00000000

08005540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <pxCurrentTCBConst2>)
 8005542:	6819      	ldr	r1, [r3, #0]
 8005544:	6808      	ldr	r0, [r1, #0]
 8005546:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800554a:	f380 8809 	msr	PSP, r0
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f04f 0000 	mov.w	r0, #0
 8005556:	f380 8811 	msr	BASEPRI, r0
 800555a:	f04e 0e0d 	orr.w	lr, lr, #13
 800555e:	4770      	bx	lr

08005560 <pxCurrentTCBConst2>:
 8005560:	200004e4 	.word	0x200004e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop

08005568 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005568:	4806      	ldr	r0, [pc, #24]	; (8005584 <prvPortStartFirstTask+0x1c>)
 800556a:	6800      	ldr	r0, [r0, #0]
 800556c:	6800      	ldr	r0, [r0, #0]
 800556e:	f380 8808 	msr	MSP, r0
 8005572:	b662      	cpsie	i
 8005574:	b661      	cpsie	f
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	df00      	svc	0
 8005580:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005582:	bf00      	nop
 8005584:	e000ed08 	.word	0xe000ed08

08005588 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800558e:	4b31      	ldr	r3, [pc, #196]	; (8005654 <xPortStartScheduler+0xcc>)
 8005590:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	b2db      	uxtb	r3, r3
 8005598:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	22ff      	movs	r2, #255	; 0xff
 800559e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	4b29      	ldr	r3, [pc, #164]	; (8005658 <xPortStartScheduler+0xd0>)
 80055b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055b6:	4b29      	ldr	r3, [pc, #164]	; (800565c <xPortStartScheduler+0xd4>)
 80055b8:	2207      	movs	r2, #7
 80055ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055bc:	e009      	b.n	80055d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80055be:	4b27      	ldr	r3, [pc, #156]	; (800565c <xPortStartScheduler+0xd4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	4a25      	ldr	r2, [pc, #148]	; (800565c <xPortStartScheduler+0xd4>)
 80055c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055da:	2b80      	cmp	r3, #128	; 0x80
 80055dc:	d0ef      	beq.n	80055be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055de:	4b1f      	ldr	r3, [pc, #124]	; (800565c <xPortStartScheduler+0xd4>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f1c3 0307 	rsb	r3, r3, #7
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d009      	beq.n	80055fe <xPortStartScheduler+0x76>
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60bb      	str	r3, [r7, #8]
 80055fc:	e7fe      	b.n	80055fc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055fe:	4b17      	ldr	r3, [pc, #92]	; (800565c <xPortStartScheduler+0xd4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	4a15      	ldr	r2, [pc, #84]	; (800565c <xPortStartScheduler+0xd4>)
 8005606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005608:	4b14      	ldr	r3, [pc, #80]	; (800565c <xPortStartScheduler+0xd4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005610:	4a12      	ldr	r2, [pc, #72]	; (800565c <xPortStartScheduler+0xd4>)
 8005612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800561c:	4b10      	ldr	r3, [pc, #64]	; (8005660 <xPortStartScheduler+0xd8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0f      	ldr	r2, [pc, #60]	; (8005660 <xPortStartScheduler+0xd8>)
 8005622:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005628:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <xPortStartScheduler+0xd8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <xPortStartScheduler+0xd8>)
 800562e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005634:	f000 f8b0 	bl	8005798 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <xPortStartScheduler+0xdc>)
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800563e:	f7ff ff93 	bl	8005568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005642:	f7ff fd73 	bl	800512c <vTaskSwitchContext>
	prvTaskExitError();
 8005646:	f7ff ff51 	bl	80054ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	e000e400 	.word	0xe000e400
 8005658:	20000610 	.word	0x20000610
 800565c:	20000614 	.word	0x20000614
 8005660:	e000ed20 	.word	0xe000ed20
 8005664:	2000000c 	.word	0x2000000c

08005668 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <vPortEnterCritical+0x54>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	4a0d      	ldr	r2, [pc, #52]	; (80056bc <vPortEnterCritical+0x54>)
 8005688:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800568a:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <vPortEnterCritical+0x54>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d10e      	bne.n	80056b0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005692:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <vPortEnterCritical+0x58>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <vPortEnterCritical+0x48>
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	e7fe      	b.n	80056ae <vPortEnterCritical+0x46>
	}
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	2000000c 	.word	0x2000000c
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <vPortExitCritical+0x48>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d109      	bne.n	80056e6 <vPortExitCritical+0x22>
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	607b      	str	r3, [r7, #4]
 80056e4:	e7fe      	b.n	80056e4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <vPortExitCritical+0x48>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	4a07      	ldr	r2, [pc, #28]	; (800570c <vPortExitCritical+0x48>)
 80056ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <vPortExitCritical+0x48>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <vPortExitCritical+0x3e>
 80056f8:	2300      	movs	r3, #0
 80056fa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr
 800570c:	2000000c 	.word	0x2000000c

08005710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005710:	f3ef 8009 	mrs	r0, PSP
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	4b0d      	ldr	r3, [pc, #52]	; (8005750 <pxCurrentTCBConst>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005720:	6010      	str	r0, [r2, #0]
 8005722:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005726:	f04f 0050 	mov.w	r0, #80	; 0x50
 800572a:	f380 8811 	msr	BASEPRI, r0
 800572e:	f7ff fcfd 	bl	800512c <vTaskSwitchContext>
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f380 8811 	msr	BASEPRI, r0
 800573a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800573e:	6819      	ldr	r1, [r3, #0]
 8005740:	6808      	ldr	r0, [r1, #0]
 8005742:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005746:	f380 8809 	msr	PSP, r0
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	4770      	bx	lr

08005750 <pxCurrentTCBConst>:
 8005750:	200004e4 	.word	0x200004e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop

08005758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005770:	f7ff fc20 	bl	8004fb4 <xTaskIncrementTick>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800577a:	4b06      	ldr	r3, [pc, #24]	; (8005794 <xPortSysTickHandler+0x3c>)
 800577c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	2300      	movs	r3, #0
 8005784:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <vPortSetupTimerInterrupt+0x30>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <vPortSetupTimerInterrupt+0x34>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <vPortSetupTimerInterrupt+0x38>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <vPortSetupTimerInterrupt+0x3c>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	099b      	lsrs	r3, r3, #6
 80057b4:	4a08      	ldr	r2, [pc, #32]	; (80057d8 <vPortSetupTimerInterrupt+0x40>)
 80057b6:	3b01      	subs	r3, #1
 80057b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057ba:	4b03      	ldr	r3, [pc, #12]	; (80057c8 <vPortSetupTimerInterrupt+0x30>)
 80057bc:	2207      	movs	r2, #7
 80057be:	601a      	str	r2, [r3, #0]
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr
 80057c8:	e000e010 	.word	0xe000e010
 80057cc:	e000e018 	.word	0xe000e018
 80057d0:	20000000 	.word	0x20000000
 80057d4:	10624dd3 	.word	0x10624dd3
 80057d8:	e000e014 	.word	0xe000e014

080057dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057e8:	f7ff fb3a 	bl	8004e60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057ec:	4b57      	ldr	r3, [pc, #348]	; (800594c <pvPortMalloc+0x170>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057f4:	f000 f90c 	bl	8005a10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057f8:	4b55      	ldr	r3, [pc, #340]	; (8005950 <pvPortMalloc+0x174>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 808c 	bne.w	800591e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01c      	beq.n	8005846 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800580c:	2208      	movs	r2, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4413      	add	r3, r2
 8005812:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	2b00      	cmp	r3, #0
 800581c:	d013      	beq.n	8005846 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f023 0307 	bic.w	r3, r3, #7
 8005824:	3308      	adds	r3, #8
 8005826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <pvPortMalloc+0x6a>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e7fe      	b.n	8005844 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d068      	beq.n	800591e <pvPortMalloc+0x142>
 800584c:	4b41      	ldr	r3, [pc, #260]	; (8005954 <pvPortMalloc+0x178>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	429a      	cmp	r2, r3
 8005854:	d863      	bhi.n	800591e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005856:	4b40      	ldr	r3, [pc, #256]	; (8005958 <pvPortMalloc+0x17c>)
 8005858:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800585a:	4b3f      	ldr	r3, [pc, #252]	; (8005958 <pvPortMalloc+0x17c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005860:	e004      	b.n	800586c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	429a      	cmp	r2, r3
 8005874:	d903      	bls.n	800587e <pvPortMalloc+0xa2>
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f1      	bne.n	8005862 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800587e:	4b33      	ldr	r3, [pc, #204]	; (800594c <pvPortMalloc+0x170>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005884:	429a      	cmp	r2, r3
 8005886:	d04a      	beq.n	800591e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2208      	movs	r2, #8
 800588e:	4413      	add	r3, r2
 8005890:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	1ad2      	subs	r2, r2, r3
 80058a2:	2308      	movs	r3, #8
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d91e      	bls.n	80058e8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4413      	add	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d009      	beq.n	80058d0 <pvPortMalloc+0xf4>
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	e7fe      	b.n	80058ce <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	1ad2      	subs	r2, r2, r3
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058e2:	69b8      	ldr	r0, [r7, #24]
 80058e4:	f000 f8f6 	bl	8005ad4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058e8:	4b1a      	ldr	r3, [pc, #104]	; (8005954 <pvPortMalloc+0x178>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	4a18      	ldr	r2, [pc, #96]	; (8005954 <pvPortMalloc+0x178>)
 80058f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058f6:	4b17      	ldr	r3, [pc, #92]	; (8005954 <pvPortMalloc+0x178>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b18      	ldr	r3, [pc, #96]	; (800595c <pvPortMalloc+0x180>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d203      	bcs.n	800590a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005902:	4b14      	ldr	r3, [pc, #80]	; (8005954 <pvPortMalloc+0x178>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a15      	ldr	r2, [pc, #84]	; (800595c <pvPortMalloc+0x180>)
 8005908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	4b10      	ldr	r3, [pc, #64]	; (8005950 <pvPortMalloc+0x174>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	431a      	orrs	r2, r3
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800591e:	f7ff faad 	bl	8004e7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <pvPortMalloc+0x164>
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	e7fe      	b.n	800593e <pvPortMalloc+0x162>
	return pvReturn;
 8005940:	69fb      	ldr	r3, [r7, #28]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3728      	adds	r7, #40	; 0x28
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20001220 	.word	0x20001220
 8005950:	2000122c 	.word	0x2000122c
 8005954:	20001224 	.word	0x20001224
 8005958:	20001218 	.word	0x20001218
 800595c:	20001228 	.word	0x20001228

08005960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d046      	beq.n	8005a00 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005972:	2308      	movs	r3, #8
 8005974:	425b      	negs	r3, r3
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	4b20      	ldr	r3, [pc, #128]	; (8005a08 <vPortFree+0xa8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d109      	bne.n	80059a2 <vPortFree+0x42>
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e7fe      	b.n	80059a0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <vPortFree+0x5e>
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	e7fe      	b.n	80059bc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <vPortFree+0xa8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d019      	beq.n	8005a00 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d115      	bne.n	8005a00 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <vPortFree+0xa8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	43db      	mvns	r3, r3
 80059de:	401a      	ands	r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059e4:	f7ff fa3c 	bl	8004e60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <vPortFree+0xac>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4413      	add	r3, r2
 80059f2:	4a06      	ldr	r2, [pc, #24]	; (8005a0c <vPortFree+0xac>)
 80059f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059f6:	6938      	ldr	r0, [r7, #16]
 80059f8:	f000 f86c 	bl	8005ad4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059fc:	f7ff fa3e 	bl	8004e7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a00:	bf00      	nop
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	2000122c 	.word	0x2000122c
 8005a0c:	20001224 	.word	0x20001224

08005a10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a1c:	4b27      	ldr	r3, [pc, #156]	; (8005abc <prvHeapInit+0xac>)
 8005a1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3307      	adds	r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0307 	bic.w	r3, r3, #7
 8005a36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <prvHeapInit+0xac>)
 8005a40:	4413      	add	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a48:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <prvHeapInit+0xb0>)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <prvHeapInit+0xb0>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	4413      	add	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0307 	bic.w	r3, r3, #7
 8005a6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <prvHeapInit+0xb4>)
 8005a70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a72:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <prvHeapInit+0xb4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2200      	movs	r2, #0
 8005a78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a7a:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <prvHeapInit+0xb4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a90:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <prvHeapInit+0xb4>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4a0a      	ldr	r2, [pc, #40]	; (8005ac8 <prvHeapInit+0xb8>)
 8005a9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a09      	ldr	r2, [pc, #36]	; (8005acc <prvHeapInit+0xbc>)
 8005aa6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aa8:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <prvHeapInit+0xc0>)
 8005aaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005aae:	601a      	str	r2, [r3, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20000618 	.word	0x20000618
 8005ac0:	20001218 	.word	0x20001218
 8005ac4:	20001220 	.word	0x20001220
 8005ac8:	20001228 	.word	0x20001228
 8005acc:	20001224 	.word	0x20001224
 8005ad0:	2000122c 	.word	0x2000122c

08005ad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005adc:	4b27      	ldr	r3, [pc, #156]	; (8005b7c <prvInsertBlockIntoFreeList+0xa8>)
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	e002      	b.n	8005ae8 <prvInsertBlockIntoFreeList+0x14>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d8f7      	bhi.n	8005ae2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4413      	add	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d108      	bne.n	8005b16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	441a      	add	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	441a      	add	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d118      	bne.n	8005b5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <prvInsertBlockIntoFreeList+0xac>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d00d      	beq.n	8005b52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	441a      	add	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e008      	b.n	8005b64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b52:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <prvInsertBlockIntoFreeList+0xac>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e003      	b.n	8005b64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d002      	beq.n	8005b72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	20001218 	.word	0x20001218
 8005b80:	20001220 	.word	0x20001220

08005b84 <__errno>:
 8005b84:	4b01      	ldr	r3, [pc, #4]	; (8005b8c <__errno+0x8>)
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	20000010 	.word	0x20000010

08005b90 <__libc_init_array>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	2500      	movs	r5, #0
 8005b94:	4e0c      	ldr	r6, [pc, #48]	; (8005bc8 <__libc_init_array+0x38>)
 8005b96:	4c0d      	ldr	r4, [pc, #52]	; (8005bcc <__libc_init_array+0x3c>)
 8005b98:	1ba4      	subs	r4, r4, r6
 8005b9a:	10a4      	asrs	r4, r4, #2
 8005b9c:	42a5      	cmp	r5, r4
 8005b9e:	d109      	bne.n	8005bb4 <__libc_init_array+0x24>
 8005ba0:	f003 fd5e 	bl	8009660 <_init>
 8005ba4:	2500      	movs	r5, #0
 8005ba6:	4e0a      	ldr	r6, [pc, #40]	; (8005bd0 <__libc_init_array+0x40>)
 8005ba8:	4c0a      	ldr	r4, [pc, #40]	; (8005bd4 <__libc_init_array+0x44>)
 8005baa:	1ba4      	subs	r4, r4, r6
 8005bac:	10a4      	asrs	r4, r4, #2
 8005bae:	42a5      	cmp	r5, r4
 8005bb0:	d105      	bne.n	8005bbe <__libc_init_array+0x2e>
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bb8:	4798      	blx	r3
 8005bba:	3501      	adds	r5, #1
 8005bbc:	e7ee      	b.n	8005b9c <__libc_init_array+0xc>
 8005bbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bc2:	4798      	blx	r3
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	e7f2      	b.n	8005bae <__libc_init_array+0x1e>
 8005bc8:	080099e0 	.word	0x080099e0
 8005bcc:	080099e0 	.word	0x080099e0
 8005bd0:	080099e0 	.word	0x080099e0
 8005bd4:	080099e4 	.word	0x080099e4

08005bd8 <malloc>:
 8005bd8:	4b02      	ldr	r3, [pc, #8]	; (8005be4 <malloc+0xc>)
 8005bda:	4601      	mov	r1, r0
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	f000 b863 	b.w	8005ca8 <_malloc_r>
 8005be2:	bf00      	nop
 8005be4:	20000010 	.word	0x20000010

08005be8 <memcpy>:
 8005be8:	b510      	push	{r4, lr}
 8005bea:	1e43      	subs	r3, r0, #1
 8005bec:	440a      	add	r2, r1
 8005bee:	4291      	cmp	r1, r2
 8005bf0:	d100      	bne.n	8005bf4 <memcpy+0xc>
 8005bf2:	bd10      	pop	{r4, pc}
 8005bf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bfc:	e7f7      	b.n	8005bee <memcpy+0x6>

08005bfe <memset>:
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4402      	add	r2, r0
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d100      	bne.n	8005c08 <memset+0xa>
 8005c06:	4770      	bx	lr
 8005c08:	f803 1b01 	strb.w	r1, [r3], #1
 8005c0c:	e7f9      	b.n	8005c02 <memset+0x4>
	...

08005c10 <_free_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4605      	mov	r5, r0
 8005c14:	2900      	cmp	r1, #0
 8005c16:	d043      	beq.n	8005ca0 <_free_r+0x90>
 8005c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c1c:	1f0c      	subs	r4, r1, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bfb8      	it	lt
 8005c22:	18e4      	addlt	r4, r4, r3
 8005c24:	f002 ff5c 	bl	8008ae0 <__malloc_lock>
 8005c28:	4a1e      	ldr	r2, [pc, #120]	; (8005ca4 <_free_r+0x94>)
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	b933      	cbnz	r3, 8005c3e <_free_r+0x2e>
 8005c30:	6063      	str	r3, [r4, #4]
 8005c32:	6014      	str	r4, [r2, #0]
 8005c34:	4628      	mov	r0, r5
 8005c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c3a:	f002 bf52 	b.w	8008ae2 <__malloc_unlock>
 8005c3e:	42a3      	cmp	r3, r4
 8005c40:	d90b      	bls.n	8005c5a <_free_r+0x4a>
 8005c42:	6821      	ldr	r1, [r4, #0]
 8005c44:	1862      	adds	r2, r4, r1
 8005c46:	4293      	cmp	r3, r2
 8005c48:	bf01      	itttt	eq
 8005c4a:	681a      	ldreq	r2, [r3, #0]
 8005c4c:	685b      	ldreq	r3, [r3, #4]
 8005c4e:	1852      	addeq	r2, r2, r1
 8005c50:	6022      	streq	r2, [r4, #0]
 8005c52:	6063      	str	r3, [r4, #4]
 8005c54:	6004      	str	r4, [r0, #0]
 8005c56:	e7ed      	b.n	8005c34 <_free_r+0x24>
 8005c58:	4613      	mov	r3, r2
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	b10a      	cbz	r2, 8005c62 <_free_r+0x52>
 8005c5e:	42a2      	cmp	r2, r4
 8005c60:	d9fa      	bls.n	8005c58 <_free_r+0x48>
 8005c62:	6819      	ldr	r1, [r3, #0]
 8005c64:	1858      	adds	r0, r3, r1
 8005c66:	42a0      	cmp	r0, r4
 8005c68:	d10b      	bne.n	8005c82 <_free_r+0x72>
 8005c6a:	6820      	ldr	r0, [r4, #0]
 8005c6c:	4401      	add	r1, r0
 8005c6e:	1858      	adds	r0, r3, r1
 8005c70:	4282      	cmp	r2, r0
 8005c72:	6019      	str	r1, [r3, #0]
 8005c74:	d1de      	bne.n	8005c34 <_free_r+0x24>
 8005c76:	6810      	ldr	r0, [r2, #0]
 8005c78:	6852      	ldr	r2, [r2, #4]
 8005c7a:	4401      	add	r1, r0
 8005c7c:	6019      	str	r1, [r3, #0]
 8005c7e:	605a      	str	r2, [r3, #4]
 8005c80:	e7d8      	b.n	8005c34 <_free_r+0x24>
 8005c82:	d902      	bls.n	8005c8a <_free_r+0x7a>
 8005c84:	230c      	movs	r3, #12
 8005c86:	602b      	str	r3, [r5, #0]
 8005c88:	e7d4      	b.n	8005c34 <_free_r+0x24>
 8005c8a:	6820      	ldr	r0, [r4, #0]
 8005c8c:	1821      	adds	r1, r4, r0
 8005c8e:	428a      	cmp	r2, r1
 8005c90:	bf01      	itttt	eq
 8005c92:	6811      	ldreq	r1, [r2, #0]
 8005c94:	6852      	ldreq	r2, [r2, #4]
 8005c96:	1809      	addeq	r1, r1, r0
 8005c98:	6021      	streq	r1, [r4, #0]
 8005c9a:	6062      	str	r2, [r4, #4]
 8005c9c:	605c      	str	r4, [r3, #4]
 8005c9e:	e7c9      	b.n	8005c34 <_free_r+0x24>
 8005ca0:	bd38      	pop	{r3, r4, r5, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20001230 	.word	0x20001230

08005ca8 <_malloc_r>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	1ccd      	adds	r5, r1, #3
 8005cac:	f025 0503 	bic.w	r5, r5, #3
 8005cb0:	3508      	adds	r5, #8
 8005cb2:	2d0c      	cmp	r5, #12
 8005cb4:	bf38      	it	cc
 8005cb6:	250c      	movcc	r5, #12
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	4606      	mov	r6, r0
 8005cbc:	db01      	blt.n	8005cc2 <_malloc_r+0x1a>
 8005cbe:	42a9      	cmp	r1, r5
 8005cc0:	d903      	bls.n	8005cca <_malloc_r+0x22>
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	6033      	str	r3, [r6, #0]
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	bd70      	pop	{r4, r5, r6, pc}
 8005cca:	f002 ff09 	bl	8008ae0 <__malloc_lock>
 8005cce:	4a21      	ldr	r2, [pc, #132]	; (8005d54 <_malloc_r+0xac>)
 8005cd0:	6814      	ldr	r4, [r2, #0]
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	b991      	cbnz	r1, 8005cfc <_malloc_r+0x54>
 8005cd6:	4c20      	ldr	r4, [pc, #128]	; (8005d58 <_malloc_r+0xb0>)
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	b91b      	cbnz	r3, 8005ce4 <_malloc_r+0x3c>
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f000 fe6d 	bl	80069bc <_sbrk_r>
 8005ce2:	6020      	str	r0, [r4, #0]
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f000 fe68 	bl	80069bc <_sbrk_r>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d124      	bne.n	8005d3a <_malloc_r+0x92>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	6033      	str	r3, [r6, #0]
 8005cf6:	f002 fef4 	bl	8008ae2 <__malloc_unlock>
 8005cfa:	e7e4      	b.n	8005cc6 <_malloc_r+0x1e>
 8005cfc:	680b      	ldr	r3, [r1, #0]
 8005cfe:	1b5b      	subs	r3, r3, r5
 8005d00:	d418      	bmi.n	8005d34 <_malloc_r+0x8c>
 8005d02:	2b0b      	cmp	r3, #11
 8005d04:	d90f      	bls.n	8005d26 <_malloc_r+0x7e>
 8005d06:	600b      	str	r3, [r1, #0]
 8005d08:	18cc      	adds	r4, r1, r3
 8005d0a:	50cd      	str	r5, [r1, r3]
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f002 fee8 	bl	8008ae2 <__malloc_unlock>
 8005d12:	f104 000b 	add.w	r0, r4, #11
 8005d16:	1d23      	adds	r3, r4, #4
 8005d18:	f020 0007 	bic.w	r0, r0, #7
 8005d1c:	1ac3      	subs	r3, r0, r3
 8005d1e:	d0d3      	beq.n	8005cc8 <_malloc_r+0x20>
 8005d20:	425a      	negs	r2, r3
 8005d22:	50e2      	str	r2, [r4, r3]
 8005d24:	e7d0      	b.n	8005cc8 <_malloc_r+0x20>
 8005d26:	684b      	ldr	r3, [r1, #4]
 8005d28:	428c      	cmp	r4, r1
 8005d2a:	bf16      	itet	ne
 8005d2c:	6063      	strne	r3, [r4, #4]
 8005d2e:	6013      	streq	r3, [r2, #0]
 8005d30:	460c      	movne	r4, r1
 8005d32:	e7eb      	b.n	8005d0c <_malloc_r+0x64>
 8005d34:	460c      	mov	r4, r1
 8005d36:	6849      	ldr	r1, [r1, #4]
 8005d38:	e7cc      	b.n	8005cd4 <_malloc_r+0x2c>
 8005d3a:	1cc4      	adds	r4, r0, #3
 8005d3c:	f024 0403 	bic.w	r4, r4, #3
 8005d40:	42a0      	cmp	r0, r4
 8005d42:	d005      	beq.n	8005d50 <_malloc_r+0xa8>
 8005d44:	1a21      	subs	r1, r4, r0
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 fe38 	bl	80069bc <_sbrk_r>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d0cf      	beq.n	8005cf0 <_malloc_r+0x48>
 8005d50:	6025      	str	r5, [r4, #0]
 8005d52:	e7db      	b.n	8005d0c <_malloc_r+0x64>
 8005d54:	20001230 	.word	0x20001230
 8005d58:	20001234 	.word	0x20001234

08005d5c <__cvt>:
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d62:	461e      	mov	r6, r3
 8005d64:	bfbb      	ittet	lt
 8005d66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005d6a:	461e      	movlt	r6, r3
 8005d6c:	2300      	movge	r3, #0
 8005d6e:	232d      	movlt	r3, #45	; 0x2d
 8005d70:	b088      	sub	sp, #32
 8005d72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005d74:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005d78:	f027 0720 	bic.w	r7, r7, #32
 8005d7c:	2f46      	cmp	r7, #70	; 0x46
 8005d7e:	4614      	mov	r4, r2
 8005d80:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d82:	700b      	strb	r3, [r1, #0]
 8005d84:	d004      	beq.n	8005d90 <__cvt+0x34>
 8005d86:	2f45      	cmp	r7, #69	; 0x45
 8005d88:	d100      	bne.n	8005d8c <__cvt+0x30>
 8005d8a:	3501      	adds	r5, #1
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e000      	b.n	8005d92 <__cvt+0x36>
 8005d90:	2303      	movs	r3, #3
 8005d92:	aa07      	add	r2, sp, #28
 8005d94:	9204      	str	r2, [sp, #16]
 8005d96:	aa06      	add	r2, sp, #24
 8005d98:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d9c:	e9cd 3500 	strd	r3, r5, [sp]
 8005da0:	4622      	mov	r2, r4
 8005da2:	4633      	mov	r3, r6
 8005da4:	f001 fd8c 	bl	80078c0 <_dtoa_r>
 8005da8:	2f47      	cmp	r7, #71	; 0x47
 8005daa:	4680      	mov	r8, r0
 8005dac:	d102      	bne.n	8005db4 <__cvt+0x58>
 8005dae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005db0:	07db      	lsls	r3, r3, #31
 8005db2:	d526      	bpl.n	8005e02 <__cvt+0xa6>
 8005db4:	2f46      	cmp	r7, #70	; 0x46
 8005db6:	eb08 0905 	add.w	r9, r8, r5
 8005dba:	d111      	bne.n	8005de0 <__cvt+0x84>
 8005dbc:	f898 3000 	ldrb.w	r3, [r8]
 8005dc0:	2b30      	cmp	r3, #48	; 0x30
 8005dc2:	d10a      	bne.n	8005dda <__cvt+0x7e>
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4631      	mov	r1, r6
 8005dcc:	f7fa fdec 	bl	80009a8 <__aeabi_dcmpeq>
 8005dd0:	b918      	cbnz	r0, 8005dda <__cvt+0x7e>
 8005dd2:	f1c5 0501 	rsb	r5, r5, #1
 8005dd6:	f8ca 5000 	str.w	r5, [sl]
 8005dda:	f8da 3000 	ldr.w	r3, [sl]
 8005dde:	4499      	add	r9, r3
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	4620      	mov	r0, r4
 8005de6:	4631      	mov	r1, r6
 8005de8:	f7fa fdde 	bl	80009a8 <__aeabi_dcmpeq>
 8005dec:	b938      	cbnz	r0, 8005dfe <__cvt+0xa2>
 8005dee:	2230      	movs	r2, #48	; 0x30
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	454b      	cmp	r3, r9
 8005df4:	d205      	bcs.n	8005e02 <__cvt+0xa6>
 8005df6:	1c59      	adds	r1, r3, #1
 8005df8:	9107      	str	r1, [sp, #28]
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	e7f8      	b.n	8005df0 <__cvt+0x94>
 8005dfe:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e02:	4640      	mov	r0, r8
 8005e04:	9b07      	ldr	r3, [sp, #28]
 8005e06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e08:	eba3 0308 	sub.w	r3, r3, r8
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	b008      	add	sp, #32
 8005e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005e14 <__exponent>:
 8005e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e16:	2900      	cmp	r1, #0
 8005e18:	bfb4      	ite	lt
 8005e1a:	232d      	movlt	r3, #45	; 0x2d
 8005e1c:	232b      	movge	r3, #43	; 0x2b
 8005e1e:	4604      	mov	r4, r0
 8005e20:	bfb8      	it	lt
 8005e22:	4249      	neglt	r1, r1
 8005e24:	2909      	cmp	r1, #9
 8005e26:	f804 2b02 	strb.w	r2, [r4], #2
 8005e2a:	7043      	strb	r3, [r0, #1]
 8005e2c:	dd21      	ble.n	8005e72 <__exponent+0x5e>
 8005e2e:	f10d 0307 	add.w	r3, sp, #7
 8005e32:	461f      	mov	r7, r3
 8005e34:	260a      	movs	r6, #10
 8005e36:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e3a:	fb06 1115 	mls	r1, r6, r5, r1
 8005e3e:	2d09      	cmp	r5, #9
 8005e40:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005e44:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e48:	f103 32ff 	add.w	r2, r3, #4294967295
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	dc09      	bgt.n	8005e64 <__exponent+0x50>
 8005e50:	3130      	adds	r1, #48	; 0x30
 8005e52:	3b02      	subs	r3, #2
 8005e54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e58:	42bb      	cmp	r3, r7
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	d304      	bcc.n	8005e68 <__exponent+0x54>
 8005e5e:	1a10      	subs	r0, r2, r0
 8005e60:	b003      	add	sp, #12
 8005e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e64:	4613      	mov	r3, r2
 8005e66:	e7e6      	b.n	8005e36 <__exponent+0x22>
 8005e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e6c:	f804 2b01 	strb.w	r2, [r4], #1
 8005e70:	e7f2      	b.n	8005e58 <__exponent+0x44>
 8005e72:	2330      	movs	r3, #48	; 0x30
 8005e74:	4419      	add	r1, r3
 8005e76:	7083      	strb	r3, [r0, #2]
 8005e78:	1d02      	adds	r2, r0, #4
 8005e7a:	70c1      	strb	r1, [r0, #3]
 8005e7c:	e7ef      	b.n	8005e5e <__exponent+0x4a>
	...

08005e80 <_printf_float>:
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	b091      	sub	sp, #68	; 0x44
 8005e86:	460c      	mov	r4, r1
 8005e88:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005e8a:	4693      	mov	fp, r2
 8005e8c:	461e      	mov	r6, r3
 8005e8e:	4605      	mov	r5, r0
 8005e90:	f002 fdf8 	bl	8008a84 <_localeconv_r>
 8005e94:	6803      	ldr	r3, [r0, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9a:	f7fa f959 	bl	8000150 <strlen>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	930e      	str	r3, [sp, #56]	; 0x38
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	900a      	str	r0, [sp, #40]	; 0x28
 8005ea6:	3307      	adds	r3, #7
 8005ea8:	f023 0307 	bic.w	r3, r3, #7
 8005eac:	f103 0208 	add.w	r2, r3, #8
 8005eb0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005eb4:	f8d4 a000 	ldr.w	sl, [r4]
 8005eb8:	603a      	str	r2, [r7, #0]
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ec2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005ec6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed0:	4ba6      	ldr	r3, [pc, #664]	; (800616c <_printf_float+0x2ec>)
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ed6:	f7fa fd99 	bl	8000a0c <__aeabi_dcmpun>
 8005eda:	bb68      	cbnz	r0, 8005f38 <_printf_float+0xb8>
 8005edc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee0:	4ba2      	ldr	r3, [pc, #648]	; (800616c <_printf_float+0x2ec>)
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ee6:	f7fa fd73 	bl	80009d0 <__aeabi_dcmple>
 8005eea:	bb28      	cbnz	r0, 8005f38 <_printf_float+0xb8>
 8005eec:	2200      	movs	r2, #0
 8005eee:	2300      	movs	r3, #0
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	f7fa fd62 	bl	80009bc <__aeabi_dcmplt>
 8005ef8:	b110      	cbz	r0, 8005f00 <_printf_float+0x80>
 8005efa:	232d      	movs	r3, #45	; 0x2d
 8005efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f00:	4f9b      	ldr	r7, [pc, #620]	; (8006170 <_printf_float+0x2f0>)
 8005f02:	4b9c      	ldr	r3, [pc, #624]	; (8006174 <_printf_float+0x2f4>)
 8005f04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f08:	bf98      	it	ls
 8005f0a:	461f      	movls	r7, r3
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	f04f 0900 	mov.w	r9, #0
 8005f12:	6123      	str	r3, [r4, #16]
 8005f14:	f02a 0304 	bic.w	r3, sl, #4
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	9600      	str	r6, [sp, #0]
 8005f1c:	465b      	mov	r3, fp
 8005f1e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005f20:	4621      	mov	r1, r4
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 f9e2 	bl	80062ec <_printf_common>
 8005f28:	3001      	adds	r0, #1
 8005f2a:	f040 8090 	bne.w	800604e <_printf_float+0x1ce>
 8005f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f32:	b011      	add	sp, #68	; 0x44
 8005f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f38:	463a      	mov	r2, r7
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	4649      	mov	r1, r9
 8005f40:	f7fa fd64 	bl	8000a0c <__aeabi_dcmpun>
 8005f44:	b110      	cbz	r0, 8005f4c <_printf_float+0xcc>
 8005f46:	4f8c      	ldr	r7, [pc, #560]	; (8006178 <_printf_float+0x2f8>)
 8005f48:	4b8c      	ldr	r3, [pc, #560]	; (800617c <_printf_float+0x2fc>)
 8005f4a:	e7db      	b.n	8005f04 <_printf_float+0x84>
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005f52:	1c59      	adds	r1, r3, #1
 8005f54:	a80d      	add	r0, sp, #52	; 0x34
 8005f56:	a90e      	add	r1, sp, #56	; 0x38
 8005f58:	d140      	bne.n	8005fdc <_printf_float+0x15c>
 8005f5a:	2306      	movs	r3, #6
 8005f5c:	6063      	str	r3, [r4, #4]
 8005f5e:	f04f 0c00 	mov.w	ip, #0
 8005f62:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005f66:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005f6a:	6863      	ldr	r3, [r4, #4]
 8005f6c:	6022      	str	r2, [r4, #0]
 8005f6e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	463a      	mov	r2, r7
 8005f76:	464b      	mov	r3, r9
 8005f78:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f7ff feed 	bl	8005d5c <__cvt>
 8005f82:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005f86:	2b47      	cmp	r3, #71	; 0x47
 8005f88:	4607      	mov	r7, r0
 8005f8a:	d109      	bne.n	8005fa0 <_printf_float+0x120>
 8005f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f8e:	1cd8      	adds	r0, r3, #3
 8005f90:	db02      	blt.n	8005f98 <_printf_float+0x118>
 8005f92:	6862      	ldr	r2, [r4, #4]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	dd47      	ble.n	8006028 <_printf_float+0x1a8>
 8005f98:	f1a8 0802 	sub.w	r8, r8, #2
 8005f9c:	fa5f f888 	uxtb.w	r8, r8
 8005fa0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005fa4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fa6:	d824      	bhi.n	8005ff2 <_printf_float+0x172>
 8005fa8:	3901      	subs	r1, #1
 8005faa:	4642      	mov	r2, r8
 8005fac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fb0:	910d      	str	r1, [sp, #52]	; 0x34
 8005fb2:	f7ff ff2f 	bl	8005e14 <__exponent>
 8005fb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fb8:	4681      	mov	r9, r0
 8005fba:	1813      	adds	r3, r2, r0
 8005fbc:	2a01      	cmp	r2, #1
 8005fbe:	6123      	str	r3, [r4, #16]
 8005fc0:	dc02      	bgt.n	8005fc8 <_printf_float+0x148>
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	07d1      	lsls	r1, r2, #31
 8005fc6:	d501      	bpl.n	8005fcc <_printf_float+0x14c>
 8005fc8:	3301      	adds	r3, #1
 8005fca:	6123      	str	r3, [r4, #16]
 8005fcc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0a2      	beq.n	8005f1a <_printf_float+0x9a>
 8005fd4:	232d      	movs	r3, #45	; 0x2d
 8005fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fda:	e79e      	b.n	8005f1a <_printf_float+0x9a>
 8005fdc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005fe0:	f000 816e 	beq.w	80062c0 <_printf_float+0x440>
 8005fe4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fe8:	d1b9      	bne.n	8005f5e <_printf_float+0xde>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1b7      	bne.n	8005f5e <_printf_float+0xde>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e7b4      	b.n	8005f5c <_printf_float+0xdc>
 8005ff2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005ff6:	d119      	bne.n	800602c <_printf_float+0x1ac>
 8005ff8:	2900      	cmp	r1, #0
 8005ffa:	6863      	ldr	r3, [r4, #4]
 8005ffc:	dd0c      	ble.n	8006018 <_printf_float+0x198>
 8005ffe:	6121      	str	r1, [r4, #16]
 8006000:	b913      	cbnz	r3, 8006008 <_printf_float+0x188>
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	07d2      	lsls	r2, r2, #31
 8006006:	d502      	bpl.n	800600e <_printf_float+0x18e>
 8006008:	3301      	adds	r3, #1
 800600a:	440b      	add	r3, r1
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006010:	f04f 0900 	mov.w	r9, #0
 8006014:	65a3      	str	r3, [r4, #88]	; 0x58
 8006016:	e7d9      	b.n	8005fcc <_printf_float+0x14c>
 8006018:	b913      	cbnz	r3, 8006020 <_printf_float+0x1a0>
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	07d0      	lsls	r0, r2, #31
 800601e:	d501      	bpl.n	8006024 <_printf_float+0x1a4>
 8006020:	3302      	adds	r3, #2
 8006022:	e7f3      	b.n	800600c <_printf_float+0x18c>
 8006024:	2301      	movs	r3, #1
 8006026:	e7f1      	b.n	800600c <_printf_float+0x18c>
 8006028:	f04f 0867 	mov.w	r8, #103	; 0x67
 800602c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006030:	4293      	cmp	r3, r2
 8006032:	db05      	blt.n	8006040 <_printf_float+0x1c0>
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	07d1      	lsls	r1, r2, #31
 800603a:	d5e8      	bpl.n	800600e <_printf_float+0x18e>
 800603c:	3301      	adds	r3, #1
 800603e:	e7e5      	b.n	800600c <_printf_float+0x18c>
 8006040:	2b00      	cmp	r3, #0
 8006042:	bfcc      	ite	gt
 8006044:	2301      	movgt	r3, #1
 8006046:	f1c3 0302 	rsble	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	e7de      	b.n	800600c <_printf_float+0x18c>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	055a      	lsls	r2, r3, #21
 8006052:	d407      	bmi.n	8006064 <_printf_float+0x1e4>
 8006054:	6923      	ldr	r3, [r4, #16]
 8006056:	463a      	mov	r2, r7
 8006058:	4659      	mov	r1, fp
 800605a:	4628      	mov	r0, r5
 800605c:	47b0      	blx	r6
 800605e:	3001      	adds	r0, #1
 8006060:	d129      	bne.n	80060b6 <_printf_float+0x236>
 8006062:	e764      	b.n	8005f2e <_printf_float+0xae>
 8006064:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006068:	f240 80d7 	bls.w	800621a <_printf_float+0x39a>
 800606c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006070:	2200      	movs	r2, #0
 8006072:	2300      	movs	r3, #0
 8006074:	f7fa fc98 	bl	80009a8 <__aeabi_dcmpeq>
 8006078:	b388      	cbz	r0, 80060de <_printf_float+0x25e>
 800607a:	2301      	movs	r3, #1
 800607c:	4a40      	ldr	r2, [pc, #256]	; (8006180 <_printf_float+0x300>)
 800607e:	4659      	mov	r1, fp
 8006080:	4628      	mov	r0, r5
 8006082:	47b0      	blx	r6
 8006084:	3001      	adds	r0, #1
 8006086:	f43f af52 	beq.w	8005f2e <_printf_float+0xae>
 800608a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800608e:	429a      	cmp	r2, r3
 8006090:	db02      	blt.n	8006098 <_printf_float+0x218>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	07d8      	lsls	r0, r3, #31
 8006096:	d50e      	bpl.n	80060b6 <_printf_float+0x236>
 8006098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800609c:	4659      	mov	r1, fp
 800609e:	4628      	mov	r0, r5
 80060a0:	47b0      	blx	r6
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af43 	beq.w	8005f2e <_printf_float+0xae>
 80060a8:	2700      	movs	r7, #0
 80060aa:	f104 081a 	add.w	r8, r4, #26
 80060ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060b0:	3b01      	subs	r3, #1
 80060b2:	42bb      	cmp	r3, r7
 80060b4:	dc09      	bgt.n	80060ca <_printf_float+0x24a>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	079f      	lsls	r7, r3, #30
 80060ba:	f100 80fd 	bmi.w	80062b8 <_printf_float+0x438>
 80060be:	68e0      	ldr	r0, [r4, #12]
 80060c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060c2:	4298      	cmp	r0, r3
 80060c4:	bfb8      	it	lt
 80060c6:	4618      	movlt	r0, r3
 80060c8:	e733      	b.n	8005f32 <_printf_float+0xb2>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4642      	mov	r2, r8
 80060ce:	4659      	mov	r1, fp
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b0      	blx	r6
 80060d4:	3001      	adds	r0, #1
 80060d6:	f43f af2a 	beq.w	8005f2e <_printf_float+0xae>
 80060da:	3701      	adds	r7, #1
 80060dc:	e7e7      	b.n	80060ae <_printf_float+0x22e>
 80060de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	dc2b      	bgt.n	800613c <_printf_float+0x2bc>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4a26      	ldr	r2, [pc, #152]	; (8006180 <_printf_float+0x300>)
 80060e8:	4659      	mov	r1, fp
 80060ea:	4628      	mov	r0, r5
 80060ec:	47b0      	blx	r6
 80060ee:	3001      	adds	r0, #1
 80060f0:	f43f af1d 	beq.w	8005f2e <_printf_float+0xae>
 80060f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060f6:	b923      	cbnz	r3, 8006102 <_printf_float+0x282>
 80060f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060fa:	b913      	cbnz	r3, 8006102 <_printf_float+0x282>
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	07d9      	lsls	r1, r3, #31
 8006100:	d5d9      	bpl.n	80060b6 <_printf_float+0x236>
 8006102:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006106:	4659      	mov	r1, fp
 8006108:	4628      	mov	r0, r5
 800610a:	47b0      	blx	r6
 800610c:	3001      	adds	r0, #1
 800610e:	f43f af0e 	beq.w	8005f2e <_printf_float+0xae>
 8006112:	f04f 0800 	mov.w	r8, #0
 8006116:	f104 091a 	add.w	r9, r4, #26
 800611a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800611c:	425b      	negs	r3, r3
 800611e:	4543      	cmp	r3, r8
 8006120:	dc01      	bgt.n	8006126 <_printf_float+0x2a6>
 8006122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006124:	e797      	b.n	8006056 <_printf_float+0x1d6>
 8006126:	2301      	movs	r3, #1
 8006128:	464a      	mov	r2, r9
 800612a:	4659      	mov	r1, fp
 800612c:	4628      	mov	r0, r5
 800612e:	47b0      	blx	r6
 8006130:	3001      	adds	r0, #1
 8006132:	f43f aefc 	beq.w	8005f2e <_printf_float+0xae>
 8006136:	f108 0801 	add.w	r8, r8, #1
 800613a:	e7ee      	b.n	800611a <_printf_float+0x29a>
 800613c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800613e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006140:	429a      	cmp	r2, r3
 8006142:	bfa8      	it	ge
 8006144:	461a      	movge	r2, r3
 8006146:	2a00      	cmp	r2, #0
 8006148:	4690      	mov	r8, r2
 800614a:	dd07      	ble.n	800615c <_printf_float+0x2dc>
 800614c:	4613      	mov	r3, r2
 800614e:	4659      	mov	r1, fp
 8006150:	463a      	mov	r2, r7
 8006152:	4628      	mov	r0, r5
 8006154:	47b0      	blx	r6
 8006156:	3001      	adds	r0, #1
 8006158:	f43f aee9 	beq.w	8005f2e <_printf_float+0xae>
 800615c:	f104 031a 	add.w	r3, r4, #26
 8006160:	f04f 0a00 	mov.w	sl, #0
 8006164:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006168:	930b      	str	r3, [sp, #44]	; 0x2c
 800616a:	e015      	b.n	8006198 <_printf_float+0x318>
 800616c:	7fefffff 	.word	0x7fefffff
 8006170:	08009730 	.word	0x08009730
 8006174:	0800972c 	.word	0x0800972c
 8006178:	08009738 	.word	0x08009738
 800617c:	08009734 	.word	0x08009734
 8006180:	0800973c 	.word	0x0800973c
 8006184:	2301      	movs	r3, #1
 8006186:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006188:	4659      	mov	r1, fp
 800618a:	4628      	mov	r0, r5
 800618c:	47b0      	blx	r6
 800618e:	3001      	adds	r0, #1
 8006190:	f43f aecd 	beq.w	8005f2e <_printf_float+0xae>
 8006194:	f10a 0a01 	add.w	sl, sl, #1
 8006198:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800619c:	eba9 0308 	sub.w	r3, r9, r8
 80061a0:	4553      	cmp	r3, sl
 80061a2:	dcef      	bgt.n	8006184 <_printf_float+0x304>
 80061a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061a8:	429a      	cmp	r2, r3
 80061aa:	444f      	add	r7, r9
 80061ac:	db14      	blt.n	80061d8 <_printf_float+0x358>
 80061ae:	6823      	ldr	r3, [r4, #0]
 80061b0:	07da      	lsls	r2, r3, #31
 80061b2:	d411      	bmi.n	80061d8 <_printf_float+0x358>
 80061b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80061b8:	eba3 0209 	sub.w	r2, r3, r9
 80061bc:	eba3 0901 	sub.w	r9, r3, r1
 80061c0:	4591      	cmp	r9, r2
 80061c2:	bfa8      	it	ge
 80061c4:	4691      	movge	r9, r2
 80061c6:	f1b9 0f00 	cmp.w	r9, #0
 80061ca:	dc0d      	bgt.n	80061e8 <_printf_float+0x368>
 80061cc:	2700      	movs	r7, #0
 80061ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061d2:	f104 081a 	add.w	r8, r4, #26
 80061d6:	e018      	b.n	800620a <_printf_float+0x38a>
 80061d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061dc:	4659      	mov	r1, fp
 80061de:	4628      	mov	r0, r5
 80061e0:	47b0      	blx	r6
 80061e2:	3001      	adds	r0, #1
 80061e4:	d1e6      	bne.n	80061b4 <_printf_float+0x334>
 80061e6:	e6a2      	b.n	8005f2e <_printf_float+0xae>
 80061e8:	464b      	mov	r3, r9
 80061ea:	463a      	mov	r2, r7
 80061ec:	4659      	mov	r1, fp
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b0      	blx	r6
 80061f2:	3001      	adds	r0, #1
 80061f4:	d1ea      	bne.n	80061cc <_printf_float+0x34c>
 80061f6:	e69a      	b.n	8005f2e <_printf_float+0xae>
 80061f8:	2301      	movs	r3, #1
 80061fa:	4642      	mov	r2, r8
 80061fc:	4659      	mov	r1, fp
 80061fe:	4628      	mov	r0, r5
 8006200:	47b0      	blx	r6
 8006202:	3001      	adds	r0, #1
 8006204:	f43f ae93 	beq.w	8005f2e <_printf_float+0xae>
 8006208:	3701      	adds	r7, #1
 800620a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	eba3 0309 	sub.w	r3, r3, r9
 8006214:	42bb      	cmp	r3, r7
 8006216:	dcef      	bgt.n	80061f8 <_printf_float+0x378>
 8006218:	e74d      	b.n	80060b6 <_printf_float+0x236>
 800621a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800621c:	2a01      	cmp	r2, #1
 800621e:	dc01      	bgt.n	8006224 <_printf_float+0x3a4>
 8006220:	07db      	lsls	r3, r3, #31
 8006222:	d538      	bpl.n	8006296 <_printf_float+0x416>
 8006224:	2301      	movs	r3, #1
 8006226:	463a      	mov	r2, r7
 8006228:	4659      	mov	r1, fp
 800622a:	4628      	mov	r0, r5
 800622c:	47b0      	blx	r6
 800622e:	3001      	adds	r0, #1
 8006230:	f43f ae7d 	beq.w	8005f2e <_printf_float+0xae>
 8006234:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006238:	4659      	mov	r1, fp
 800623a:	4628      	mov	r0, r5
 800623c:	47b0      	blx	r6
 800623e:	3001      	adds	r0, #1
 8006240:	f107 0701 	add.w	r7, r7, #1
 8006244:	f43f ae73 	beq.w	8005f2e <_printf_float+0xae>
 8006248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800624c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800624e:	2200      	movs	r2, #0
 8006250:	f103 38ff 	add.w	r8, r3, #4294967295
 8006254:	2300      	movs	r3, #0
 8006256:	f7fa fba7 	bl	80009a8 <__aeabi_dcmpeq>
 800625a:	b9c0      	cbnz	r0, 800628e <_printf_float+0x40e>
 800625c:	4643      	mov	r3, r8
 800625e:	463a      	mov	r2, r7
 8006260:	4659      	mov	r1, fp
 8006262:	4628      	mov	r0, r5
 8006264:	47b0      	blx	r6
 8006266:	3001      	adds	r0, #1
 8006268:	d10d      	bne.n	8006286 <_printf_float+0x406>
 800626a:	e660      	b.n	8005f2e <_printf_float+0xae>
 800626c:	2301      	movs	r3, #1
 800626e:	4642      	mov	r2, r8
 8006270:	4659      	mov	r1, fp
 8006272:	4628      	mov	r0, r5
 8006274:	47b0      	blx	r6
 8006276:	3001      	adds	r0, #1
 8006278:	f43f ae59 	beq.w	8005f2e <_printf_float+0xae>
 800627c:	3701      	adds	r7, #1
 800627e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006280:	3b01      	subs	r3, #1
 8006282:	42bb      	cmp	r3, r7
 8006284:	dcf2      	bgt.n	800626c <_printf_float+0x3ec>
 8006286:	464b      	mov	r3, r9
 8006288:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800628c:	e6e4      	b.n	8006058 <_printf_float+0x1d8>
 800628e:	2700      	movs	r7, #0
 8006290:	f104 081a 	add.w	r8, r4, #26
 8006294:	e7f3      	b.n	800627e <_printf_float+0x3fe>
 8006296:	2301      	movs	r3, #1
 8006298:	e7e1      	b.n	800625e <_printf_float+0x3de>
 800629a:	2301      	movs	r3, #1
 800629c:	4642      	mov	r2, r8
 800629e:	4659      	mov	r1, fp
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b0      	blx	r6
 80062a4:	3001      	adds	r0, #1
 80062a6:	f43f ae42 	beq.w	8005f2e <_printf_float+0xae>
 80062aa:	3701      	adds	r7, #1
 80062ac:	68e3      	ldr	r3, [r4, #12]
 80062ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	42bb      	cmp	r3, r7
 80062b4:	dcf1      	bgt.n	800629a <_printf_float+0x41a>
 80062b6:	e702      	b.n	80060be <_printf_float+0x23e>
 80062b8:	2700      	movs	r7, #0
 80062ba:	f104 0819 	add.w	r8, r4, #25
 80062be:	e7f5      	b.n	80062ac <_printf_float+0x42c>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f43f ae94 	beq.w	8005fee <_printf_float+0x16e>
 80062c6:	f04f 0c00 	mov.w	ip, #0
 80062ca:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80062ce:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80062d2:	6022      	str	r2, [r4, #0]
 80062d4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80062d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	463a      	mov	r2, r7
 80062e0:	464b      	mov	r3, r9
 80062e2:	4628      	mov	r0, r5
 80062e4:	f7ff fd3a 	bl	8005d5c <__cvt>
 80062e8:	4607      	mov	r7, r0
 80062ea:	e64f      	b.n	8005f8c <_printf_float+0x10c>

080062ec <_printf_common>:
 80062ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f0:	4691      	mov	r9, r2
 80062f2:	461f      	mov	r7, r3
 80062f4:	688a      	ldr	r2, [r1, #8]
 80062f6:	690b      	ldr	r3, [r1, #16]
 80062f8:	4606      	mov	r6, r0
 80062fa:	4293      	cmp	r3, r2
 80062fc:	bfb8      	it	lt
 80062fe:	4613      	movlt	r3, r2
 8006300:	f8c9 3000 	str.w	r3, [r9]
 8006304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006308:	460c      	mov	r4, r1
 800630a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800630e:	b112      	cbz	r2, 8006316 <_printf_common+0x2a>
 8006310:	3301      	adds	r3, #1
 8006312:	f8c9 3000 	str.w	r3, [r9]
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	0699      	lsls	r1, r3, #26
 800631a:	bf42      	ittt	mi
 800631c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006320:	3302      	addmi	r3, #2
 8006322:	f8c9 3000 	strmi.w	r3, [r9]
 8006326:	6825      	ldr	r5, [r4, #0]
 8006328:	f015 0506 	ands.w	r5, r5, #6
 800632c:	d107      	bne.n	800633e <_printf_common+0x52>
 800632e:	f104 0a19 	add.w	sl, r4, #25
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	f8d9 2000 	ldr.w	r2, [r9]
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	42ab      	cmp	r3, r5
 800633c:	dc29      	bgt.n	8006392 <_printf_common+0xa6>
 800633e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	3300      	adds	r3, #0
 8006346:	bf18      	it	ne
 8006348:	2301      	movne	r3, #1
 800634a:	0692      	lsls	r2, r2, #26
 800634c:	d42e      	bmi.n	80063ac <_printf_common+0xc0>
 800634e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006352:	4639      	mov	r1, r7
 8006354:	4630      	mov	r0, r6
 8006356:	47c0      	blx	r8
 8006358:	3001      	adds	r0, #1
 800635a:	d021      	beq.n	80063a0 <_printf_common+0xb4>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	68e5      	ldr	r5, [r4, #12]
 8006360:	f003 0306 	and.w	r3, r3, #6
 8006364:	2b04      	cmp	r3, #4
 8006366:	bf18      	it	ne
 8006368:	2500      	movne	r5, #0
 800636a:	f8d9 2000 	ldr.w	r2, [r9]
 800636e:	f04f 0900 	mov.w	r9, #0
 8006372:	bf08      	it	eq
 8006374:	1aad      	subeq	r5, r5, r2
 8006376:	68a3      	ldr	r3, [r4, #8]
 8006378:	6922      	ldr	r2, [r4, #16]
 800637a:	bf08      	it	eq
 800637c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006380:	4293      	cmp	r3, r2
 8006382:	bfc4      	itt	gt
 8006384:	1a9b      	subgt	r3, r3, r2
 8006386:	18ed      	addgt	r5, r5, r3
 8006388:	341a      	adds	r4, #26
 800638a:	454d      	cmp	r5, r9
 800638c:	d11a      	bne.n	80063c4 <_printf_common+0xd8>
 800638e:	2000      	movs	r0, #0
 8006390:	e008      	b.n	80063a4 <_printf_common+0xb8>
 8006392:	2301      	movs	r3, #1
 8006394:	4652      	mov	r2, sl
 8006396:	4639      	mov	r1, r7
 8006398:	4630      	mov	r0, r6
 800639a:	47c0      	blx	r8
 800639c:	3001      	adds	r0, #1
 800639e:	d103      	bne.n	80063a8 <_printf_common+0xbc>
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a8:	3501      	adds	r5, #1
 80063aa:	e7c2      	b.n	8006332 <_printf_common+0x46>
 80063ac:	2030      	movs	r0, #48	; 0x30
 80063ae:	18e1      	adds	r1, r4, r3
 80063b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063ba:	4422      	add	r2, r4
 80063bc:	3302      	adds	r3, #2
 80063be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063c2:	e7c4      	b.n	800634e <_printf_common+0x62>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4622      	mov	r2, r4
 80063c8:	4639      	mov	r1, r7
 80063ca:	4630      	mov	r0, r6
 80063cc:	47c0      	blx	r8
 80063ce:	3001      	adds	r0, #1
 80063d0:	d0e6      	beq.n	80063a0 <_printf_common+0xb4>
 80063d2:	f109 0901 	add.w	r9, r9, #1
 80063d6:	e7d8      	b.n	800638a <_printf_common+0x9e>

080063d8 <_printf_i>:
 80063d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80063e0:	460c      	mov	r4, r1
 80063e2:	7e09      	ldrb	r1, [r1, #24]
 80063e4:	b085      	sub	sp, #20
 80063e6:	296e      	cmp	r1, #110	; 0x6e
 80063e8:	4617      	mov	r7, r2
 80063ea:	4606      	mov	r6, r0
 80063ec:	4698      	mov	r8, r3
 80063ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063f0:	f000 80b3 	beq.w	800655a <_printf_i+0x182>
 80063f4:	d822      	bhi.n	800643c <_printf_i+0x64>
 80063f6:	2963      	cmp	r1, #99	; 0x63
 80063f8:	d036      	beq.n	8006468 <_printf_i+0x90>
 80063fa:	d80a      	bhi.n	8006412 <_printf_i+0x3a>
 80063fc:	2900      	cmp	r1, #0
 80063fe:	f000 80b9 	beq.w	8006574 <_printf_i+0x19c>
 8006402:	2958      	cmp	r1, #88	; 0x58
 8006404:	f000 8083 	beq.w	800650e <_printf_i+0x136>
 8006408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006410:	e032      	b.n	8006478 <_printf_i+0xa0>
 8006412:	2964      	cmp	r1, #100	; 0x64
 8006414:	d001      	beq.n	800641a <_printf_i+0x42>
 8006416:	2969      	cmp	r1, #105	; 0x69
 8006418:	d1f6      	bne.n	8006408 <_printf_i+0x30>
 800641a:	6820      	ldr	r0, [r4, #0]
 800641c:	6813      	ldr	r3, [r2, #0]
 800641e:	0605      	lsls	r5, r0, #24
 8006420:	f103 0104 	add.w	r1, r3, #4
 8006424:	d52a      	bpl.n	800647c <_printf_i+0xa4>
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	da03      	bge.n	8006436 <_printf_i+0x5e>
 800642e:	222d      	movs	r2, #45	; 0x2d
 8006430:	425b      	negs	r3, r3
 8006432:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006436:	486f      	ldr	r0, [pc, #444]	; (80065f4 <_printf_i+0x21c>)
 8006438:	220a      	movs	r2, #10
 800643a:	e039      	b.n	80064b0 <_printf_i+0xd8>
 800643c:	2973      	cmp	r1, #115	; 0x73
 800643e:	f000 809d 	beq.w	800657c <_printf_i+0x1a4>
 8006442:	d808      	bhi.n	8006456 <_printf_i+0x7e>
 8006444:	296f      	cmp	r1, #111	; 0x6f
 8006446:	d020      	beq.n	800648a <_printf_i+0xb2>
 8006448:	2970      	cmp	r1, #112	; 0x70
 800644a:	d1dd      	bne.n	8006408 <_printf_i+0x30>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	f043 0320 	orr.w	r3, r3, #32
 8006452:	6023      	str	r3, [r4, #0]
 8006454:	e003      	b.n	800645e <_printf_i+0x86>
 8006456:	2975      	cmp	r1, #117	; 0x75
 8006458:	d017      	beq.n	800648a <_printf_i+0xb2>
 800645a:	2978      	cmp	r1, #120	; 0x78
 800645c:	d1d4      	bne.n	8006408 <_printf_i+0x30>
 800645e:	2378      	movs	r3, #120	; 0x78
 8006460:	4865      	ldr	r0, [pc, #404]	; (80065f8 <_printf_i+0x220>)
 8006462:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006466:	e055      	b.n	8006514 <_printf_i+0x13c>
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800646e:	1d19      	adds	r1, r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6011      	str	r1, [r2, #0]
 8006474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006478:	2301      	movs	r3, #1
 800647a:	e08c      	b.n	8006596 <_printf_i+0x1be>
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006482:	6011      	str	r1, [r2, #0]
 8006484:	bf18      	it	ne
 8006486:	b21b      	sxthne	r3, r3
 8006488:	e7cf      	b.n	800642a <_printf_i+0x52>
 800648a:	6813      	ldr	r3, [r2, #0]
 800648c:	6825      	ldr	r5, [r4, #0]
 800648e:	1d18      	adds	r0, r3, #4
 8006490:	6010      	str	r0, [r2, #0]
 8006492:	0628      	lsls	r0, r5, #24
 8006494:	d501      	bpl.n	800649a <_printf_i+0xc2>
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	e002      	b.n	80064a0 <_printf_i+0xc8>
 800649a:	0668      	lsls	r0, r5, #25
 800649c:	d5fb      	bpl.n	8006496 <_printf_i+0xbe>
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	296f      	cmp	r1, #111	; 0x6f
 80064a2:	bf14      	ite	ne
 80064a4:	220a      	movne	r2, #10
 80064a6:	2208      	moveq	r2, #8
 80064a8:	4852      	ldr	r0, [pc, #328]	; (80065f4 <_printf_i+0x21c>)
 80064aa:	2100      	movs	r1, #0
 80064ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064b0:	6865      	ldr	r5, [r4, #4]
 80064b2:	2d00      	cmp	r5, #0
 80064b4:	60a5      	str	r5, [r4, #8]
 80064b6:	f2c0 8095 	blt.w	80065e4 <_printf_i+0x20c>
 80064ba:	6821      	ldr	r1, [r4, #0]
 80064bc:	f021 0104 	bic.w	r1, r1, #4
 80064c0:	6021      	str	r1, [r4, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d13d      	bne.n	8006542 <_printf_i+0x16a>
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	f040 808e 	bne.w	80065e8 <_printf_i+0x210>
 80064cc:	4665      	mov	r5, ip
 80064ce:	2a08      	cmp	r2, #8
 80064d0:	d10b      	bne.n	80064ea <_printf_i+0x112>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	07db      	lsls	r3, r3, #31
 80064d6:	d508      	bpl.n	80064ea <_printf_i+0x112>
 80064d8:	6923      	ldr	r3, [r4, #16]
 80064da:	6862      	ldr	r2, [r4, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	bfde      	ittt	le
 80064e0:	2330      	movle	r3, #48	; 0x30
 80064e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064ea:	ebac 0305 	sub.w	r3, ip, r5
 80064ee:	6123      	str	r3, [r4, #16]
 80064f0:	f8cd 8000 	str.w	r8, [sp]
 80064f4:	463b      	mov	r3, r7
 80064f6:	aa03      	add	r2, sp, #12
 80064f8:	4621      	mov	r1, r4
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7ff fef6 	bl	80062ec <_printf_common>
 8006500:	3001      	adds	r0, #1
 8006502:	d14d      	bne.n	80065a0 <_printf_i+0x1c8>
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	b005      	add	sp, #20
 800650a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800650e:	4839      	ldr	r0, [pc, #228]	; (80065f4 <_printf_i+0x21c>)
 8006510:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006514:	6813      	ldr	r3, [r2, #0]
 8006516:	6821      	ldr	r1, [r4, #0]
 8006518:	1d1d      	adds	r5, r3, #4
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6015      	str	r5, [r2, #0]
 800651e:	060a      	lsls	r2, r1, #24
 8006520:	d50b      	bpl.n	800653a <_printf_i+0x162>
 8006522:	07ca      	lsls	r2, r1, #31
 8006524:	bf44      	itt	mi
 8006526:	f041 0120 	orrmi.w	r1, r1, #32
 800652a:	6021      	strmi	r1, [r4, #0]
 800652c:	b91b      	cbnz	r3, 8006536 <_printf_i+0x15e>
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	f022 0220 	bic.w	r2, r2, #32
 8006534:	6022      	str	r2, [r4, #0]
 8006536:	2210      	movs	r2, #16
 8006538:	e7b7      	b.n	80064aa <_printf_i+0xd2>
 800653a:	064d      	lsls	r5, r1, #25
 800653c:	bf48      	it	mi
 800653e:	b29b      	uxthmi	r3, r3
 8006540:	e7ef      	b.n	8006522 <_printf_i+0x14a>
 8006542:	4665      	mov	r5, ip
 8006544:	fbb3 f1f2 	udiv	r1, r3, r2
 8006548:	fb02 3311 	mls	r3, r2, r1, r3
 800654c:	5cc3      	ldrb	r3, [r0, r3]
 800654e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006552:	460b      	mov	r3, r1
 8006554:	2900      	cmp	r1, #0
 8006556:	d1f5      	bne.n	8006544 <_printf_i+0x16c>
 8006558:	e7b9      	b.n	80064ce <_printf_i+0xf6>
 800655a:	6813      	ldr	r3, [r2, #0]
 800655c:	6825      	ldr	r5, [r4, #0]
 800655e:	1d18      	adds	r0, r3, #4
 8006560:	6961      	ldr	r1, [r4, #20]
 8006562:	6010      	str	r0, [r2, #0]
 8006564:	0628      	lsls	r0, r5, #24
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	d501      	bpl.n	800656e <_printf_i+0x196>
 800656a:	6019      	str	r1, [r3, #0]
 800656c:	e002      	b.n	8006574 <_printf_i+0x19c>
 800656e:	066a      	lsls	r2, r5, #25
 8006570:	d5fb      	bpl.n	800656a <_printf_i+0x192>
 8006572:	8019      	strh	r1, [r3, #0]
 8006574:	2300      	movs	r3, #0
 8006576:	4665      	mov	r5, ip
 8006578:	6123      	str	r3, [r4, #16]
 800657a:	e7b9      	b.n	80064f0 <_printf_i+0x118>
 800657c:	6813      	ldr	r3, [r2, #0]
 800657e:	1d19      	adds	r1, r3, #4
 8006580:	6011      	str	r1, [r2, #0]
 8006582:	681d      	ldr	r5, [r3, #0]
 8006584:	6862      	ldr	r2, [r4, #4]
 8006586:	2100      	movs	r1, #0
 8006588:	4628      	mov	r0, r5
 800658a:	f002 fa9b 	bl	8008ac4 <memchr>
 800658e:	b108      	cbz	r0, 8006594 <_printf_i+0x1bc>
 8006590:	1b40      	subs	r0, r0, r5
 8006592:	6060      	str	r0, [r4, #4]
 8006594:	6863      	ldr	r3, [r4, #4]
 8006596:	6123      	str	r3, [r4, #16]
 8006598:	2300      	movs	r3, #0
 800659a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800659e:	e7a7      	b.n	80064f0 <_printf_i+0x118>
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	462a      	mov	r2, r5
 80065a4:	4639      	mov	r1, r7
 80065a6:	4630      	mov	r0, r6
 80065a8:	47c0      	blx	r8
 80065aa:	3001      	adds	r0, #1
 80065ac:	d0aa      	beq.n	8006504 <_printf_i+0x12c>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	079b      	lsls	r3, r3, #30
 80065b2:	d413      	bmi.n	80065dc <_printf_i+0x204>
 80065b4:	68e0      	ldr	r0, [r4, #12]
 80065b6:	9b03      	ldr	r3, [sp, #12]
 80065b8:	4298      	cmp	r0, r3
 80065ba:	bfb8      	it	lt
 80065bc:	4618      	movlt	r0, r3
 80065be:	e7a3      	b.n	8006508 <_printf_i+0x130>
 80065c0:	2301      	movs	r3, #1
 80065c2:	464a      	mov	r2, r9
 80065c4:	4639      	mov	r1, r7
 80065c6:	4630      	mov	r0, r6
 80065c8:	47c0      	blx	r8
 80065ca:	3001      	adds	r0, #1
 80065cc:	d09a      	beq.n	8006504 <_printf_i+0x12c>
 80065ce:	3501      	adds	r5, #1
 80065d0:	68e3      	ldr	r3, [r4, #12]
 80065d2:	9a03      	ldr	r2, [sp, #12]
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	42ab      	cmp	r3, r5
 80065d8:	dcf2      	bgt.n	80065c0 <_printf_i+0x1e8>
 80065da:	e7eb      	b.n	80065b4 <_printf_i+0x1dc>
 80065dc:	2500      	movs	r5, #0
 80065de:	f104 0919 	add.w	r9, r4, #25
 80065e2:	e7f5      	b.n	80065d0 <_printf_i+0x1f8>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1ac      	bne.n	8006542 <_printf_i+0x16a>
 80065e8:	7803      	ldrb	r3, [r0, #0]
 80065ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065f2:	e76c      	b.n	80064ce <_printf_i+0xf6>
 80065f4:	0800973e 	.word	0x0800973e
 80065f8:	0800974f 	.word	0x0800974f

080065fc <_scanf_float>:
 80065fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	469a      	mov	sl, r3
 8006602:	688b      	ldr	r3, [r1, #8]
 8006604:	4616      	mov	r6, r2
 8006606:	1e5a      	subs	r2, r3, #1
 8006608:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800660c:	bf88      	it	hi
 800660e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006612:	b087      	sub	sp, #28
 8006614:	bf85      	ittet	hi
 8006616:	189b      	addhi	r3, r3, r2
 8006618:	9301      	strhi	r3, [sp, #4]
 800661a:	2300      	movls	r3, #0
 800661c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006620:	4688      	mov	r8, r1
 8006622:	f04f 0b00 	mov.w	fp, #0
 8006626:	bf8c      	ite	hi
 8006628:	608b      	strhi	r3, [r1, #8]
 800662a:	9301      	strls	r3, [sp, #4]
 800662c:	680b      	ldr	r3, [r1, #0]
 800662e:	4607      	mov	r7, r0
 8006630:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006634:	f848 3b1c 	str.w	r3, [r8], #28
 8006638:	460c      	mov	r4, r1
 800663a:	4645      	mov	r5, r8
 800663c:	465a      	mov	r2, fp
 800663e:	46d9      	mov	r9, fp
 8006640:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006644:	f8cd b008 	str.w	fp, [sp, #8]
 8006648:	68a1      	ldr	r1, [r4, #8]
 800664a:	b181      	cbz	r1, 800666e <_scanf_float+0x72>
 800664c:	6833      	ldr	r3, [r6, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b49      	cmp	r3, #73	; 0x49
 8006652:	d071      	beq.n	8006738 <_scanf_float+0x13c>
 8006654:	d84d      	bhi.n	80066f2 <_scanf_float+0xf6>
 8006656:	2b39      	cmp	r3, #57	; 0x39
 8006658:	d840      	bhi.n	80066dc <_scanf_float+0xe0>
 800665a:	2b31      	cmp	r3, #49	; 0x31
 800665c:	f080 8088 	bcs.w	8006770 <_scanf_float+0x174>
 8006660:	2b2d      	cmp	r3, #45	; 0x2d
 8006662:	f000 8090 	beq.w	8006786 <_scanf_float+0x18a>
 8006666:	d815      	bhi.n	8006694 <_scanf_float+0x98>
 8006668:	2b2b      	cmp	r3, #43	; 0x2b
 800666a:	f000 808c 	beq.w	8006786 <_scanf_float+0x18a>
 800666e:	f1b9 0f00 	cmp.w	r9, #0
 8006672:	d003      	beq.n	800667c <_scanf_float+0x80>
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	3a01      	subs	r2, #1
 800667e:	2a01      	cmp	r2, #1
 8006680:	f200 80ea 	bhi.w	8006858 <_scanf_float+0x25c>
 8006684:	4545      	cmp	r5, r8
 8006686:	f200 80dc 	bhi.w	8006842 <_scanf_float+0x246>
 800668a:	2601      	movs	r6, #1
 800668c:	4630      	mov	r0, r6
 800668e:	b007      	add	sp, #28
 8006690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006694:	2b2e      	cmp	r3, #46	; 0x2e
 8006696:	f000 809f 	beq.w	80067d8 <_scanf_float+0x1dc>
 800669a:	2b30      	cmp	r3, #48	; 0x30
 800669c:	d1e7      	bne.n	800666e <_scanf_float+0x72>
 800669e:	6820      	ldr	r0, [r4, #0]
 80066a0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80066a4:	d064      	beq.n	8006770 <_scanf_float+0x174>
 80066a6:	9b01      	ldr	r3, [sp, #4]
 80066a8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80066ac:	6020      	str	r0, [r4, #0]
 80066ae:	f109 0901 	add.w	r9, r9, #1
 80066b2:	b11b      	cbz	r3, 80066bc <_scanf_float+0xc0>
 80066b4:	3b01      	subs	r3, #1
 80066b6:	3101      	adds	r1, #1
 80066b8:	9301      	str	r3, [sp, #4]
 80066ba:	60a1      	str	r1, [r4, #8]
 80066bc:	68a3      	ldr	r3, [r4, #8]
 80066be:	3b01      	subs	r3, #1
 80066c0:	60a3      	str	r3, [r4, #8]
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	3301      	adds	r3, #1
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	6873      	ldr	r3, [r6, #4]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	6073      	str	r3, [r6, #4]
 80066d0:	f340 80ac 	ble.w	800682c <_scanf_float+0x230>
 80066d4:	6833      	ldr	r3, [r6, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	6033      	str	r3, [r6, #0]
 80066da:	e7b5      	b.n	8006648 <_scanf_float+0x4c>
 80066dc:	2b45      	cmp	r3, #69	; 0x45
 80066de:	f000 8085 	beq.w	80067ec <_scanf_float+0x1f0>
 80066e2:	2b46      	cmp	r3, #70	; 0x46
 80066e4:	d06a      	beq.n	80067bc <_scanf_float+0x1c0>
 80066e6:	2b41      	cmp	r3, #65	; 0x41
 80066e8:	d1c1      	bne.n	800666e <_scanf_float+0x72>
 80066ea:	2a01      	cmp	r2, #1
 80066ec:	d1bf      	bne.n	800666e <_scanf_float+0x72>
 80066ee:	2202      	movs	r2, #2
 80066f0:	e046      	b.n	8006780 <_scanf_float+0x184>
 80066f2:	2b65      	cmp	r3, #101	; 0x65
 80066f4:	d07a      	beq.n	80067ec <_scanf_float+0x1f0>
 80066f6:	d818      	bhi.n	800672a <_scanf_float+0x12e>
 80066f8:	2b54      	cmp	r3, #84	; 0x54
 80066fa:	d066      	beq.n	80067ca <_scanf_float+0x1ce>
 80066fc:	d811      	bhi.n	8006722 <_scanf_float+0x126>
 80066fe:	2b4e      	cmp	r3, #78	; 0x4e
 8006700:	d1b5      	bne.n	800666e <_scanf_float+0x72>
 8006702:	2a00      	cmp	r2, #0
 8006704:	d146      	bne.n	8006794 <_scanf_float+0x198>
 8006706:	f1b9 0f00 	cmp.w	r9, #0
 800670a:	d145      	bne.n	8006798 <_scanf_float+0x19c>
 800670c:	6821      	ldr	r1, [r4, #0]
 800670e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006712:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006716:	d13f      	bne.n	8006798 <_scanf_float+0x19c>
 8006718:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800671c:	6021      	str	r1, [r4, #0]
 800671e:	2201      	movs	r2, #1
 8006720:	e02e      	b.n	8006780 <_scanf_float+0x184>
 8006722:	2b59      	cmp	r3, #89	; 0x59
 8006724:	d01e      	beq.n	8006764 <_scanf_float+0x168>
 8006726:	2b61      	cmp	r3, #97	; 0x61
 8006728:	e7de      	b.n	80066e8 <_scanf_float+0xec>
 800672a:	2b6e      	cmp	r3, #110	; 0x6e
 800672c:	d0e9      	beq.n	8006702 <_scanf_float+0x106>
 800672e:	d815      	bhi.n	800675c <_scanf_float+0x160>
 8006730:	2b66      	cmp	r3, #102	; 0x66
 8006732:	d043      	beq.n	80067bc <_scanf_float+0x1c0>
 8006734:	2b69      	cmp	r3, #105	; 0x69
 8006736:	d19a      	bne.n	800666e <_scanf_float+0x72>
 8006738:	f1bb 0f00 	cmp.w	fp, #0
 800673c:	d138      	bne.n	80067b0 <_scanf_float+0x1b4>
 800673e:	f1b9 0f00 	cmp.w	r9, #0
 8006742:	d197      	bne.n	8006674 <_scanf_float+0x78>
 8006744:	6821      	ldr	r1, [r4, #0]
 8006746:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800674a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800674e:	d195      	bne.n	800667c <_scanf_float+0x80>
 8006750:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006754:	6021      	str	r1, [r4, #0]
 8006756:	f04f 0b01 	mov.w	fp, #1
 800675a:	e011      	b.n	8006780 <_scanf_float+0x184>
 800675c:	2b74      	cmp	r3, #116	; 0x74
 800675e:	d034      	beq.n	80067ca <_scanf_float+0x1ce>
 8006760:	2b79      	cmp	r3, #121	; 0x79
 8006762:	d184      	bne.n	800666e <_scanf_float+0x72>
 8006764:	f1bb 0f07 	cmp.w	fp, #7
 8006768:	d181      	bne.n	800666e <_scanf_float+0x72>
 800676a:	f04f 0b08 	mov.w	fp, #8
 800676e:	e007      	b.n	8006780 <_scanf_float+0x184>
 8006770:	eb12 0f0b 	cmn.w	r2, fp
 8006774:	f47f af7b 	bne.w	800666e <_scanf_float+0x72>
 8006778:	6821      	ldr	r1, [r4, #0]
 800677a:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800677e:	6021      	str	r1, [r4, #0]
 8006780:	702b      	strb	r3, [r5, #0]
 8006782:	3501      	adds	r5, #1
 8006784:	e79a      	b.n	80066bc <_scanf_float+0xc0>
 8006786:	6821      	ldr	r1, [r4, #0]
 8006788:	0608      	lsls	r0, r1, #24
 800678a:	f57f af70 	bpl.w	800666e <_scanf_float+0x72>
 800678e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006792:	e7f4      	b.n	800677e <_scanf_float+0x182>
 8006794:	2a02      	cmp	r2, #2
 8006796:	d047      	beq.n	8006828 <_scanf_float+0x22c>
 8006798:	f1bb 0f01 	cmp.w	fp, #1
 800679c:	d003      	beq.n	80067a6 <_scanf_float+0x1aa>
 800679e:	f1bb 0f04 	cmp.w	fp, #4
 80067a2:	f47f af64 	bne.w	800666e <_scanf_float+0x72>
 80067a6:	f10b 0b01 	add.w	fp, fp, #1
 80067aa:	fa5f fb8b 	uxtb.w	fp, fp
 80067ae:	e7e7      	b.n	8006780 <_scanf_float+0x184>
 80067b0:	f1bb 0f03 	cmp.w	fp, #3
 80067b4:	d0f7      	beq.n	80067a6 <_scanf_float+0x1aa>
 80067b6:	f1bb 0f05 	cmp.w	fp, #5
 80067ba:	e7f2      	b.n	80067a2 <_scanf_float+0x1a6>
 80067bc:	f1bb 0f02 	cmp.w	fp, #2
 80067c0:	f47f af55 	bne.w	800666e <_scanf_float+0x72>
 80067c4:	f04f 0b03 	mov.w	fp, #3
 80067c8:	e7da      	b.n	8006780 <_scanf_float+0x184>
 80067ca:	f1bb 0f06 	cmp.w	fp, #6
 80067ce:	f47f af4e 	bne.w	800666e <_scanf_float+0x72>
 80067d2:	f04f 0b07 	mov.w	fp, #7
 80067d6:	e7d3      	b.n	8006780 <_scanf_float+0x184>
 80067d8:	6821      	ldr	r1, [r4, #0]
 80067da:	0588      	lsls	r0, r1, #22
 80067dc:	f57f af47 	bpl.w	800666e <_scanf_float+0x72>
 80067e0:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80067e4:	6021      	str	r1, [r4, #0]
 80067e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80067ea:	e7c9      	b.n	8006780 <_scanf_float+0x184>
 80067ec:	6821      	ldr	r1, [r4, #0]
 80067ee:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80067f2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80067f6:	d006      	beq.n	8006806 <_scanf_float+0x20a>
 80067f8:	0548      	lsls	r0, r1, #21
 80067fa:	f57f af38 	bpl.w	800666e <_scanf_float+0x72>
 80067fe:	f1b9 0f00 	cmp.w	r9, #0
 8006802:	f43f af3b 	beq.w	800667c <_scanf_float+0x80>
 8006806:	0588      	lsls	r0, r1, #22
 8006808:	bf58      	it	pl
 800680a:	9802      	ldrpl	r0, [sp, #8]
 800680c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006810:	bf58      	it	pl
 8006812:	eba9 0000 	subpl.w	r0, r9, r0
 8006816:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800681a:	bf58      	it	pl
 800681c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006820:	6021      	str	r1, [r4, #0]
 8006822:	f04f 0900 	mov.w	r9, #0
 8006826:	e7ab      	b.n	8006780 <_scanf_float+0x184>
 8006828:	2203      	movs	r2, #3
 800682a:	e7a9      	b.n	8006780 <_scanf_float+0x184>
 800682c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006830:	4631      	mov	r1, r6
 8006832:	4638      	mov	r0, r7
 8006834:	9205      	str	r2, [sp, #20]
 8006836:	4798      	blx	r3
 8006838:	9a05      	ldr	r2, [sp, #20]
 800683a:	2800      	cmp	r0, #0
 800683c:	f43f af04 	beq.w	8006648 <_scanf_float+0x4c>
 8006840:	e715      	b.n	800666e <_scanf_float+0x72>
 8006842:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006846:	4632      	mov	r2, r6
 8006848:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800684c:	4638      	mov	r0, r7
 800684e:	4798      	blx	r3
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	3b01      	subs	r3, #1
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	e715      	b.n	8006684 <_scanf_float+0x88>
 8006858:	f10b 33ff 	add.w	r3, fp, #4294967295
 800685c:	2b06      	cmp	r3, #6
 800685e:	d80a      	bhi.n	8006876 <_scanf_float+0x27a>
 8006860:	f1bb 0f02 	cmp.w	fp, #2
 8006864:	d967      	bls.n	8006936 <_scanf_float+0x33a>
 8006866:	f1ab 0b03 	sub.w	fp, fp, #3
 800686a:	fa5f fb8b 	uxtb.w	fp, fp
 800686e:	eba5 0b0b 	sub.w	fp, r5, fp
 8006872:	455d      	cmp	r5, fp
 8006874:	d14a      	bne.n	800690c <_scanf_float+0x310>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	05da      	lsls	r2, r3, #23
 800687a:	d51f      	bpl.n	80068bc <_scanf_float+0x2c0>
 800687c:	055b      	lsls	r3, r3, #21
 800687e:	d467      	bmi.n	8006950 <_scanf_float+0x354>
 8006880:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	2965      	cmp	r1, #101	; 0x65
 8006888:	f103 33ff 	add.w	r3, r3, #4294967295
 800688c:	f105 3bff 	add.w	fp, r5, #4294967295
 8006890:	6123      	str	r3, [r4, #16]
 8006892:	d00d      	beq.n	80068b0 <_scanf_float+0x2b4>
 8006894:	2945      	cmp	r1, #69	; 0x45
 8006896:	d00b      	beq.n	80068b0 <_scanf_float+0x2b4>
 8006898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800689c:	4632      	mov	r2, r6
 800689e:	4638      	mov	r0, r7
 80068a0:	4798      	blx	r3
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	f1a5 0b02 	sub.w	fp, r5, #2
 80068ae:	6123      	str	r3, [r4, #16]
 80068b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068b4:	4632      	mov	r2, r6
 80068b6:	4638      	mov	r0, r7
 80068b8:	4798      	blx	r3
 80068ba:	465d      	mov	r5, fp
 80068bc:	6826      	ldr	r6, [r4, #0]
 80068be:	f016 0610 	ands.w	r6, r6, #16
 80068c2:	d176      	bne.n	80069b2 <_scanf_float+0x3b6>
 80068c4:	702e      	strb	r6, [r5, #0]
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d0:	d141      	bne.n	8006956 <_scanf_float+0x35a>
 80068d2:	9b02      	ldr	r3, [sp, #8]
 80068d4:	eba9 0303 	sub.w	r3, r9, r3
 80068d8:	425a      	negs	r2, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d148      	bne.n	8006970 <_scanf_float+0x374>
 80068de:	4641      	mov	r1, r8
 80068e0:	2200      	movs	r2, #0
 80068e2:	4638      	mov	r0, r7
 80068e4:	f000 fec0 	bl	8007668 <_strtod_r>
 80068e8:	6825      	ldr	r5, [r4, #0]
 80068ea:	4680      	mov	r8, r0
 80068ec:	f015 0f02 	tst.w	r5, #2
 80068f0:	4689      	mov	r9, r1
 80068f2:	f8da 3000 	ldr.w	r3, [sl]
 80068f6:	d046      	beq.n	8006986 <_scanf_float+0x38a>
 80068f8:	1d1a      	adds	r2, r3, #4
 80068fa:	f8ca 2000 	str.w	r2, [sl]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	e9c3 8900 	strd	r8, r9, [r3]
 8006904:	68e3      	ldr	r3, [r4, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	60e3      	str	r3, [r4, #12]
 800690a:	e6bf      	b.n	800668c <_scanf_float+0x90>
 800690c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006910:	4632      	mov	r2, r6
 8006912:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006916:	4638      	mov	r0, r7
 8006918:	4798      	blx	r3
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	3b01      	subs	r3, #1
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	e7a7      	b.n	8006872 <_scanf_float+0x276>
 8006922:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006926:	4632      	mov	r2, r6
 8006928:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800692c:	4638      	mov	r0, r7
 800692e:	4798      	blx	r3
 8006930:	6923      	ldr	r3, [r4, #16]
 8006932:	3b01      	subs	r3, #1
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	4545      	cmp	r5, r8
 8006938:	d8f3      	bhi.n	8006922 <_scanf_float+0x326>
 800693a:	e6a6      	b.n	800668a <_scanf_float+0x8e>
 800693c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006940:	4632      	mov	r2, r6
 8006942:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006946:	4638      	mov	r0, r7
 8006948:	4798      	blx	r3
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	3b01      	subs	r3, #1
 800694e:	6123      	str	r3, [r4, #16]
 8006950:	4545      	cmp	r5, r8
 8006952:	d8f3      	bhi.n	800693c <_scanf_float+0x340>
 8006954:	e699      	b.n	800668a <_scanf_float+0x8e>
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0c0      	beq.n	80068de <_scanf_float+0x2e2>
 800695c:	9904      	ldr	r1, [sp, #16]
 800695e:	230a      	movs	r3, #10
 8006960:	4632      	mov	r2, r6
 8006962:	3101      	adds	r1, #1
 8006964:	4638      	mov	r0, r7
 8006966:	f000 ff0b 	bl	8007780 <_strtol_r>
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	9d04      	ldr	r5, [sp, #16]
 800696e:	1ac2      	subs	r2, r0, r3
 8006970:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006974:	429d      	cmp	r5, r3
 8006976:	bf28      	it	cs
 8006978:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800697c:	490e      	ldr	r1, [pc, #56]	; (80069b8 <_scanf_float+0x3bc>)
 800697e:	4628      	mov	r0, r5
 8006980:	f000 f830 	bl	80069e4 <siprintf>
 8006984:	e7ab      	b.n	80068de <_scanf_float+0x2e2>
 8006986:	1d1f      	adds	r7, r3, #4
 8006988:	f015 0504 	ands.w	r5, r5, #4
 800698c:	f8ca 7000 	str.w	r7, [sl]
 8006990:	d1b5      	bne.n	80068fe <_scanf_float+0x302>
 8006992:	681f      	ldr	r7, [r3, #0]
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	f7fa f838 	bl	8000a0c <__aeabi_dcmpun>
 800699c:	b120      	cbz	r0, 80069a8 <_scanf_float+0x3ac>
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f81c 	bl	80069dc <nanf>
 80069a4:	6038      	str	r0, [r7, #0]
 80069a6:	e7ad      	b.n	8006904 <_scanf_float+0x308>
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	f7fa f88c 	bl	8000ac8 <__aeabi_d2f>
 80069b0:	e7f8      	b.n	80069a4 <_scanf_float+0x3a8>
 80069b2:	2600      	movs	r6, #0
 80069b4:	e66a      	b.n	800668c <_scanf_float+0x90>
 80069b6:	bf00      	nop
 80069b8:	08009760 	.word	0x08009760

080069bc <_sbrk_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	2300      	movs	r3, #0
 80069c0:	4c05      	ldr	r4, [pc, #20]	; (80069d8 <_sbrk_r+0x1c>)
 80069c2:	4605      	mov	r5, r0
 80069c4:	4608      	mov	r0, r1
 80069c6:	6023      	str	r3, [r4, #0]
 80069c8:	f7fa fffa 	bl	80019c0 <_sbrk>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d102      	bne.n	80069d6 <_sbrk_r+0x1a>
 80069d0:	6823      	ldr	r3, [r4, #0]
 80069d2:	b103      	cbz	r3, 80069d6 <_sbrk_r+0x1a>
 80069d4:	602b      	str	r3, [r5, #0]
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	20001314 	.word	0x20001314

080069dc <nanf>:
 80069dc:	4800      	ldr	r0, [pc, #0]	; (80069e0 <nanf+0x4>)
 80069de:	4770      	bx	lr
 80069e0:	7fc00000 	.word	0x7fc00000

080069e4 <siprintf>:
 80069e4:	b40e      	push	{r1, r2, r3}
 80069e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069ea:	b500      	push	{lr}
 80069ec:	b09c      	sub	sp, #112	; 0x70
 80069ee:	ab1d      	add	r3, sp, #116	; 0x74
 80069f0:	9002      	str	r0, [sp, #8]
 80069f2:	9006      	str	r0, [sp, #24]
 80069f4:	9107      	str	r1, [sp, #28]
 80069f6:	9104      	str	r1, [sp, #16]
 80069f8:	4808      	ldr	r0, [pc, #32]	; (8006a1c <siprintf+0x38>)
 80069fa:	4909      	ldr	r1, [pc, #36]	; (8006a20 <siprintf+0x3c>)
 80069fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a00:	9105      	str	r1, [sp, #20]
 8006a02:	6800      	ldr	r0, [r0, #0]
 8006a04:	a902      	add	r1, sp, #8
 8006a06:	9301      	str	r3, [sp, #4]
 8006a08:	f002 fccc 	bl	80093a4 <_svfiprintf_r>
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	9b02      	ldr	r3, [sp, #8]
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	b01c      	add	sp, #112	; 0x70
 8006a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a18:	b003      	add	sp, #12
 8006a1a:	4770      	bx	lr
 8006a1c:	20000010 	.word	0x20000010
 8006a20:	ffff0208 	.word	0xffff0208

08006a24 <sulp>:
 8006a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a28:	460f      	mov	r7, r1
 8006a2a:	4690      	mov	r8, r2
 8006a2c:	f002 fb24 	bl	8009078 <__ulp>
 8006a30:	4604      	mov	r4, r0
 8006a32:	460d      	mov	r5, r1
 8006a34:	f1b8 0f00 	cmp.w	r8, #0
 8006a38:	d011      	beq.n	8006a5e <sulp+0x3a>
 8006a3a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006a3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	dd0b      	ble.n	8006a5e <sulp+0x3a>
 8006a46:	2400      	movs	r4, #0
 8006a48:	051b      	lsls	r3, r3, #20
 8006a4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a52:	4622      	mov	r2, r4
 8006a54:	462b      	mov	r3, r5
 8006a56:	f7f9 fd3f 	bl	80004d8 <__aeabi_dmul>
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	460d      	mov	r5, r1
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4629      	mov	r1, r5
 8006a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006a68 <_strtod_l>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	461f      	mov	r7, r3
 8006a6e:	2300      	movs	r3, #0
 8006a70:	b0a1      	sub	sp, #132	; 0x84
 8006a72:	4683      	mov	fp, r0
 8006a74:	4638      	mov	r0, r7
 8006a76:	460e      	mov	r6, r1
 8006a78:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a7a:	931c      	str	r3, [sp, #112]	; 0x70
 8006a7c:	f001 ffff 	bl	8008a7e <__localeconv_l>
 8006a80:	4680      	mov	r8, r0
 8006a82:	6800      	ldr	r0, [r0, #0]
 8006a84:	f7f9 fb64 	bl	8000150 <strlen>
 8006a88:	f04f 0900 	mov.w	r9, #0
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	f04f 0a00 	mov.w	sl, #0
 8006a92:	961b      	str	r6, [sp, #108]	; 0x6c
 8006a94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	2a0d      	cmp	r2, #13
 8006a9a:	d832      	bhi.n	8006b02 <_strtod_l+0x9a>
 8006a9c:	2a09      	cmp	r2, #9
 8006a9e:	d236      	bcs.n	8006b0e <_strtod_l+0xa6>
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	d03e      	beq.n	8006b22 <_strtod_l+0xba>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	930d      	str	r3, [sp, #52]	; 0x34
 8006aa8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006aaa:	782b      	ldrb	r3, [r5, #0]
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	f040 80ac 	bne.w	8006c0a <_strtod_l+0x1a2>
 8006ab2:	786b      	ldrb	r3, [r5, #1]
 8006ab4:	2b58      	cmp	r3, #88	; 0x58
 8006ab6:	d001      	beq.n	8006abc <_strtod_l+0x54>
 8006ab8:	2b78      	cmp	r3, #120	; 0x78
 8006aba:	d167      	bne.n	8006b8c <_strtod_l+0x124>
 8006abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006abe:	9702      	str	r7, [sp, #8]
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	ab1c      	add	r3, sp, #112	; 0x70
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	4a89      	ldr	r2, [pc, #548]	; (8006cec <_strtod_l+0x284>)
 8006ac8:	ab1d      	add	r3, sp, #116	; 0x74
 8006aca:	a91b      	add	r1, sp, #108	; 0x6c
 8006acc:	4658      	mov	r0, fp
 8006ace:	f001 fcfb 	bl	80084c8 <__gethex>
 8006ad2:	f010 0407 	ands.w	r4, r0, #7
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	d005      	beq.n	8006ae6 <_strtod_l+0x7e>
 8006ada:	2c06      	cmp	r4, #6
 8006adc:	d12b      	bne.n	8006b36 <_strtod_l+0xce>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	951b      	str	r5, [sp, #108]	; 0x6c
 8006ae4:	930d      	str	r3, [sp, #52]	; 0x34
 8006ae6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f040 85a6 	bne.w	800763a <_strtod_l+0xbd2>
 8006aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006af0:	b1e3      	cbz	r3, 8006b2c <_strtod_l+0xc4>
 8006af2:	464a      	mov	r2, r9
 8006af4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006af8:	4610      	mov	r0, r2
 8006afa:	4619      	mov	r1, r3
 8006afc:	b021      	add	sp, #132	; 0x84
 8006afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b02:	2a2b      	cmp	r2, #43	; 0x2b
 8006b04:	d015      	beq.n	8006b32 <_strtod_l+0xca>
 8006b06:	2a2d      	cmp	r2, #45	; 0x2d
 8006b08:	d004      	beq.n	8006b14 <_strtod_l+0xac>
 8006b0a:	2a20      	cmp	r2, #32
 8006b0c:	d1ca      	bne.n	8006aa4 <_strtod_l+0x3c>
 8006b0e:	3301      	adds	r3, #1
 8006b10:	931b      	str	r3, [sp, #108]	; 0x6c
 8006b12:	e7bf      	b.n	8006a94 <_strtod_l+0x2c>
 8006b14:	2201      	movs	r2, #1
 8006b16:	920d      	str	r2, [sp, #52]	; 0x34
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	921b      	str	r2, [sp, #108]	; 0x6c
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1c2      	bne.n	8006aa8 <_strtod_l+0x40>
 8006b22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b24:	961b      	str	r6, [sp, #108]	; 0x6c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f040 8585 	bne.w	8007636 <_strtod_l+0xbce>
 8006b2c:	464a      	mov	r2, r9
 8006b2e:	4653      	mov	r3, sl
 8006b30:	e7e2      	b.n	8006af8 <_strtod_l+0x90>
 8006b32:	2200      	movs	r2, #0
 8006b34:	e7ef      	b.n	8006b16 <_strtod_l+0xae>
 8006b36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b38:	b13a      	cbz	r2, 8006b4a <_strtod_l+0xe2>
 8006b3a:	2135      	movs	r1, #53	; 0x35
 8006b3c:	a81e      	add	r0, sp, #120	; 0x78
 8006b3e:	f002 fb8e 	bl	800925e <__copybits>
 8006b42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b44:	4658      	mov	r0, fp
 8006b46:	f002 f801 	bl	8008b4c <_Bfree>
 8006b4a:	3c01      	subs	r4, #1
 8006b4c:	2c04      	cmp	r4, #4
 8006b4e:	d806      	bhi.n	8006b5e <_strtod_l+0xf6>
 8006b50:	e8df f004 	tbb	[pc, r4]
 8006b54:	1714030a 	.word	0x1714030a
 8006b58:	0a          	.byte	0x0a
 8006b59:	00          	.byte	0x00
 8006b5a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8006b5e:	0731      	lsls	r1, r6, #28
 8006b60:	d5c1      	bpl.n	8006ae6 <_strtod_l+0x7e>
 8006b62:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006b66:	e7be      	b.n	8006ae6 <_strtod_l+0x7e>
 8006b68:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006b6a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8006b6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b76:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8006b7a:	e7f0      	b.n	8006b5e <_strtod_l+0xf6>
 8006b7c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006cf0 <_strtod_l+0x288>
 8006b80:	e7ed      	b.n	8006b5e <_strtod_l+0xf6>
 8006b82:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006b86:	f04f 39ff 	mov.w	r9, #4294967295
 8006b8a:	e7e8      	b.n	8006b5e <_strtod_l+0xf6>
 8006b8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	921b      	str	r2, [sp, #108]	; 0x6c
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b30      	cmp	r3, #48	; 0x30
 8006b96:	d0f9      	beq.n	8006b8c <_strtod_l+0x124>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0a4      	beq.n	8006ae6 <_strtod_l+0x7e>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	2500      	movs	r5, #0
 8006ba0:	220a      	movs	r2, #10
 8006ba2:	9307      	str	r3, [sp, #28]
 8006ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ba6:	9506      	str	r5, [sp, #24]
 8006ba8:	9308      	str	r3, [sp, #32]
 8006baa:	9504      	str	r5, [sp, #16]
 8006bac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006bae:	7807      	ldrb	r7, [r0, #0]
 8006bb0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006bb4:	b2d9      	uxtb	r1, r3
 8006bb6:	2909      	cmp	r1, #9
 8006bb8:	d929      	bls.n	8006c0e <_strtod_l+0x1a6>
 8006bba:	4622      	mov	r2, r4
 8006bbc:	f8d8 1000 	ldr.w	r1, [r8]
 8006bc0:	f002 fce8 	bl	8009594 <strncmp>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d031      	beq.n	8006c2c <_strtod_l+0x1c4>
 8006bc8:	2000      	movs	r0, #0
 8006bca:	463b      	mov	r3, r7
 8006bcc:	4602      	mov	r2, r0
 8006bce:	9c04      	ldr	r4, [sp, #16]
 8006bd0:	9005      	str	r0, [sp, #20]
 8006bd2:	2b65      	cmp	r3, #101	; 0x65
 8006bd4:	d001      	beq.n	8006bda <_strtod_l+0x172>
 8006bd6:	2b45      	cmp	r3, #69	; 0x45
 8006bd8:	d114      	bne.n	8006c04 <_strtod_l+0x19c>
 8006bda:	b924      	cbnz	r4, 8006be6 <_strtod_l+0x17e>
 8006bdc:	b910      	cbnz	r0, 8006be4 <_strtod_l+0x17c>
 8006bde:	9b07      	ldr	r3, [sp, #28]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d09e      	beq.n	8006b22 <_strtod_l+0xba>
 8006be4:	2400      	movs	r4, #0
 8006be6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006be8:	1c73      	adds	r3, r6, #1
 8006bea:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bec:	7873      	ldrb	r3, [r6, #1]
 8006bee:	2b2b      	cmp	r3, #43	; 0x2b
 8006bf0:	d078      	beq.n	8006ce4 <_strtod_l+0x27c>
 8006bf2:	2b2d      	cmp	r3, #45	; 0x2d
 8006bf4:	d070      	beq.n	8006cd8 <_strtod_l+0x270>
 8006bf6:	f04f 0c00 	mov.w	ip, #0
 8006bfa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006bfe:	2f09      	cmp	r7, #9
 8006c00:	d97c      	bls.n	8006cfc <_strtod_l+0x294>
 8006c02:	961b      	str	r6, [sp, #108]	; 0x6c
 8006c04:	f04f 0e00 	mov.w	lr, #0
 8006c08:	e09a      	b.n	8006d40 <_strtod_l+0x2d8>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e7c7      	b.n	8006b9e <_strtod_l+0x136>
 8006c0e:	9904      	ldr	r1, [sp, #16]
 8006c10:	3001      	adds	r0, #1
 8006c12:	2908      	cmp	r1, #8
 8006c14:	bfd7      	itett	le
 8006c16:	9906      	ldrle	r1, [sp, #24]
 8006c18:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006c1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c20:	9306      	strle	r3, [sp, #24]
 8006c22:	9b04      	ldr	r3, [sp, #16]
 8006c24:	901b      	str	r0, [sp, #108]	; 0x6c
 8006c26:	3301      	adds	r3, #1
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	e7bf      	b.n	8006bac <_strtod_l+0x144>
 8006c2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c2e:	191a      	adds	r2, r3, r4
 8006c30:	921b      	str	r2, [sp, #108]	; 0x6c
 8006c32:	9a04      	ldr	r2, [sp, #16]
 8006c34:	5d1b      	ldrb	r3, [r3, r4]
 8006c36:	2a00      	cmp	r2, #0
 8006c38:	d037      	beq.n	8006caa <_strtod_l+0x242>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	9c04      	ldr	r4, [sp, #16]
 8006c3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006c42:	2909      	cmp	r1, #9
 8006c44:	d913      	bls.n	8006c6e <_strtod_l+0x206>
 8006c46:	2101      	movs	r1, #1
 8006c48:	9105      	str	r1, [sp, #20]
 8006c4a:	e7c2      	b.n	8006bd2 <_strtod_l+0x16a>
 8006c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c4e:	3001      	adds	r0, #1
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	921b      	str	r2, [sp, #108]	; 0x6c
 8006c54:	785b      	ldrb	r3, [r3, #1]
 8006c56:	2b30      	cmp	r3, #48	; 0x30
 8006c58:	d0f8      	beq.n	8006c4c <_strtod_l+0x1e4>
 8006c5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006c5e:	2a08      	cmp	r2, #8
 8006c60:	f200 84f0 	bhi.w	8007644 <_strtod_l+0xbdc>
 8006c64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006c66:	9208      	str	r2, [sp, #32]
 8006c68:	4602      	mov	r2, r0
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006c72:	f100 0101 	add.w	r1, r0, #1
 8006c76:	d012      	beq.n	8006c9e <_strtod_l+0x236>
 8006c78:	440a      	add	r2, r1
 8006c7a:	270a      	movs	r7, #10
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	eb00 0c04 	add.w	ip, r0, r4
 8006c82:	458c      	cmp	ip, r1
 8006c84:	d113      	bne.n	8006cae <_strtod_l+0x246>
 8006c86:	1821      	adds	r1, r4, r0
 8006c88:	2908      	cmp	r1, #8
 8006c8a:	f104 0401 	add.w	r4, r4, #1
 8006c8e:	4404      	add	r4, r0
 8006c90:	dc19      	bgt.n	8006cc6 <_strtod_l+0x25e>
 8006c92:	210a      	movs	r1, #10
 8006c94:	9b06      	ldr	r3, [sp, #24]
 8006c96:	fb01 e303 	mla	r3, r1, r3, lr
 8006c9a:	9306      	str	r3, [sp, #24]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ca0:	1c58      	adds	r0, r3, #1
 8006ca2:	901b      	str	r0, [sp, #108]	; 0x6c
 8006ca4:	785b      	ldrb	r3, [r3, #1]
 8006ca6:	4608      	mov	r0, r1
 8006ca8:	e7c9      	b.n	8006c3e <_strtod_l+0x1d6>
 8006caa:	9804      	ldr	r0, [sp, #16]
 8006cac:	e7d3      	b.n	8006c56 <_strtod_l+0x1ee>
 8006cae:	2908      	cmp	r1, #8
 8006cb0:	f101 0101 	add.w	r1, r1, #1
 8006cb4:	dc03      	bgt.n	8006cbe <_strtod_l+0x256>
 8006cb6:	9b06      	ldr	r3, [sp, #24]
 8006cb8:	437b      	muls	r3, r7
 8006cba:	9306      	str	r3, [sp, #24]
 8006cbc:	e7e1      	b.n	8006c82 <_strtod_l+0x21a>
 8006cbe:	2910      	cmp	r1, #16
 8006cc0:	bfd8      	it	le
 8006cc2:	437d      	mulle	r5, r7
 8006cc4:	e7dd      	b.n	8006c82 <_strtod_l+0x21a>
 8006cc6:	2c10      	cmp	r4, #16
 8006cc8:	bfdc      	itt	le
 8006cca:	210a      	movle	r1, #10
 8006ccc:	fb01 e505 	mlale	r5, r1, r5, lr
 8006cd0:	e7e4      	b.n	8006c9c <_strtod_l+0x234>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	9305      	str	r3, [sp, #20]
 8006cd6:	e781      	b.n	8006bdc <_strtod_l+0x174>
 8006cd8:	f04f 0c01 	mov.w	ip, #1
 8006cdc:	1cb3      	adds	r3, r6, #2
 8006cde:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ce0:	78b3      	ldrb	r3, [r6, #2]
 8006ce2:	e78a      	b.n	8006bfa <_strtod_l+0x192>
 8006ce4:	f04f 0c00 	mov.w	ip, #0
 8006ce8:	e7f8      	b.n	8006cdc <_strtod_l+0x274>
 8006cea:	bf00      	nop
 8006cec:	08009768 	.word	0x08009768
 8006cf0:	7ff00000 	.word	0x7ff00000
 8006cf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cf6:	1c5f      	adds	r7, r3, #1
 8006cf8:	971b      	str	r7, [sp, #108]	; 0x6c
 8006cfa:	785b      	ldrb	r3, [r3, #1]
 8006cfc:	2b30      	cmp	r3, #48	; 0x30
 8006cfe:	d0f9      	beq.n	8006cf4 <_strtod_l+0x28c>
 8006d00:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006d04:	2f08      	cmp	r7, #8
 8006d06:	f63f af7d 	bhi.w	8006c04 <_strtod_l+0x19c>
 8006d0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006d0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d10:	9309      	str	r3, [sp, #36]	; 0x24
 8006d12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d14:	1c5f      	adds	r7, r3, #1
 8006d16:	971b      	str	r7, [sp, #108]	; 0x6c
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006d1e:	f1b8 0f09 	cmp.w	r8, #9
 8006d22:	d937      	bls.n	8006d94 <_strtod_l+0x32c>
 8006d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d26:	1a7f      	subs	r7, r7, r1
 8006d28:	2f08      	cmp	r7, #8
 8006d2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006d2e:	dc37      	bgt.n	8006da0 <_strtod_l+0x338>
 8006d30:	45be      	cmp	lr, r7
 8006d32:	bfa8      	it	ge
 8006d34:	46be      	movge	lr, r7
 8006d36:	f1bc 0f00 	cmp.w	ip, #0
 8006d3a:	d001      	beq.n	8006d40 <_strtod_l+0x2d8>
 8006d3c:	f1ce 0e00 	rsb	lr, lr, #0
 8006d40:	2c00      	cmp	r4, #0
 8006d42:	d151      	bne.n	8006de8 <_strtod_l+0x380>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f47f aece 	bne.w	8006ae6 <_strtod_l+0x7e>
 8006d4a:	9a07      	ldr	r2, [sp, #28]
 8006d4c:	2a00      	cmp	r2, #0
 8006d4e:	f47f aeca 	bne.w	8006ae6 <_strtod_l+0x7e>
 8006d52:	9a05      	ldr	r2, [sp, #20]
 8006d54:	2a00      	cmp	r2, #0
 8006d56:	f47f aee4 	bne.w	8006b22 <_strtod_l+0xba>
 8006d5a:	2b4e      	cmp	r3, #78	; 0x4e
 8006d5c:	d027      	beq.n	8006dae <_strtod_l+0x346>
 8006d5e:	dc21      	bgt.n	8006da4 <_strtod_l+0x33c>
 8006d60:	2b49      	cmp	r3, #73	; 0x49
 8006d62:	f47f aede 	bne.w	8006b22 <_strtod_l+0xba>
 8006d66:	49a4      	ldr	r1, [pc, #656]	; (8006ff8 <_strtod_l+0x590>)
 8006d68:	a81b      	add	r0, sp, #108	; 0x6c
 8006d6a:	f001 fde1 	bl	8008930 <__match>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f43f aed7 	beq.w	8006b22 <_strtod_l+0xba>
 8006d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d76:	49a1      	ldr	r1, [pc, #644]	; (8006ffc <_strtod_l+0x594>)
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	a81b      	add	r0, sp, #108	; 0x6c
 8006d7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d7e:	f001 fdd7 	bl	8008930 <__match>
 8006d82:	b910      	cbnz	r0, 8006d8a <_strtod_l+0x322>
 8006d84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d86:	3301      	adds	r3, #1
 8006d88:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d8a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007010 <_strtod_l+0x5a8>
 8006d8e:	f04f 0900 	mov.w	r9, #0
 8006d92:	e6a8      	b.n	8006ae6 <_strtod_l+0x7e>
 8006d94:	210a      	movs	r1, #10
 8006d96:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006d9a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006d9e:	e7b8      	b.n	8006d12 <_strtod_l+0x2aa>
 8006da0:	46be      	mov	lr, r7
 8006da2:	e7c8      	b.n	8006d36 <_strtod_l+0x2ce>
 8006da4:	2b69      	cmp	r3, #105	; 0x69
 8006da6:	d0de      	beq.n	8006d66 <_strtod_l+0x2fe>
 8006da8:	2b6e      	cmp	r3, #110	; 0x6e
 8006daa:	f47f aeba 	bne.w	8006b22 <_strtod_l+0xba>
 8006dae:	4994      	ldr	r1, [pc, #592]	; (8007000 <_strtod_l+0x598>)
 8006db0:	a81b      	add	r0, sp, #108	; 0x6c
 8006db2:	f001 fdbd 	bl	8008930 <__match>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	f43f aeb3 	beq.w	8006b22 <_strtod_l+0xba>
 8006dbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b28      	cmp	r3, #40	; 0x28
 8006dc2:	d10e      	bne.n	8006de2 <_strtod_l+0x37a>
 8006dc4:	aa1e      	add	r2, sp, #120	; 0x78
 8006dc6:	498f      	ldr	r1, [pc, #572]	; (8007004 <_strtod_l+0x59c>)
 8006dc8:	a81b      	add	r0, sp, #108	; 0x6c
 8006dca:	f001 fdc5 	bl	8008958 <__hexnan>
 8006dce:	2805      	cmp	r0, #5
 8006dd0:	d107      	bne.n	8006de2 <_strtod_l+0x37a>
 8006dd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006dd4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8006dd8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8006ddc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8006de0:	e681      	b.n	8006ae6 <_strtod_l+0x7e>
 8006de2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007018 <_strtod_l+0x5b0>
 8006de6:	e7d2      	b.n	8006d8e <_strtod_l+0x326>
 8006de8:	ebae 0302 	sub.w	r3, lr, r2
 8006dec:	9307      	str	r3, [sp, #28]
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	9806      	ldr	r0, [sp, #24]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bf08      	it	eq
 8006df6:	4623      	moveq	r3, r4
 8006df8:	2c10      	cmp	r4, #16
 8006dfa:	9304      	str	r3, [sp, #16]
 8006dfc:	46a0      	mov	r8, r4
 8006dfe:	bfa8      	it	ge
 8006e00:	f04f 0810 	movge.w	r8, #16
 8006e04:	f7f9 faee 	bl	80003e4 <__aeabi_ui2d>
 8006e08:	2c09      	cmp	r4, #9
 8006e0a:	4681      	mov	r9, r0
 8006e0c:	468a      	mov	sl, r1
 8006e0e:	dc13      	bgt.n	8006e38 <_strtod_l+0x3d0>
 8006e10:	9b07      	ldr	r3, [sp, #28]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f43f ae67 	beq.w	8006ae6 <_strtod_l+0x7e>
 8006e18:	9b07      	ldr	r3, [sp, #28]
 8006e1a:	dd7e      	ble.n	8006f1a <_strtod_l+0x4b2>
 8006e1c:	2b16      	cmp	r3, #22
 8006e1e:	dc65      	bgt.n	8006eec <_strtod_l+0x484>
 8006e20:	4a79      	ldr	r2, [pc, #484]	; (8007008 <_strtod_l+0x5a0>)
 8006e22:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006e26:	464a      	mov	r2, r9
 8006e28:	e9de 0100 	ldrd	r0, r1, [lr]
 8006e2c:	4653      	mov	r3, sl
 8006e2e:	f7f9 fb53 	bl	80004d8 <__aeabi_dmul>
 8006e32:	4681      	mov	r9, r0
 8006e34:	468a      	mov	sl, r1
 8006e36:	e656      	b.n	8006ae6 <_strtod_l+0x7e>
 8006e38:	4b73      	ldr	r3, [pc, #460]	; (8007008 <_strtod_l+0x5a0>)
 8006e3a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006e3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006e42:	f7f9 fb49 	bl	80004d8 <__aeabi_dmul>
 8006e46:	4606      	mov	r6, r0
 8006e48:	4628      	mov	r0, r5
 8006e4a:	460f      	mov	r7, r1
 8006e4c:	f7f9 faca 	bl	80003e4 <__aeabi_ui2d>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4630      	mov	r0, r6
 8006e56:	4639      	mov	r1, r7
 8006e58:	f7f9 f988 	bl	800016c <__adddf3>
 8006e5c:	2c0f      	cmp	r4, #15
 8006e5e:	4681      	mov	r9, r0
 8006e60:	468a      	mov	sl, r1
 8006e62:	ddd5      	ble.n	8006e10 <_strtod_l+0x3a8>
 8006e64:	9b07      	ldr	r3, [sp, #28]
 8006e66:	eba4 0808 	sub.w	r8, r4, r8
 8006e6a:	4498      	add	r8, r3
 8006e6c:	f1b8 0f00 	cmp.w	r8, #0
 8006e70:	f340 809a 	ble.w	8006fa8 <_strtod_l+0x540>
 8006e74:	f018 030f 	ands.w	r3, r8, #15
 8006e78:	d00a      	beq.n	8006e90 <_strtod_l+0x428>
 8006e7a:	4963      	ldr	r1, [pc, #396]	; (8007008 <_strtod_l+0x5a0>)
 8006e7c:	464a      	mov	r2, r9
 8006e7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e86:	4653      	mov	r3, sl
 8006e88:	f7f9 fb26 	bl	80004d8 <__aeabi_dmul>
 8006e8c:	4681      	mov	r9, r0
 8006e8e:	468a      	mov	sl, r1
 8006e90:	f038 080f 	bics.w	r8, r8, #15
 8006e94:	d077      	beq.n	8006f86 <_strtod_l+0x51e>
 8006e96:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006e9a:	dd4b      	ble.n	8006f34 <_strtod_l+0x4cc>
 8006e9c:	f04f 0800 	mov.w	r8, #0
 8006ea0:	f8cd 8010 	str.w	r8, [sp, #16]
 8006ea4:	f8cd 8020 	str.w	r8, [sp, #32]
 8006ea8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006eac:	2322      	movs	r3, #34	; 0x22
 8006eae:	f04f 0900 	mov.w	r9, #0
 8006eb2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007010 <_strtod_l+0x5a8>
 8006eb6:	f8cb 3000 	str.w	r3, [fp]
 8006eba:	9b08      	ldr	r3, [sp, #32]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f43f ae12 	beq.w	8006ae6 <_strtod_l+0x7e>
 8006ec2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ec4:	4658      	mov	r0, fp
 8006ec6:	f001 fe41 	bl	8008b4c <_Bfree>
 8006eca:	9906      	ldr	r1, [sp, #24]
 8006ecc:	4658      	mov	r0, fp
 8006ece:	f001 fe3d 	bl	8008b4c <_Bfree>
 8006ed2:	9904      	ldr	r1, [sp, #16]
 8006ed4:	4658      	mov	r0, fp
 8006ed6:	f001 fe39 	bl	8008b4c <_Bfree>
 8006eda:	9908      	ldr	r1, [sp, #32]
 8006edc:	4658      	mov	r0, fp
 8006ede:	f001 fe35 	bl	8008b4c <_Bfree>
 8006ee2:	4641      	mov	r1, r8
 8006ee4:	4658      	mov	r0, fp
 8006ee6:	f001 fe31 	bl	8008b4c <_Bfree>
 8006eea:	e5fc      	b.n	8006ae6 <_strtod_l+0x7e>
 8006eec:	9a07      	ldr	r2, [sp, #28]
 8006eee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	dbb6      	blt.n	8006e64 <_strtod_l+0x3fc>
 8006ef6:	4d44      	ldr	r5, [pc, #272]	; (8007008 <_strtod_l+0x5a0>)
 8006ef8:	f1c4 040f 	rsb	r4, r4, #15
 8006efc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006f00:	464a      	mov	r2, r9
 8006f02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f06:	4653      	mov	r3, sl
 8006f08:	f7f9 fae6 	bl	80004d8 <__aeabi_dmul>
 8006f0c:	9b07      	ldr	r3, [sp, #28]
 8006f0e:	1b1c      	subs	r4, r3, r4
 8006f10:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006f14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f18:	e789      	b.n	8006e2e <_strtod_l+0x3c6>
 8006f1a:	f113 0f16 	cmn.w	r3, #22
 8006f1e:	dba1      	blt.n	8006e64 <_strtod_l+0x3fc>
 8006f20:	4a39      	ldr	r2, [pc, #228]	; (8007008 <_strtod_l+0x5a0>)
 8006f22:	4648      	mov	r0, r9
 8006f24:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006f28:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006f2c:	4651      	mov	r1, sl
 8006f2e:	f7f9 fbfd 	bl	800072c <__aeabi_ddiv>
 8006f32:	e77e      	b.n	8006e32 <_strtod_l+0x3ca>
 8006f34:	2300      	movs	r3, #0
 8006f36:	4648      	mov	r0, r9
 8006f38:	4651      	mov	r1, sl
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	4e33      	ldr	r6, [pc, #204]	; (800700c <_strtod_l+0x5a4>)
 8006f3e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006f42:	f1b8 0f01 	cmp.w	r8, #1
 8006f46:	dc21      	bgt.n	8006f8c <_strtod_l+0x524>
 8006f48:	b10b      	cbz	r3, 8006f4e <_strtod_l+0x4e6>
 8006f4a:	4681      	mov	r9, r0
 8006f4c:	468a      	mov	sl, r1
 8006f4e:	4b2f      	ldr	r3, [pc, #188]	; (800700c <_strtod_l+0x5a4>)
 8006f50:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8006f54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006f58:	464a      	mov	r2, r9
 8006f5a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006f5e:	4653      	mov	r3, sl
 8006f60:	f7f9 faba 	bl	80004d8 <__aeabi_dmul>
 8006f64:	4b2a      	ldr	r3, [pc, #168]	; (8007010 <_strtod_l+0x5a8>)
 8006f66:	460a      	mov	r2, r1
 8006f68:	400b      	ands	r3, r1
 8006f6a:	492a      	ldr	r1, [pc, #168]	; (8007014 <_strtod_l+0x5ac>)
 8006f6c:	4681      	mov	r9, r0
 8006f6e:	428b      	cmp	r3, r1
 8006f70:	d894      	bhi.n	8006e9c <_strtod_l+0x434>
 8006f72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f76:	428b      	cmp	r3, r1
 8006f78:	bf86      	itte	hi
 8006f7a:	f04f 39ff 	movhi.w	r9, #4294967295
 8006f7e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800701c <_strtod_l+0x5b4>
 8006f82:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8006f86:	2300      	movs	r3, #0
 8006f88:	9305      	str	r3, [sp, #20]
 8006f8a:	e07b      	b.n	8007084 <_strtod_l+0x61c>
 8006f8c:	f018 0f01 	tst.w	r8, #1
 8006f90:	d006      	beq.n	8006fa0 <_strtod_l+0x538>
 8006f92:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f7f9 fa9d 	bl	80004d8 <__aeabi_dmul>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	3501      	adds	r5, #1
 8006fa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006fa6:	e7cc      	b.n	8006f42 <_strtod_l+0x4da>
 8006fa8:	d0ed      	beq.n	8006f86 <_strtod_l+0x51e>
 8006faa:	f1c8 0800 	rsb	r8, r8, #0
 8006fae:	f018 020f 	ands.w	r2, r8, #15
 8006fb2:	d00a      	beq.n	8006fca <_strtod_l+0x562>
 8006fb4:	4b14      	ldr	r3, [pc, #80]	; (8007008 <_strtod_l+0x5a0>)
 8006fb6:	4648      	mov	r0, r9
 8006fb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fbc:	4651      	mov	r1, sl
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f7f9 fbb3 	bl	800072c <__aeabi_ddiv>
 8006fc6:	4681      	mov	r9, r0
 8006fc8:	468a      	mov	sl, r1
 8006fca:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006fce:	d0da      	beq.n	8006f86 <_strtod_l+0x51e>
 8006fd0:	f1b8 0f1f 	cmp.w	r8, #31
 8006fd4:	dd24      	ble.n	8007020 <_strtod_l+0x5b8>
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	f8cd 8010 	str.w	r8, [sp, #16]
 8006fde:	f8cd 8020 	str.w	r8, [sp, #32]
 8006fe2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fe6:	2322      	movs	r3, #34	; 0x22
 8006fe8:	f04f 0900 	mov.w	r9, #0
 8006fec:	f04f 0a00 	mov.w	sl, #0
 8006ff0:	f8cb 3000 	str.w	r3, [fp]
 8006ff4:	e761      	b.n	8006eba <_strtod_l+0x452>
 8006ff6:	bf00      	nop
 8006ff8:	08009731 	.word	0x08009731
 8006ffc:	080097bb 	.word	0x080097bb
 8007000:	08009739 	.word	0x08009739
 8007004:	0800977c 	.word	0x0800977c
 8007008:	080097f8 	.word	0x080097f8
 800700c:	080097d0 	.word	0x080097d0
 8007010:	7ff00000 	.word	0x7ff00000
 8007014:	7ca00000 	.word	0x7ca00000
 8007018:	fff80000 	.word	0xfff80000
 800701c:	7fefffff 	.word	0x7fefffff
 8007020:	f018 0310 	ands.w	r3, r8, #16
 8007024:	bf18      	it	ne
 8007026:	236a      	movne	r3, #106	; 0x6a
 8007028:	4648      	mov	r0, r9
 800702a:	9305      	str	r3, [sp, #20]
 800702c:	4651      	mov	r1, sl
 800702e:	2300      	movs	r3, #0
 8007030:	4da1      	ldr	r5, [pc, #644]	; (80072b8 <_strtod_l+0x850>)
 8007032:	f1b8 0f00 	cmp.w	r8, #0
 8007036:	f300 8113 	bgt.w	8007260 <_strtod_l+0x7f8>
 800703a:	b10b      	cbz	r3, 8007040 <_strtod_l+0x5d8>
 800703c:	4681      	mov	r9, r0
 800703e:	468a      	mov	sl, r1
 8007040:	9b05      	ldr	r3, [sp, #20]
 8007042:	b1bb      	cbz	r3, 8007074 <_strtod_l+0x60c>
 8007044:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007048:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800704c:	2b00      	cmp	r3, #0
 800704e:	4651      	mov	r1, sl
 8007050:	dd10      	ble.n	8007074 <_strtod_l+0x60c>
 8007052:	2b1f      	cmp	r3, #31
 8007054:	f340 8110 	ble.w	8007278 <_strtod_l+0x810>
 8007058:	2b34      	cmp	r3, #52	; 0x34
 800705a:	bfd8      	it	le
 800705c:	f04f 32ff 	movle.w	r2, #4294967295
 8007060:	f04f 0900 	mov.w	r9, #0
 8007064:	bfcf      	iteee	gt
 8007066:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800706a:	3b20      	suble	r3, #32
 800706c:	fa02 f303 	lslle.w	r3, r2, r3
 8007070:	ea03 0a01 	andle.w	sl, r3, r1
 8007074:	2200      	movs	r2, #0
 8007076:	2300      	movs	r3, #0
 8007078:	4648      	mov	r0, r9
 800707a:	4651      	mov	r1, sl
 800707c:	f7f9 fc94 	bl	80009a8 <__aeabi_dcmpeq>
 8007080:	2800      	cmp	r0, #0
 8007082:	d1a8      	bne.n	8006fd6 <_strtod_l+0x56e>
 8007084:	9b06      	ldr	r3, [sp, #24]
 8007086:	9a04      	ldr	r2, [sp, #16]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	9908      	ldr	r1, [sp, #32]
 800708c:	4623      	mov	r3, r4
 800708e:	4658      	mov	r0, fp
 8007090:	f001 fdae 	bl	8008bf0 <__s2b>
 8007094:	9008      	str	r0, [sp, #32]
 8007096:	2800      	cmp	r0, #0
 8007098:	f43f af00 	beq.w	8006e9c <_strtod_l+0x434>
 800709c:	9a07      	ldr	r2, [sp, #28]
 800709e:	9b07      	ldr	r3, [sp, #28]
 80070a0:	2a00      	cmp	r2, #0
 80070a2:	f1c3 0300 	rsb	r3, r3, #0
 80070a6:	bfa8      	it	ge
 80070a8:	2300      	movge	r3, #0
 80070aa:	f04f 0800 	mov.w	r8, #0
 80070ae:	930e      	str	r3, [sp, #56]	; 0x38
 80070b0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80070b4:	9316      	str	r3, [sp, #88]	; 0x58
 80070b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80070ba:	9b08      	ldr	r3, [sp, #32]
 80070bc:	4658      	mov	r0, fp
 80070be:	6859      	ldr	r1, [r3, #4]
 80070c0:	f001 fd10 	bl	8008ae4 <_Balloc>
 80070c4:	9006      	str	r0, [sp, #24]
 80070c6:	2800      	cmp	r0, #0
 80070c8:	f43f aef0 	beq.w	8006eac <_strtod_l+0x444>
 80070cc:	9b08      	ldr	r3, [sp, #32]
 80070ce:	300c      	adds	r0, #12
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	f103 010c 	add.w	r1, r3, #12
 80070d6:	3202      	adds	r2, #2
 80070d8:	0092      	lsls	r2, r2, #2
 80070da:	f7fe fd85 	bl	8005be8 <memcpy>
 80070de:	ab1e      	add	r3, sp, #120	; 0x78
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	ab1d      	add	r3, sp, #116	; 0x74
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	464a      	mov	r2, r9
 80070e8:	4653      	mov	r3, sl
 80070ea:	4658      	mov	r0, fp
 80070ec:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80070f0:	f002 f838 	bl	8009164 <__d2b>
 80070f4:	901c      	str	r0, [sp, #112]	; 0x70
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f43f aed8 	beq.w	8006eac <_strtod_l+0x444>
 80070fc:	2101      	movs	r1, #1
 80070fe:	4658      	mov	r0, fp
 8007100:	f001 fe02 	bl	8008d08 <__i2b>
 8007104:	9004      	str	r0, [sp, #16]
 8007106:	4603      	mov	r3, r0
 8007108:	2800      	cmp	r0, #0
 800710a:	f43f aecf 	beq.w	8006eac <_strtod_l+0x444>
 800710e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007110:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007112:	2d00      	cmp	r5, #0
 8007114:	bfab      	itete	ge
 8007116:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007118:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800711a:	18ee      	addge	r6, r5, r3
 800711c:	1b5c      	sublt	r4, r3, r5
 800711e:	9b05      	ldr	r3, [sp, #20]
 8007120:	bfa8      	it	ge
 8007122:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007124:	eba5 0503 	sub.w	r5, r5, r3
 8007128:	4415      	add	r5, r2
 800712a:	4b64      	ldr	r3, [pc, #400]	; (80072bc <_strtod_l+0x854>)
 800712c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007130:	bfb8      	it	lt
 8007132:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007134:	429d      	cmp	r5, r3
 8007136:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800713a:	f280 80af 	bge.w	800729c <_strtod_l+0x834>
 800713e:	1b5b      	subs	r3, r3, r5
 8007140:	2b1f      	cmp	r3, #31
 8007142:	eba2 0203 	sub.w	r2, r2, r3
 8007146:	f04f 0701 	mov.w	r7, #1
 800714a:	f300 809c 	bgt.w	8007286 <_strtod_l+0x81e>
 800714e:	2500      	movs	r5, #0
 8007150:	fa07 f303 	lsl.w	r3, r7, r3
 8007154:	930f      	str	r3, [sp, #60]	; 0x3c
 8007156:	18b7      	adds	r7, r6, r2
 8007158:	9b05      	ldr	r3, [sp, #20]
 800715a:	42be      	cmp	r6, r7
 800715c:	4414      	add	r4, r2
 800715e:	441c      	add	r4, r3
 8007160:	4633      	mov	r3, r6
 8007162:	bfa8      	it	ge
 8007164:	463b      	movge	r3, r7
 8007166:	42a3      	cmp	r3, r4
 8007168:	bfa8      	it	ge
 800716a:	4623      	movge	r3, r4
 800716c:	2b00      	cmp	r3, #0
 800716e:	bfc2      	ittt	gt
 8007170:	1aff      	subgt	r7, r7, r3
 8007172:	1ae4      	subgt	r4, r4, r3
 8007174:	1af6      	subgt	r6, r6, r3
 8007176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007178:	b1bb      	cbz	r3, 80071aa <_strtod_l+0x742>
 800717a:	461a      	mov	r2, r3
 800717c:	9904      	ldr	r1, [sp, #16]
 800717e:	4658      	mov	r0, fp
 8007180:	f001 fe60 	bl	8008e44 <__pow5mult>
 8007184:	9004      	str	r0, [sp, #16]
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f ae90 	beq.w	8006eac <_strtod_l+0x444>
 800718c:	4601      	mov	r1, r0
 800718e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007190:	4658      	mov	r0, fp
 8007192:	f001 fdc2 	bl	8008d1a <__multiply>
 8007196:	9009      	str	r0, [sp, #36]	; 0x24
 8007198:	2800      	cmp	r0, #0
 800719a:	f43f ae87 	beq.w	8006eac <_strtod_l+0x444>
 800719e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80071a0:	4658      	mov	r0, fp
 80071a2:	f001 fcd3 	bl	8008b4c <_Bfree>
 80071a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a8:	931c      	str	r3, [sp, #112]	; 0x70
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	dc7a      	bgt.n	80072a4 <_strtod_l+0x83c>
 80071ae:	9b07      	ldr	r3, [sp, #28]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	dd08      	ble.n	80071c6 <_strtod_l+0x75e>
 80071b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80071b6:	9906      	ldr	r1, [sp, #24]
 80071b8:	4658      	mov	r0, fp
 80071ba:	f001 fe43 	bl	8008e44 <__pow5mult>
 80071be:	9006      	str	r0, [sp, #24]
 80071c0:	2800      	cmp	r0, #0
 80071c2:	f43f ae73 	beq.w	8006eac <_strtod_l+0x444>
 80071c6:	2c00      	cmp	r4, #0
 80071c8:	dd08      	ble.n	80071dc <_strtod_l+0x774>
 80071ca:	4622      	mov	r2, r4
 80071cc:	9906      	ldr	r1, [sp, #24]
 80071ce:	4658      	mov	r0, fp
 80071d0:	f001 fe86 	bl	8008ee0 <__lshift>
 80071d4:	9006      	str	r0, [sp, #24]
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f43f ae68 	beq.w	8006eac <_strtod_l+0x444>
 80071dc:	2e00      	cmp	r6, #0
 80071de:	dd08      	ble.n	80071f2 <_strtod_l+0x78a>
 80071e0:	4632      	mov	r2, r6
 80071e2:	9904      	ldr	r1, [sp, #16]
 80071e4:	4658      	mov	r0, fp
 80071e6:	f001 fe7b 	bl	8008ee0 <__lshift>
 80071ea:	9004      	str	r0, [sp, #16]
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f43f ae5d 	beq.w	8006eac <_strtod_l+0x444>
 80071f2:	9a06      	ldr	r2, [sp, #24]
 80071f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80071f6:	4658      	mov	r0, fp
 80071f8:	f001 fee0 	bl	8008fbc <__mdiff>
 80071fc:	4680      	mov	r8, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f ae54 	beq.w	8006eac <_strtod_l+0x444>
 8007204:	2400      	movs	r4, #0
 8007206:	68c3      	ldr	r3, [r0, #12]
 8007208:	9904      	ldr	r1, [sp, #16]
 800720a:	60c4      	str	r4, [r0, #12]
 800720c:	930c      	str	r3, [sp, #48]	; 0x30
 800720e:	f001 febb 	bl	8008f88 <__mcmp>
 8007212:	42a0      	cmp	r0, r4
 8007214:	da54      	bge.n	80072c0 <_strtod_l+0x858>
 8007216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007218:	b9f3      	cbnz	r3, 8007258 <_strtod_l+0x7f0>
 800721a:	f1b9 0f00 	cmp.w	r9, #0
 800721e:	d11b      	bne.n	8007258 <_strtod_l+0x7f0>
 8007220:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007224:	b9c3      	cbnz	r3, 8007258 <_strtod_l+0x7f0>
 8007226:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800722a:	0d1b      	lsrs	r3, r3, #20
 800722c:	051b      	lsls	r3, r3, #20
 800722e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007232:	d911      	bls.n	8007258 <_strtod_l+0x7f0>
 8007234:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007238:	b91b      	cbnz	r3, 8007242 <_strtod_l+0x7da>
 800723a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800723e:	2b01      	cmp	r3, #1
 8007240:	dd0a      	ble.n	8007258 <_strtod_l+0x7f0>
 8007242:	4641      	mov	r1, r8
 8007244:	2201      	movs	r2, #1
 8007246:	4658      	mov	r0, fp
 8007248:	f001 fe4a 	bl	8008ee0 <__lshift>
 800724c:	9904      	ldr	r1, [sp, #16]
 800724e:	4680      	mov	r8, r0
 8007250:	f001 fe9a 	bl	8008f88 <__mcmp>
 8007254:	2800      	cmp	r0, #0
 8007256:	dc68      	bgt.n	800732a <_strtod_l+0x8c2>
 8007258:	9b05      	ldr	r3, [sp, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d172      	bne.n	8007344 <_strtod_l+0x8dc>
 800725e:	e630      	b.n	8006ec2 <_strtod_l+0x45a>
 8007260:	f018 0f01 	tst.w	r8, #1
 8007264:	d004      	beq.n	8007270 <_strtod_l+0x808>
 8007266:	e9d5 2300 	ldrd	r2, r3, [r5]
 800726a:	f7f9 f935 	bl	80004d8 <__aeabi_dmul>
 800726e:	2301      	movs	r3, #1
 8007270:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007274:	3508      	adds	r5, #8
 8007276:	e6dc      	b.n	8007032 <_strtod_l+0x5ca>
 8007278:	f04f 32ff 	mov.w	r2, #4294967295
 800727c:	fa02 f303 	lsl.w	r3, r2, r3
 8007280:	ea03 0909 	and.w	r9, r3, r9
 8007284:	e6f6      	b.n	8007074 <_strtod_l+0x60c>
 8007286:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800728a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800728e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007292:	35e2      	adds	r5, #226	; 0xe2
 8007294:	fa07 f505 	lsl.w	r5, r7, r5
 8007298:	970f      	str	r7, [sp, #60]	; 0x3c
 800729a:	e75c      	b.n	8007156 <_strtod_l+0x6ee>
 800729c:	2301      	movs	r3, #1
 800729e:	2500      	movs	r5, #0
 80072a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80072a2:	e758      	b.n	8007156 <_strtod_l+0x6ee>
 80072a4:	463a      	mov	r2, r7
 80072a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80072a8:	4658      	mov	r0, fp
 80072aa:	f001 fe19 	bl	8008ee0 <__lshift>
 80072ae:	901c      	str	r0, [sp, #112]	; 0x70
 80072b0:	2800      	cmp	r0, #0
 80072b2:	f47f af7c 	bne.w	80071ae <_strtod_l+0x746>
 80072b6:	e5f9      	b.n	8006eac <_strtod_l+0x444>
 80072b8:	08009790 	.word	0x08009790
 80072bc:	fffffc02 	.word	0xfffffc02
 80072c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80072c4:	f040 8089 	bne.w	80073da <_strtod_l+0x972>
 80072c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072ca:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80072ce:	b342      	cbz	r2, 8007322 <_strtod_l+0x8ba>
 80072d0:	4aaf      	ldr	r2, [pc, #700]	; (8007590 <_strtod_l+0xb28>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d156      	bne.n	8007384 <_strtod_l+0x91c>
 80072d6:	9b05      	ldr	r3, [sp, #20]
 80072d8:	4648      	mov	r0, r9
 80072da:	b1eb      	cbz	r3, 8007318 <_strtod_l+0x8b0>
 80072dc:	4653      	mov	r3, sl
 80072de:	4aad      	ldr	r2, [pc, #692]	; (8007594 <_strtod_l+0xb2c>)
 80072e0:	f04f 31ff 	mov.w	r1, #4294967295
 80072e4:	401a      	ands	r2, r3
 80072e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80072ea:	d818      	bhi.n	800731e <_strtod_l+0x8b6>
 80072ec:	0d12      	lsrs	r2, r2, #20
 80072ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072f2:	fa01 f303 	lsl.w	r3, r1, r3
 80072f6:	4298      	cmp	r0, r3
 80072f8:	d144      	bne.n	8007384 <_strtod_l+0x91c>
 80072fa:	4ba7      	ldr	r3, [pc, #668]	; (8007598 <_strtod_l+0xb30>)
 80072fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072fe:	429a      	cmp	r2, r3
 8007300:	d102      	bne.n	8007308 <_strtod_l+0x8a0>
 8007302:	3001      	adds	r0, #1
 8007304:	f43f add2 	beq.w	8006eac <_strtod_l+0x444>
 8007308:	4ba2      	ldr	r3, [pc, #648]	; (8007594 <_strtod_l+0xb2c>)
 800730a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800730c:	f04f 0900 	mov.w	r9, #0
 8007310:	401a      	ands	r2, r3
 8007312:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8007316:	e79f      	b.n	8007258 <_strtod_l+0x7f0>
 8007318:	f04f 33ff 	mov.w	r3, #4294967295
 800731c:	e7eb      	b.n	80072f6 <_strtod_l+0x88e>
 800731e:	460b      	mov	r3, r1
 8007320:	e7e9      	b.n	80072f6 <_strtod_l+0x88e>
 8007322:	bb7b      	cbnz	r3, 8007384 <_strtod_l+0x91c>
 8007324:	f1b9 0f00 	cmp.w	r9, #0
 8007328:	d12c      	bne.n	8007384 <_strtod_l+0x91c>
 800732a:	9905      	ldr	r1, [sp, #20]
 800732c:	4653      	mov	r3, sl
 800732e:	4a99      	ldr	r2, [pc, #612]	; (8007594 <_strtod_l+0xb2c>)
 8007330:	b1f1      	cbz	r1, 8007370 <_strtod_l+0x908>
 8007332:	ea02 010a 	and.w	r1, r2, sl
 8007336:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800733a:	dc19      	bgt.n	8007370 <_strtod_l+0x908>
 800733c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007340:	f77f ae51 	ble.w	8006fe6 <_strtod_l+0x57e>
 8007344:	2300      	movs	r3, #0
 8007346:	4a95      	ldr	r2, [pc, #596]	; (800759c <_strtod_l+0xb34>)
 8007348:	4648      	mov	r0, r9
 800734a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800734e:	4651      	mov	r1, sl
 8007350:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007354:	f7f9 f8c0 	bl	80004d8 <__aeabi_dmul>
 8007358:	4681      	mov	r9, r0
 800735a:	468a      	mov	sl, r1
 800735c:	2900      	cmp	r1, #0
 800735e:	f47f adb0 	bne.w	8006ec2 <_strtod_l+0x45a>
 8007362:	2800      	cmp	r0, #0
 8007364:	f47f adad 	bne.w	8006ec2 <_strtod_l+0x45a>
 8007368:	2322      	movs	r3, #34	; 0x22
 800736a:	f8cb 3000 	str.w	r3, [fp]
 800736e:	e5a8      	b.n	8006ec2 <_strtod_l+0x45a>
 8007370:	4013      	ands	r3, r2
 8007372:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007376:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800737a:	f04f 39ff 	mov.w	r9, #4294967295
 800737e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007382:	e769      	b.n	8007258 <_strtod_l+0x7f0>
 8007384:	b19d      	cbz	r5, 80073ae <_strtod_l+0x946>
 8007386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007388:	421d      	tst	r5, r3
 800738a:	f43f af65 	beq.w	8007258 <_strtod_l+0x7f0>
 800738e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007390:	9a05      	ldr	r2, [sp, #20]
 8007392:	4648      	mov	r0, r9
 8007394:	4651      	mov	r1, sl
 8007396:	b173      	cbz	r3, 80073b6 <_strtod_l+0x94e>
 8007398:	f7ff fb44 	bl	8006a24 <sulp>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073a4:	f7f8 fee2 	bl	800016c <__adddf3>
 80073a8:	4681      	mov	r9, r0
 80073aa:	468a      	mov	sl, r1
 80073ac:	e754      	b.n	8007258 <_strtod_l+0x7f0>
 80073ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073b0:	ea13 0f09 	tst.w	r3, r9
 80073b4:	e7e9      	b.n	800738a <_strtod_l+0x922>
 80073b6:	f7ff fb35 	bl	8006a24 <sulp>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80073c2:	f7f8 fed1 	bl	8000168 <__aeabi_dsub>
 80073c6:	2200      	movs	r2, #0
 80073c8:	2300      	movs	r3, #0
 80073ca:	4681      	mov	r9, r0
 80073cc:	468a      	mov	sl, r1
 80073ce:	f7f9 faeb 	bl	80009a8 <__aeabi_dcmpeq>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f47f ae07 	bne.w	8006fe6 <_strtod_l+0x57e>
 80073d8:	e73e      	b.n	8007258 <_strtod_l+0x7f0>
 80073da:	9904      	ldr	r1, [sp, #16]
 80073dc:	4640      	mov	r0, r8
 80073de:	f001 ff10 	bl	8009202 <__ratio>
 80073e2:	2200      	movs	r2, #0
 80073e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073e8:	4606      	mov	r6, r0
 80073ea:	460f      	mov	r7, r1
 80073ec:	f7f9 faf0 	bl	80009d0 <__aeabi_dcmple>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d075      	beq.n	80074e0 <_strtod_l+0xa78>
 80073f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d047      	beq.n	800748a <_strtod_l+0xa22>
 80073fa:	2600      	movs	r6, #0
 80073fc:	4f68      	ldr	r7, [pc, #416]	; (80075a0 <_strtod_l+0xb38>)
 80073fe:	4d68      	ldr	r5, [pc, #416]	; (80075a0 <_strtod_l+0xb38>)
 8007400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007402:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007406:	0d1b      	lsrs	r3, r3, #20
 8007408:	051b      	lsls	r3, r3, #20
 800740a:	930f      	str	r3, [sp, #60]	; 0x3c
 800740c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800740e:	4b65      	ldr	r3, [pc, #404]	; (80075a4 <_strtod_l+0xb3c>)
 8007410:	429a      	cmp	r2, r3
 8007412:	f040 80cf 	bne.w	80075b4 <_strtod_l+0xb4c>
 8007416:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800741a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800741e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007420:	4648      	mov	r0, r9
 8007422:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8007426:	4651      	mov	r1, sl
 8007428:	f001 fe26 	bl	8009078 <__ulp>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f9 f850 	bl	80004d8 <__aeabi_dmul>
 8007438:	464a      	mov	r2, r9
 800743a:	4653      	mov	r3, sl
 800743c:	f7f8 fe96 	bl	800016c <__adddf3>
 8007440:	460b      	mov	r3, r1
 8007442:	4954      	ldr	r1, [pc, #336]	; (8007594 <_strtod_l+0xb2c>)
 8007444:	4a58      	ldr	r2, [pc, #352]	; (80075a8 <_strtod_l+0xb40>)
 8007446:	4019      	ands	r1, r3
 8007448:	4291      	cmp	r1, r2
 800744a:	4681      	mov	r9, r0
 800744c:	d95e      	bls.n	800750c <_strtod_l+0xaa4>
 800744e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007450:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007454:	4293      	cmp	r3, r2
 8007456:	d103      	bne.n	8007460 <_strtod_l+0x9f8>
 8007458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745a:	3301      	adds	r3, #1
 800745c:	f43f ad26 	beq.w	8006eac <_strtod_l+0x444>
 8007460:	f04f 39ff 	mov.w	r9, #4294967295
 8007464:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007598 <_strtod_l+0xb30>
 8007468:	991c      	ldr	r1, [sp, #112]	; 0x70
 800746a:	4658      	mov	r0, fp
 800746c:	f001 fb6e 	bl	8008b4c <_Bfree>
 8007470:	9906      	ldr	r1, [sp, #24]
 8007472:	4658      	mov	r0, fp
 8007474:	f001 fb6a 	bl	8008b4c <_Bfree>
 8007478:	9904      	ldr	r1, [sp, #16]
 800747a:	4658      	mov	r0, fp
 800747c:	f001 fb66 	bl	8008b4c <_Bfree>
 8007480:	4641      	mov	r1, r8
 8007482:	4658      	mov	r0, fp
 8007484:	f001 fb62 	bl	8008b4c <_Bfree>
 8007488:	e617      	b.n	80070ba <_strtod_l+0x652>
 800748a:	f1b9 0f00 	cmp.w	r9, #0
 800748e:	d119      	bne.n	80074c4 <_strtod_l+0xa5c>
 8007490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007492:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007496:	b9e3      	cbnz	r3, 80074d2 <_strtod_l+0xa6a>
 8007498:	2200      	movs	r2, #0
 800749a:	4b41      	ldr	r3, [pc, #260]	; (80075a0 <_strtod_l+0xb38>)
 800749c:	4630      	mov	r0, r6
 800749e:	4639      	mov	r1, r7
 80074a0:	f7f9 fa8c 	bl	80009bc <__aeabi_dcmplt>
 80074a4:	b9c8      	cbnz	r0, 80074da <_strtod_l+0xa72>
 80074a6:	2200      	movs	r2, #0
 80074a8:	4b40      	ldr	r3, [pc, #256]	; (80075ac <_strtod_l+0xb44>)
 80074aa:	4630      	mov	r0, r6
 80074ac:	4639      	mov	r1, r7
 80074ae:	f7f9 f813 	bl	80004d8 <__aeabi_dmul>
 80074b2:	4604      	mov	r4, r0
 80074b4:	460d      	mov	r5, r1
 80074b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80074ba:	9418      	str	r4, [sp, #96]	; 0x60
 80074bc:	9319      	str	r3, [sp, #100]	; 0x64
 80074be:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80074c2:	e79d      	b.n	8007400 <_strtod_l+0x998>
 80074c4:	f1b9 0f01 	cmp.w	r9, #1
 80074c8:	d103      	bne.n	80074d2 <_strtod_l+0xa6a>
 80074ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f43f ad8a 	beq.w	8006fe6 <_strtod_l+0x57e>
 80074d2:	2600      	movs	r6, #0
 80074d4:	4f36      	ldr	r7, [pc, #216]	; (80075b0 <_strtod_l+0xb48>)
 80074d6:	2400      	movs	r4, #0
 80074d8:	e791      	b.n	80073fe <_strtod_l+0x996>
 80074da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80074dc:	4d33      	ldr	r5, [pc, #204]	; (80075ac <_strtod_l+0xb44>)
 80074de:	e7ea      	b.n	80074b6 <_strtod_l+0xa4e>
 80074e0:	4b32      	ldr	r3, [pc, #200]	; (80075ac <_strtod_l+0xb44>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f8 fff6 	bl	80004d8 <__aeabi_dmul>
 80074ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074ee:	4604      	mov	r4, r0
 80074f0:	460d      	mov	r5, r1
 80074f2:	b933      	cbnz	r3, 8007502 <_strtod_l+0xa9a>
 80074f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074f8:	9010      	str	r0, [sp, #64]	; 0x40
 80074fa:	9311      	str	r3, [sp, #68]	; 0x44
 80074fc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007500:	e77e      	b.n	8007400 <_strtod_l+0x998>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800750a:	e7f7      	b.n	80074fc <_strtod_l+0xa94>
 800750c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007510:	9b05      	ldr	r3, [sp, #20]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1a8      	bne.n	8007468 <_strtod_l+0xa00>
 8007516:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800751a:	0d1b      	lsrs	r3, r3, #20
 800751c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800751e:	051b      	lsls	r3, r3, #20
 8007520:	429a      	cmp	r2, r3
 8007522:	4656      	mov	r6, sl
 8007524:	d1a0      	bne.n	8007468 <_strtod_l+0xa00>
 8007526:	4629      	mov	r1, r5
 8007528:	4620      	mov	r0, r4
 800752a:	f7f9 fa85 	bl	8000a38 <__aeabi_d2iz>
 800752e:	f7f8 ff69 	bl	8000404 <__aeabi_i2d>
 8007532:	460b      	mov	r3, r1
 8007534:	4602      	mov	r2, r0
 8007536:	4629      	mov	r1, r5
 8007538:	4620      	mov	r0, r4
 800753a:	f7f8 fe15 	bl	8000168 <__aeabi_dsub>
 800753e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007540:	4604      	mov	r4, r0
 8007542:	460d      	mov	r5, r1
 8007544:	b933      	cbnz	r3, 8007554 <_strtod_l+0xaec>
 8007546:	f1b9 0f00 	cmp.w	r9, #0
 800754a:	d103      	bne.n	8007554 <_strtod_l+0xaec>
 800754c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007550:	2e00      	cmp	r6, #0
 8007552:	d06a      	beq.n	800762a <_strtod_l+0xbc2>
 8007554:	a30a      	add	r3, pc, #40	; (adr r3, 8007580 <_strtod_l+0xb18>)
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	4620      	mov	r0, r4
 800755c:	4629      	mov	r1, r5
 800755e:	f7f9 fa2d 	bl	80009bc <__aeabi_dcmplt>
 8007562:	2800      	cmp	r0, #0
 8007564:	f47f acad 	bne.w	8006ec2 <_strtod_l+0x45a>
 8007568:	a307      	add	r3, pc, #28	; (adr r3, 8007588 <_strtod_l+0xb20>)
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	4620      	mov	r0, r4
 8007570:	4629      	mov	r1, r5
 8007572:	f7f9 fa41 	bl	80009f8 <__aeabi_dcmpgt>
 8007576:	2800      	cmp	r0, #0
 8007578:	f43f af76 	beq.w	8007468 <_strtod_l+0xa00>
 800757c:	e4a1      	b.n	8006ec2 <_strtod_l+0x45a>
 800757e:	bf00      	nop
 8007580:	94a03595 	.word	0x94a03595
 8007584:	3fdfffff 	.word	0x3fdfffff
 8007588:	35afe535 	.word	0x35afe535
 800758c:	3fe00000 	.word	0x3fe00000
 8007590:	000fffff 	.word	0x000fffff
 8007594:	7ff00000 	.word	0x7ff00000
 8007598:	7fefffff 	.word	0x7fefffff
 800759c:	39500000 	.word	0x39500000
 80075a0:	3ff00000 	.word	0x3ff00000
 80075a4:	7fe00000 	.word	0x7fe00000
 80075a8:	7c9fffff 	.word	0x7c9fffff
 80075ac:	3fe00000 	.word	0x3fe00000
 80075b0:	bff00000 	.word	0xbff00000
 80075b4:	9b05      	ldr	r3, [sp, #20]
 80075b6:	b313      	cbz	r3, 80075fe <_strtod_l+0xb96>
 80075b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075be:	d81e      	bhi.n	80075fe <_strtod_l+0xb96>
 80075c0:	a325      	add	r3, pc, #148	; (adr r3, 8007658 <_strtod_l+0xbf0>)
 80075c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c6:	4620      	mov	r0, r4
 80075c8:	4629      	mov	r1, r5
 80075ca:	f7f9 fa01 	bl	80009d0 <__aeabi_dcmple>
 80075ce:	b190      	cbz	r0, 80075f6 <_strtod_l+0xb8e>
 80075d0:	4629      	mov	r1, r5
 80075d2:	4620      	mov	r0, r4
 80075d4:	f7f9 fa58 	bl	8000a88 <__aeabi_d2uiz>
 80075d8:	2800      	cmp	r0, #0
 80075da:	bf08      	it	eq
 80075dc:	2001      	moveq	r0, #1
 80075de:	f7f8 ff01 	bl	80003e4 <__aeabi_ui2d>
 80075e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075e4:	4604      	mov	r4, r0
 80075e6:	460d      	mov	r5, r1
 80075e8:	b9d3      	cbnz	r3, 8007620 <_strtod_l+0xbb8>
 80075ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075ee:	9012      	str	r0, [sp, #72]	; 0x48
 80075f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80075f2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80075f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075f8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80075fc:	1a9f      	subs	r7, r3, r2
 80075fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007602:	f001 fd39 	bl	8009078 <__ulp>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	4630      	mov	r0, r6
 800760c:	4639      	mov	r1, r7
 800760e:	f7f8 ff63 	bl	80004d8 <__aeabi_dmul>
 8007612:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007616:	f7f8 fda9 	bl	800016c <__adddf3>
 800761a:	4681      	mov	r9, r0
 800761c:	468a      	mov	sl, r1
 800761e:	e777      	b.n	8007510 <_strtod_l+0xaa8>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007628:	e7e3      	b.n	80075f2 <_strtod_l+0xb8a>
 800762a:	a30d      	add	r3, pc, #52	; (adr r3, 8007660 <_strtod_l+0xbf8>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f9 f9c4 	bl	80009bc <__aeabi_dcmplt>
 8007634:	e79f      	b.n	8007576 <_strtod_l+0xb0e>
 8007636:	2300      	movs	r3, #0
 8007638:	930d      	str	r3, [sp, #52]	; 0x34
 800763a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800763c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	f7ff ba55 	b.w	8006aee <_strtod_l+0x86>
 8007644:	2b65      	cmp	r3, #101	; 0x65
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	f43f ab42 	beq.w	8006cd2 <_strtod_l+0x26a>
 800764e:	2101      	movs	r1, #1
 8007650:	4614      	mov	r4, r2
 8007652:	9105      	str	r1, [sp, #20]
 8007654:	f7ff babf 	b.w	8006bd6 <_strtod_l+0x16e>
 8007658:	ffc00000 	.word	0xffc00000
 800765c:	41dfffff 	.word	0x41dfffff
 8007660:	94a03595 	.word	0x94a03595
 8007664:	3fcfffff 	.word	0x3fcfffff

08007668 <_strtod_r>:
 8007668:	4b05      	ldr	r3, [pc, #20]	; (8007680 <_strtod_r+0x18>)
 800766a:	b410      	push	{r4}
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4c05      	ldr	r4, [pc, #20]	; (8007684 <_strtod_r+0x1c>)
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	2b00      	cmp	r3, #0
 8007674:	bf08      	it	eq
 8007676:	4623      	moveq	r3, r4
 8007678:	bc10      	pop	{r4}
 800767a:	f7ff b9f5 	b.w	8006a68 <_strtod_l>
 800767e:	bf00      	nop
 8007680:	20000010 	.word	0x20000010
 8007684:	20000074 	.word	0x20000074

08007688 <_strtol_l.isra.0>:
 8007688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800768c:	4680      	mov	r8, r0
 800768e:	4689      	mov	r9, r1
 8007690:	4692      	mov	sl, r2
 8007692:	461e      	mov	r6, r3
 8007694:	460f      	mov	r7, r1
 8007696:	463d      	mov	r5, r7
 8007698:	9808      	ldr	r0, [sp, #32]
 800769a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800769e:	f001 f9eb 	bl	8008a78 <__locale_ctype_ptr_l>
 80076a2:	4420      	add	r0, r4
 80076a4:	7843      	ldrb	r3, [r0, #1]
 80076a6:	f013 0308 	ands.w	r3, r3, #8
 80076aa:	d132      	bne.n	8007712 <_strtol_l.isra.0+0x8a>
 80076ac:	2c2d      	cmp	r4, #45	; 0x2d
 80076ae:	d132      	bne.n	8007716 <_strtol_l.isra.0+0x8e>
 80076b0:	2201      	movs	r2, #1
 80076b2:	787c      	ldrb	r4, [r7, #1]
 80076b4:	1cbd      	adds	r5, r7, #2
 80076b6:	2e00      	cmp	r6, #0
 80076b8:	d05d      	beq.n	8007776 <_strtol_l.isra.0+0xee>
 80076ba:	2e10      	cmp	r6, #16
 80076bc:	d109      	bne.n	80076d2 <_strtol_l.isra.0+0x4a>
 80076be:	2c30      	cmp	r4, #48	; 0x30
 80076c0:	d107      	bne.n	80076d2 <_strtol_l.isra.0+0x4a>
 80076c2:	782b      	ldrb	r3, [r5, #0]
 80076c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076c8:	2b58      	cmp	r3, #88	; 0x58
 80076ca:	d14f      	bne.n	800776c <_strtol_l.isra.0+0xe4>
 80076cc:	2610      	movs	r6, #16
 80076ce:	786c      	ldrb	r4, [r5, #1]
 80076d0:	3502      	adds	r5, #2
 80076d2:	2a00      	cmp	r2, #0
 80076d4:	bf14      	ite	ne
 80076d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80076da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80076de:	2700      	movs	r7, #0
 80076e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80076e4:	4638      	mov	r0, r7
 80076e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80076ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80076ee:	2b09      	cmp	r3, #9
 80076f0:	d817      	bhi.n	8007722 <_strtol_l.isra.0+0x9a>
 80076f2:	461c      	mov	r4, r3
 80076f4:	42a6      	cmp	r6, r4
 80076f6:	dd23      	ble.n	8007740 <_strtol_l.isra.0+0xb8>
 80076f8:	1c7b      	adds	r3, r7, #1
 80076fa:	d007      	beq.n	800770c <_strtol_l.isra.0+0x84>
 80076fc:	4584      	cmp	ip, r0
 80076fe:	d31c      	bcc.n	800773a <_strtol_l.isra.0+0xb2>
 8007700:	d101      	bne.n	8007706 <_strtol_l.isra.0+0x7e>
 8007702:	45a6      	cmp	lr, r4
 8007704:	db19      	blt.n	800773a <_strtol_l.isra.0+0xb2>
 8007706:	2701      	movs	r7, #1
 8007708:	fb00 4006 	mla	r0, r0, r6, r4
 800770c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007710:	e7eb      	b.n	80076ea <_strtol_l.isra.0+0x62>
 8007712:	462f      	mov	r7, r5
 8007714:	e7bf      	b.n	8007696 <_strtol_l.isra.0+0xe>
 8007716:	2c2b      	cmp	r4, #43	; 0x2b
 8007718:	bf04      	itt	eq
 800771a:	1cbd      	addeq	r5, r7, #2
 800771c:	787c      	ldrbeq	r4, [r7, #1]
 800771e:	461a      	mov	r2, r3
 8007720:	e7c9      	b.n	80076b6 <_strtol_l.isra.0+0x2e>
 8007722:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007726:	2b19      	cmp	r3, #25
 8007728:	d801      	bhi.n	800772e <_strtol_l.isra.0+0xa6>
 800772a:	3c37      	subs	r4, #55	; 0x37
 800772c:	e7e2      	b.n	80076f4 <_strtol_l.isra.0+0x6c>
 800772e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007732:	2b19      	cmp	r3, #25
 8007734:	d804      	bhi.n	8007740 <_strtol_l.isra.0+0xb8>
 8007736:	3c57      	subs	r4, #87	; 0x57
 8007738:	e7dc      	b.n	80076f4 <_strtol_l.isra.0+0x6c>
 800773a:	f04f 37ff 	mov.w	r7, #4294967295
 800773e:	e7e5      	b.n	800770c <_strtol_l.isra.0+0x84>
 8007740:	1c7b      	adds	r3, r7, #1
 8007742:	d108      	bne.n	8007756 <_strtol_l.isra.0+0xce>
 8007744:	2322      	movs	r3, #34	; 0x22
 8007746:	4608      	mov	r0, r1
 8007748:	f8c8 3000 	str.w	r3, [r8]
 800774c:	f1ba 0f00 	cmp.w	sl, #0
 8007750:	d107      	bne.n	8007762 <_strtol_l.isra.0+0xda>
 8007752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007756:	b102      	cbz	r2, 800775a <_strtol_l.isra.0+0xd2>
 8007758:	4240      	negs	r0, r0
 800775a:	f1ba 0f00 	cmp.w	sl, #0
 800775e:	d0f8      	beq.n	8007752 <_strtol_l.isra.0+0xca>
 8007760:	b10f      	cbz	r7, 8007766 <_strtol_l.isra.0+0xde>
 8007762:	f105 39ff 	add.w	r9, r5, #4294967295
 8007766:	f8ca 9000 	str.w	r9, [sl]
 800776a:	e7f2      	b.n	8007752 <_strtol_l.isra.0+0xca>
 800776c:	2430      	movs	r4, #48	; 0x30
 800776e:	2e00      	cmp	r6, #0
 8007770:	d1af      	bne.n	80076d2 <_strtol_l.isra.0+0x4a>
 8007772:	2608      	movs	r6, #8
 8007774:	e7ad      	b.n	80076d2 <_strtol_l.isra.0+0x4a>
 8007776:	2c30      	cmp	r4, #48	; 0x30
 8007778:	d0a3      	beq.n	80076c2 <_strtol_l.isra.0+0x3a>
 800777a:	260a      	movs	r6, #10
 800777c:	e7a9      	b.n	80076d2 <_strtol_l.isra.0+0x4a>
	...

08007780 <_strtol_r>:
 8007780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007782:	4c06      	ldr	r4, [pc, #24]	; (800779c <_strtol_r+0x1c>)
 8007784:	4d06      	ldr	r5, [pc, #24]	; (80077a0 <_strtol_r+0x20>)
 8007786:	6824      	ldr	r4, [r4, #0]
 8007788:	6a24      	ldr	r4, [r4, #32]
 800778a:	2c00      	cmp	r4, #0
 800778c:	bf08      	it	eq
 800778e:	462c      	moveq	r4, r5
 8007790:	9400      	str	r4, [sp, #0]
 8007792:	f7ff ff79 	bl	8007688 <_strtol_l.isra.0>
 8007796:	b003      	add	sp, #12
 8007798:	bd30      	pop	{r4, r5, pc}
 800779a:	bf00      	nop
 800779c:	20000010 	.word	0x20000010
 80077a0:	20000074 	.word	0x20000074

080077a4 <quorem>:
 80077a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	6903      	ldr	r3, [r0, #16]
 80077aa:	690c      	ldr	r4, [r1, #16]
 80077ac:	4680      	mov	r8, r0
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	f2c0 8084 	blt.w	80078bc <quorem+0x118>
 80077b4:	3c01      	subs	r4, #1
 80077b6:	f101 0714 	add.w	r7, r1, #20
 80077ba:	f100 0614 	add.w	r6, r0, #20
 80077be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80077c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80077c6:	3501      	adds	r5, #1
 80077c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80077cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80077d0:	eb06 030c 	add.w	r3, r6, ip
 80077d4:	eb07 090c 	add.w	r9, r7, ip
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	b39d      	cbz	r5, 8007844 <quorem+0xa0>
 80077dc:	f04f 0a00 	mov.w	sl, #0
 80077e0:	4638      	mov	r0, r7
 80077e2:	46b6      	mov	lr, r6
 80077e4:	46d3      	mov	fp, sl
 80077e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80077ea:	b293      	uxth	r3, r2
 80077ec:	fb05 a303 	mla	r3, r5, r3, sl
 80077f0:	0c12      	lsrs	r2, r2, #16
 80077f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077f6:	fb05 a202 	mla	r2, r5, r2, sl
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	ebab 0303 	sub.w	r3, fp, r3
 8007800:	f8de b000 	ldr.w	fp, [lr]
 8007804:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007808:	fa1f fb8b 	uxth.w	fp, fp
 800780c:	445b      	add	r3, fp
 800780e:	fa1f fb82 	uxth.w	fp, r2
 8007812:	f8de 2000 	ldr.w	r2, [lr]
 8007816:	4581      	cmp	r9, r0
 8007818:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800781c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007820:	b29b      	uxth	r3, r3
 8007822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007826:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800782a:	f84e 3b04 	str.w	r3, [lr], #4
 800782e:	d2da      	bcs.n	80077e6 <quorem+0x42>
 8007830:	f856 300c 	ldr.w	r3, [r6, ip]
 8007834:	b933      	cbnz	r3, 8007844 <quorem+0xa0>
 8007836:	9b01      	ldr	r3, [sp, #4]
 8007838:	3b04      	subs	r3, #4
 800783a:	429e      	cmp	r6, r3
 800783c:	461a      	mov	r2, r3
 800783e:	d331      	bcc.n	80078a4 <quorem+0x100>
 8007840:	f8c8 4010 	str.w	r4, [r8, #16]
 8007844:	4640      	mov	r0, r8
 8007846:	f001 fb9f 	bl	8008f88 <__mcmp>
 800784a:	2800      	cmp	r0, #0
 800784c:	db26      	blt.n	800789c <quorem+0xf8>
 800784e:	4630      	mov	r0, r6
 8007850:	f04f 0c00 	mov.w	ip, #0
 8007854:	3501      	adds	r5, #1
 8007856:	f857 1b04 	ldr.w	r1, [r7], #4
 800785a:	f8d0 e000 	ldr.w	lr, [r0]
 800785e:	b28b      	uxth	r3, r1
 8007860:	ebac 0303 	sub.w	r3, ip, r3
 8007864:	fa1f f28e 	uxth.w	r2, lr
 8007868:	4413      	add	r3, r2
 800786a:	0c0a      	lsrs	r2, r1, #16
 800786c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007874:	b29b      	uxth	r3, r3
 8007876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800787a:	45b9      	cmp	r9, r7
 800787c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007880:	f840 3b04 	str.w	r3, [r0], #4
 8007884:	d2e7      	bcs.n	8007856 <quorem+0xb2>
 8007886:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800788a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800788e:	b92a      	cbnz	r2, 800789c <quorem+0xf8>
 8007890:	3b04      	subs	r3, #4
 8007892:	429e      	cmp	r6, r3
 8007894:	461a      	mov	r2, r3
 8007896:	d30b      	bcc.n	80078b0 <quorem+0x10c>
 8007898:	f8c8 4010 	str.w	r4, [r8, #16]
 800789c:	4628      	mov	r0, r5
 800789e:	b003      	add	sp, #12
 80078a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a4:	6812      	ldr	r2, [r2, #0]
 80078a6:	3b04      	subs	r3, #4
 80078a8:	2a00      	cmp	r2, #0
 80078aa:	d1c9      	bne.n	8007840 <quorem+0x9c>
 80078ac:	3c01      	subs	r4, #1
 80078ae:	e7c4      	b.n	800783a <quorem+0x96>
 80078b0:	6812      	ldr	r2, [r2, #0]
 80078b2:	3b04      	subs	r3, #4
 80078b4:	2a00      	cmp	r2, #0
 80078b6:	d1ef      	bne.n	8007898 <quorem+0xf4>
 80078b8:	3c01      	subs	r4, #1
 80078ba:	e7ea      	b.n	8007892 <quorem+0xee>
 80078bc:	2000      	movs	r0, #0
 80078be:	e7ee      	b.n	800789e <quorem+0xfa>

080078c0 <_dtoa_r>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	4616      	mov	r6, r2
 80078c6:	461f      	mov	r7, r3
 80078c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078ca:	b095      	sub	sp, #84	; 0x54
 80078cc:	4604      	mov	r4, r0
 80078ce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80078d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80078d6:	b93d      	cbnz	r5, 80078e8 <_dtoa_r+0x28>
 80078d8:	2010      	movs	r0, #16
 80078da:	f7fe f97d 	bl	8005bd8 <malloc>
 80078de:	6260      	str	r0, [r4, #36]	; 0x24
 80078e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078e4:	6005      	str	r5, [r0, #0]
 80078e6:	60c5      	str	r5, [r0, #12]
 80078e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078ea:	6819      	ldr	r1, [r3, #0]
 80078ec:	b151      	cbz	r1, 8007904 <_dtoa_r+0x44>
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	2301      	movs	r3, #1
 80078f2:	4093      	lsls	r3, r2
 80078f4:	604a      	str	r2, [r1, #4]
 80078f6:	608b      	str	r3, [r1, #8]
 80078f8:	4620      	mov	r0, r4
 80078fa:	f001 f927 	bl	8008b4c <_Bfree>
 80078fe:	2200      	movs	r2, #0
 8007900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	1e3b      	subs	r3, r7, #0
 8007906:	bfaf      	iteee	ge
 8007908:	2300      	movge	r3, #0
 800790a:	2201      	movlt	r2, #1
 800790c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007910:	9303      	strlt	r3, [sp, #12]
 8007912:	bfac      	ite	ge
 8007914:	f8c8 3000 	strge.w	r3, [r8]
 8007918:	f8c8 2000 	strlt.w	r2, [r8]
 800791c:	4bae      	ldr	r3, [pc, #696]	; (8007bd8 <_dtoa_r+0x318>)
 800791e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007922:	ea33 0308 	bics.w	r3, r3, r8
 8007926:	d11b      	bne.n	8007960 <_dtoa_r+0xa0>
 8007928:	f242 730f 	movw	r3, #9999	; 0x270f
 800792c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	9b02      	ldr	r3, [sp, #8]
 8007932:	b923      	cbnz	r3, 800793e <_dtoa_r+0x7e>
 8007934:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007938:	2800      	cmp	r0, #0
 800793a:	f000 8545 	beq.w	80083c8 <_dtoa_r+0xb08>
 800793e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007940:	b953      	cbnz	r3, 8007958 <_dtoa_r+0x98>
 8007942:	4ba6      	ldr	r3, [pc, #664]	; (8007bdc <_dtoa_r+0x31c>)
 8007944:	e021      	b.n	800798a <_dtoa_r+0xca>
 8007946:	4ba6      	ldr	r3, [pc, #664]	; (8007be0 <_dtoa_r+0x320>)
 8007948:	9306      	str	r3, [sp, #24]
 800794a:	3308      	adds	r3, #8
 800794c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	9806      	ldr	r0, [sp, #24]
 8007952:	b015      	add	sp, #84	; 0x54
 8007954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007958:	4ba0      	ldr	r3, [pc, #640]	; (8007bdc <_dtoa_r+0x31c>)
 800795a:	9306      	str	r3, [sp, #24]
 800795c:	3303      	adds	r3, #3
 800795e:	e7f5      	b.n	800794c <_dtoa_r+0x8c>
 8007960:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007964:	2200      	movs	r2, #0
 8007966:	2300      	movs	r3, #0
 8007968:	4630      	mov	r0, r6
 800796a:	4639      	mov	r1, r7
 800796c:	f7f9 f81c 	bl	80009a8 <__aeabi_dcmpeq>
 8007970:	4682      	mov	sl, r0
 8007972:	b160      	cbz	r0, 800798e <_dtoa_r+0xce>
 8007974:	2301      	movs	r3, #1
 8007976:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8520 	beq.w	80083c2 <_dtoa_r+0xb02>
 8007982:	4b98      	ldr	r3, [pc, #608]	; (8007be4 <_dtoa_r+0x324>)
 8007984:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	3b01      	subs	r3, #1
 800798a:	9306      	str	r3, [sp, #24]
 800798c:	e7e0      	b.n	8007950 <_dtoa_r+0x90>
 800798e:	ab12      	add	r3, sp, #72	; 0x48
 8007990:	9301      	str	r3, [sp, #4]
 8007992:	ab13      	add	r3, sp, #76	; 0x4c
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	4632      	mov	r2, r6
 8007998:	463b      	mov	r3, r7
 800799a:	4620      	mov	r0, r4
 800799c:	f001 fbe2 	bl	8009164 <__d2b>
 80079a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80079a4:	4683      	mov	fp, r0
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	d07d      	beq.n	8007aa6 <_dtoa_r+0x1e6>
 80079aa:	46b0      	mov	r8, r6
 80079ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079b0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80079b4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80079b8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079bc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80079c0:	2200      	movs	r2, #0
 80079c2:	4b89      	ldr	r3, [pc, #548]	; (8007be8 <_dtoa_r+0x328>)
 80079c4:	4640      	mov	r0, r8
 80079c6:	4649      	mov	r1, r9
 80079c8:	f7f8 fbce 	bl	8000168 <__aeabi_dsub>
 80079cc:	a37c      	add	r3, pc, #496	; (adr r3, 8007bc0 <_dtoa_r+0x300>)
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	f7f8 fd81 	bl	80004d8 <__aeabi_dmul>
 80079d6:	a37c      	add	r3, pc, #496	; (adr r3, 8007bc8 <_dtoa_r+0x308>)
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f7f8 fbc6 	bl	800016c <__adddf3>
 80079e0:	4606      	mov	r6, r0
 80079e2:	4628      	mov	r0, r5
 80079e4:	460f      	mov	r7, r1
 80079e6:	f7f8 fd0d 	bl	8000404 <__aeabi_i2d>
 80079ea:	a379      	add	r3, pc, #484	; (adr r3, 8007bd0 <_dtoa_r+0x310>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f7f8 fd72 	bl	80004d8 <__aeabi_dmul>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4630      	mov	r0, r6
 80079fa:	4639      	mov	r1, r7
 80079fc:	f7f8 fbb6 	bl	800016c <__adddf3>
 8007a00:	4606      	mov	r6, r0
 8007a02:	460f      	mov	r7, r1
 8007a04:	f7f9 f818 	bl	8000a38 <__aeabi_d2iz>
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4682      	mov	sl, r0
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4630      	mov	r0, r6
 8007a10:	4639      	mov	r1, r7
 8007a12:	f7f8 ffd3 	bl	80009bc <__aeabi_dcmplt>
 8007a16:	b148      	cbz	r0, 8007a2c <_dtoa_r+0x16c>
 8007a18:	4650      	mov	r0, sl
 8007a1a:	f7f8 fcf3 	bl	8000404 <__aeabi_i2d>
 8007a1e:	4632      	mov	r2, r6
 8007a20:	463b      	mov	r3, r7
 8007a22:	f7f8 ffc1 	bl	80009a8 <__aeabi_dcmpeq>
 8007a26:	b908      	cbnz	r0, 8007a2c <_dtoa_r+0x16c>
 8007a28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a2c:	f1ba 0f16 	cmp.w	sl, #22
 8007a30:	d85a      	bhi.n	8007ae8 <_dtoa_r+0x228>
 8007a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a36:	496d      	ldr	r1, [pc, #436]	; (8007bec <_dtoa_r+0x32c>)
 8007a38:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a40:	f7f8 ffda 	bl	80009f8 <__aeabi_dcmpgt>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d051      	beq.n	8007aec <_dtoa_r+0x22c>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a4e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a52:	1b5d      	subs	r5, r3, r5
 8007a54:	1e6b      	subs	r3, r5, #1
 8007a56:	9307      	str	r3, [sp, #28]
 8007a58:	bf43      	ittte	mi
 8007a5a:	2300      	movmi	r3, #0
 8007a5c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007a60:	9307      	strmi	r3, [sp, #28]
 8007a62:	f04f 0900 	movpl.w	r9, #0
 8007a66:	f1ba 0f00 	cmp.w	sl, #0
 8007a6a:	db41      	blt.n	8007af0 <_dtoa_r+0x230>
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007a72:	4453      	add	r3, sl
 8007a74:	9307      	str	r3, [sp, #28]
 8007a76:	2300      	movs	r3, #0
 8007a78:	9308      	str	r3, [sp, #32]
 8007a7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a7c:	2b09      	cmp	r3, #9
 8007a7e:	f200 808f 	bhi.w	8007ba0 <_dtoa_r+0x2e0>
 8007a82:	2b05      	cmp	r3, #5
 8007a84:	bfc4      	itt	gt
 8007a86:	3b04      	subgt	r3, #4
 8007a88:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007a8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a8c:	bfc8      	it	gt
 8007a8e:	2500      	movgt	r5, #0
 8007a90:	f1a3 0302 	sub.w	r3, r3, #2
 8007a94:	bfd8      	it	le
 8007a96:	2501      	movle	r5, #1
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	f200 808d 	bhi.w	8007bb8 <_dtoa_r+0x2f8>
 8007a9e:	e8df f003 	tbb	[pc, r3]
 8007aa2:	7d7b      	.short	0x7d7b
 8007aa4:	6f2f      	.short	0x6f2f
 8007aa6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007aaa:	441d      	add	r5, r3
 8007aac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007ab0:	2820      	cmp	r0, #32
 8007ab2:	dd13      	ble.n	8007adc <_dtoa_r+0x21c>
 8007ab4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007ab8:	9b02      	ldr	r3, [sp, #8]
 8007aba:	fa08 f800 	lsl.w	r8, r8, r0
 8007abe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007ac2:	fa23 f000 	lsr.w	r0, r3, r0
 8007ac6:	ea48 0000 	orr.w	r0, r8, r0
 8007aca:	f7f8 fc8b 	bl	80003e4 <__aeabi_ui2d>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4680      	mov	r8, r0
 8007ad2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007ad6:	3d01      	subs	r5, #1
 8007ad8:	9310      	str	r3, [sp, #64]	; 0x40
 8007ada:	e771      	b.n	80079c0 <_dtoa_r+0x100>
 8007adc:	9b02      	ldr	r3, [sp, #8]
 8007ade:	f1c0 0020 	rsb	r0, r0, #32
 8007ae2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ae6:	e7f0      	b.n	8007aca <_dtoa_r+0x20a>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e7b0      	b.n	8007a4e <_dtoa_r+0x18e>
 8007aec:	900d      	str	r0, [sp, #52]	; 0x34
 8007aee:	e7af      	b.n	8007a50 <_dtoa_r+0x190>
 8007af0:	f1ca 0300 	rsb	r3, sl, #0
 8007af4:	9308      	str	r3, [sp, #32]
 8007af6:	2300      	movs	r3, #0
 8007af8:	eba9 090a 	sub.w	r9, r9, sl
 8007afc:	930c      	str	r3, [sp, #48]	; 0x30
 8007afe:	e7bc      	b.n	8007a7a <_dtoa_r+0x1ba>
 8007b00:	2301      	movs	r3, #1
 8007b02:	9309      	str	r3, [sp, #36]	; 0x24
 8007b04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	dd74      	ble.n	8007bf4 <_dtoa_r+0x334>
 8007b0a:	4698      	mov	r8, r3
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b12:	6072      	str	r2, [r6, #4]
 8007b14:	2204      	movs	r2, #4
 8007b16:	f102 0014 	add.w	r0, r2, #20
 8007b1a:	4298      	cmp	r0, r3
 8007b1c:	6871      	ldr	r1, [r6, #4]
 8007b1e:	d96e      	bls.n	8007bfe <_dtoa_r+0x33e>
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 ffdf 	bl	8008ae4 <_Balloc>
 8007b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b28:	6030      	str	r0, [r6, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f1b8 0f0e 	cmp.w	r8, #14
 8007b30:	9306      	str	r3, [sp, #24]
 8007b32:	f200 80ed 	bhi.w	8007d10 <_dtoa_r+0x450>
 8007b36:	2d00      	cmp	r5, #0
 8007b38:	f000 80ea 	beq.w	8007d10 <_dtoa_r+0x450>
 8007b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b40:	f1ba 0f00 	cmp.w	sl, #0
 8007b44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007b48:	dd77      	ble.n	8007c3a <_dtoa_r+0x37a>
 8007b4a:	4a28      	ldr	r2, [pc, #160]	; (8007bec <_dtoa_r+0x32c>)
 8007b4c:	f00a 030f 	and.w	r3, sl, #15
 8007b50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007b54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b58:	06f0      	lsls	r0, r6, #27
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b62:	d568      	bpl.n	8007c36 <_dtoa_r+0x376>
 8007b64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b68:	4b21      	ldr	r3, [pc, #132]	; (8007bf0 <_dtoa_r+0x330>)
 8007b6a:	2503      	movs	r5, #3
 8007b6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b70:	f7f8 fddc 	bl	800072c <__aeabi_ddiv>
 8007b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b78:	f006 060f 	and.w	r6, r6, #15
 8007b7c:	4f1c      	ldr	r7, [pc, #112]	; (8007bf0 <_dtoa_r+0x330>)
 8007b7e:	e04f      	b.n	8007c20 <_dtoa_r+0x360>
 8007b80:	2301      	movs	r3, #1
 8007b82:	9309      	str	r3, [sp, #36]	; 0x24
 8007b84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b86:	4453      	add	r3, sl
 8007b88:	f103 0801 	add.w	r8, r3, #1
 8007b8c:	9304      	str	r3, [sp, #16]
 8007b8e:	4643      	mov	r3, r8
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	bfb8      	it	lt
 8007b94:	2301      	movlt	r3, #1
 8007b96:	e7ba      	b.n	8007b0e <_dtoa_r+0x24e>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e7b2      	b.n	8007b02 <_dtoa_r+0x242>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e7f0      	b.n	8007b82 <_dtoa_r+0x2c2>
 8007ba0:	2501      	movs	r5, #1
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	9509      	str	r5, [sp, #36]	; 0x24
 8007ba6:	931e      	str	r3, [sp, #120]	; 0x78
 8007ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bac:	2200      	movs	r2, #0
 8007bae:	9304      	str	r3, [sp, #16]
 8007bb0:	4698      	mov	r8, r3
 8007bb2:	2312      	movs	r3, #18
 8007bb4:	921f      	str	r2, [sp, #124]	; 0x7c
 8007bb6:	e7aa      	b.n	8007b0e <_dtoa_r+0x24e>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	9309      	str	r3, [sp, #36]	; 0x24
 8007bbc:	e7f4      	b.n	8007ba8 <_dtoa_r+0x2e8>
 8007bbe:	bf00      	nop
 8007bc0:	636f4361 	.word	0x636f4361
 8007bc4:	3fd287a7 	.word	0x3fd287a7
 8007bc8:	8b60c8b3 	.word	0x8b60c8b3
 8007bcc:	3fc68a28 	.word	0x3fc68a28
 8007bd0:	509f79fb 	.word	0x509f79fb
 8007bd4:	3fd34413 	.word	0x3fd34413
 8007bd8:	7ff00000 	.word	0x7ff00000
 8007bdc:	080097c1 	.word	0x080097c1
 8007be0:	080097b8 	.word	0x080097b8
 8007be4:	0800973d 	.word	0x0800973d
 8007be8:	3ff80000 	.word	0x3ff80000
 8007bec:	080097f8 	.word	0x080097f8
 8007bf0:	080097d0 	.word	0x080097d0
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	4698      	mov	r8, r3
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	e7da      	b.n	8007bb4 <_dtoa_r+0x2f4>
 8007bfe:	3101      	adds	r1, #1
 8007c00:	6071      	str	r1, [r6, #4]
 8007c02:	0052      	lsls	r2, r2, #1
 8007c04:	e787      	b.n	8007b16 <_dtoa_r+0x256>
 8007c06:	07f1      	lsls	r1, r6, #31
 8007c08:	d508      	bpl.n	8007c1c <_dtoa_r+0x35c>
 8007c0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c12:	f7f8 fc61 	bl	80004d8 <__aeabi_dmul>
 8007c16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007c1a:	3501      	adds	r5, #1
 8007c1c:	1076      	asrs	r6, r6, #1
 8007c1e:	3708      	adds	r7, #8
 8007c20:	2e00      	cmp	r6, #0
 8007c22:	d1f0      	bne.n	8007c06 <_dtoa_r+0x346>
 8007c24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2c:	f7f8 fd7e 	bl	800072c <__aeabi_ddiv>
 8007c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c34:	e01b      	b.n	8007c6e <_dtoa_r+0x3ae>
 8007c36:	2502      	movs	r5, #2
 8007c38:	e7a0      	b.n	8007b7c <_dtoa_r+0x2bc>
 8007c3a:	f000 80a4 	beq.w	8007d86 <_dtoa_r+0x4c6>
 8007c3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007c42:	f1ca 0600 	rsb	r6, sl, #0
 8007c46:	4ba0      	ldr	r3, [pc, #640]	; (8007ec8 <_dtoa_r+0x608>)
 8007c48:	f006 020f 	and.w	r2, r6, #15
 8007c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f7f8 fc40 	bl	80004d8 <__aeabi_dmul>
 8007c58:	2502      	movs	r5, #2
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c60:	4f9a      	ldr	r7, [pc, #616]	; (8007ecc <_dtoa_r+0x60c>)
 8007c62:	1136      	asrs	r6, r6, #4
 8007c64:	2e00      	cmp	r6, #0
 8007c66:	f040 8083 	bne.w	8007d70 <_dtoa_r+0x4b0>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e0      	bne.n	8007c30 <_dtoa_r+0x370>
 8007c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 808a 	beq.w	8007d8a <_dtoa_r+0x4ca>
 8007c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007c7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c82:	2200      	movs	r2, #0
 8007c84:	4b92      	ldr	r3, [pc, #584]	; (8007ed0 <_dtoa_r+0x610>)
 8007c86:	f7f8 fe99 	bl	80009bc <__aeabi_dcmplt>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d07d      	beq.n	8007d8a <_dtoa_r+0x4ca>
 8007c8e:	f1b8 0f00 	cmp.w	r8, #0
 8007c92:	d07a      	beq.n	8007d8a <_dtoa_r+0x4ca>
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	dd36      	ble.n	8007d08 <_dtoa_r+0x448>
 8007c9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	4b8c      	ldr	r3, [pc, #560]	; (8007ed4 <_dtoa_r+0x614>)
 8007ca2:	f7f8 fc19 	bl	80004d8 <__aeabi_dmul>
 8007ca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007caa:	9e04      	ldr	r6, [sp, #16]
 8007cac:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007cb0:	3501      	adds	r5, #1
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f7f8 fba6 	bl	8000404 <__aeabi_i2d>
 8007cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cbc:	f7f8 fc0c 	bl	80004d8 <__aeabi_dmul>
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4b85      	ldr	r3, [pc, #532]	; (8007ed8 <_dtoa_r+0x618>)
 8007cc4:	f7f8 fa52 	bl	800016c <__adddf3>
 8007cc8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007ccc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007cd0:	950b      	str	r5, [sp, #44]	; 0x2c
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	d15c      	bne.n	8007d90 <_dtoa_r+0x4d0>
 8007cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	4b7f      	ldr	r3, [pc, #508]	; (8007edc <_dtoa_r+0x61c>)
 8007cde:	f7f8 fa43 	bl	8000168 <__aeabi_dsub>
 8007ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cea:	f7f8 fe85 	bl	80009f8 <__aeabi_dcmpgt>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	f040 8281 	bne.w	80081f6 <_dtoa_r+0x936>
 8007cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cfa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007cfe:	f7f8 fe5d 	bl	80009bc <__aeabi_dcmplt>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	f040 8275 	bne.w	80081f2 <_dtoa_r+0x932>
 8007d08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f2c0 814b 	blt.w	8007fae <_dtoa_r+0x6ee>
 8007d18:	f1ba 0f0e 	cmp.w	sl, #14
 8007d1c:	f300 8147 	bgt.w	8007fae <_dtoa_r+0x6ee>
 8007d20:	4b69      	ldr	r3, [pc, #420]	; (8007ec8 <_dtoa_r+0x608>)
 8007d22:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f280 80d7 	bge.w	8007ee4 <_dtoa_r+0x624>
 8007d36:	f1b8 0f00 	cmp.w	r8, #0
 8007d3a:	f300 80d3 	bgt.w	8007ee4 <_dtoa_r+0x624>
 8007d3e:	f040 8257 	bne.w	80081f0 <_dtoa_r+0x930>
 8007d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d46:	2200      	movs	r2, #0
 8007d48:	4b64      	ldr	r3, [pc, #400]	; (8007edc <_dtoa_r+0x61c>)
 8007d4a:	f7f8 fbc5 	bl	80004d8 <__aeabi_dmul>
 8007d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d52:	f7f8 fe47 	bl	80009e4 <__aeabi_dcmpge>
 8007d56:	4646      	mov	r6, r8
 8007d58:	4647      	mov	r7, r8
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f040 822d 	bne.w	80081ba <_dtoa_r+0x8fa>
 8007d60:	9b06      	ldr	r3, [sp, #24]
 8007d62:	9a06      	ldr	r2, [sp, #24]
 8007d64:	1c5d      	adds	r5, r3, #1
 8007d66:	2331      	movs	r3, #49	; 0x31
 8007d68:	f10a 0a01 	add.w	sl, sl, #1
 8007d6c:	7013      	strb	r3, [r2, #0]
 8007d6e:	e228      	b.n	80081c2 <_dtoa_r+0x902>
 8007d70:	07f2      	lsls	r2, r6, #31
 8007d72:	d505      	bpl.n	8007d80 <_dtoa_r+0x4c0>
 8007d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d78:	f7f8 fbae 	bl	80004d8 <__aeabi_dmul>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	3501      	adds	r5, #1
 8007d80:	1076      	asrs	r6, r6, #1
 8007d82:	3708      	adds	r7, #8
 8007d84:	e76e      	b.n	8007c64 <_dtoa_r+0x3a4>
 8007d86:	2502      	movs	r5, #2
 8007d88:	e771      	b.n	8007c6e <_dtoa_r+0x3ae>
 8007d8a:	4657      	mov	r7, sl
 8007d8c:	4646      	mov	r6, r8
 8007d8e:	e790      	b.n	8007cb2 <_dtoa_r+0x3f2>
 8007d90:	4b4d      	ldr	r3, [pc, #308]	; (8007ec8 <_dtoa_r+0x608>)
 8007d92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d96:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d048      	beq.n	8007e32 <_dtoa_r+0x572>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	2000      	movs	r0, #0
 8007da6:	494e      	ldr	r1, [pc, #312]	; (8007ee0 <_dtoa_r+0x620>)
 8007da8:	f7f8 fcc0 	bl	800072c <__aeabi_ddiv>
 8007dac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007db0:	f7f8 f9da 	bl	8000168 <__aeabi_dsub>
 8007db4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007db8:	9d06      	ldr	r5, [sp, #24]
 8007dba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dbe:	f7f8 fe3b 	bl	8000a38 <__aeabi_d2iz>
 8007dc2:	9011      	str	r0, [sp, #68]	; 0x44
 8007dc4:	f7f8 fb1e 	bl	8000404 <__aeabi_i2d>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd0:	f7f8 f9ca 	bl	8000168 <__aeabi_dsub>
 8007dd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dda:	3330      	adds	r3, #48	; 0x30
 8007ddc:	f805 3b01 	strb.w	r3, [r5], #1
 8007de0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007de4:	f7f8 fdea 	bl	80009bc <__aeabi_dcmplt>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d163      	bne.n	8007eb4 <_dtoa_r+0x5f4>
 8007dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007df0:	2000      	movs	r0, #0
 8007df2:	4937      	ldr	r1, [pc, #220]	; (8007ed0 <_dtoa_r+0x610>)
 8007df4:	f7f8 f9b8 	bl	8000168 <__aeabi_dsub>
 8007df8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007dfc:	f7f8 fdde 	bl	80009bc <__aeabi_dcmplt>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	f040 80b5 	bne.w	8007f70 <_dtoa_r+0x6b0>
 8007e06:	9b06      	ldr	r3, [sp, #24]
 8007e08:	1aeb      	subs	r3, r5, r3
 8007e0a:	429e      	cmp	r6, r3
 8007e0c:	f77f af7c 	ble.w	8007d08 <_dtoa_r+0x448>
 8007e10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e14:	2200      	movs	r2, #0
 8007e16:	4b2f      	ldr	r3, [pc, #188]	; (8007ed4 <_dtoa_r+0x614>)
 8007e18:	f7f8 fb5e 	bl	80004d8 <__aeabi_dmul>
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e26:	4b2b      	ldr	r3, [pc, #172]	; (8007ed4 <_dtoa_r+0x614>)
 8007e28:	f7f8 fb56 	bl	80004d8 <__aeabi_dmul>
 8007e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e30:	e7c3      	b.n	8007dba <_dtoa_r+0x4fa>
 8007e32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e36:	f7f8 fb4f 	bl	80004d8 <__aeabi_dmul>
 8007e3a:	9b06      	ldr	r3, [sp, #24]
 8007e3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e40:	199d      	adds	r5, r3, r6
 8007e42:	461e      	mov	r6, r3
 8007e44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e48:	f7f8 fdf6 	bl	8000a38 <__aeabi_d2iz>
 8007e4c:	9011      	str	r0, [sp, #68]	; 0x44
 8007e4e:	f7f8 fad9 	bl	8000404 <__aeabi_i2d>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e5a:	f7f8 f985 	bl	8000168 <__aeabi_dsub>
 8007e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e64:	3330      	adds	r3, #48	; 0x30
 8007e66:	f806 3b01 	strb.w	r3, [r6], #1
 8007e6a:	42ae      	cmp	r6, r5
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	d124      	bne.n	8007ebc <_dtoa_r+0x5fc>
 8007e72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e76:	4b1a      	ldr	r3, [pc, #104]	; (8007ee0 <_dtoa_r+0x620>)
 8007e78:	f7f8 f978 	bl	800016c <__adddf3>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e84:	f7f8 fdb8 	bl	80009f8 <__aeabi_dcmpgt>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d171      	bne.n	8007f70 <_dtoa_r+0x6b0>
 8007e8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e90:	2000      	movs	r0, #0
 8007e92:	4913      	ldr	r1, [pc, #76]	; (8007ee0 <_dtoa_r+0x620>)
 8007e94:	f7f8 f968 	bl	8000168 <__aeabi_dsub>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea0:	f7f8 fd8c 	bl	80009bc <__aeabi_dcmplt>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	f43f af2f 	beq.w	8007d08 <_dtoa_r+0x448>
 8007eaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007eae:	1e6a      	subs	r2, r5, #1
 8007eb0:	2b30      	cmp	r3, #48	; 0x30
 8007eb2:	d001      	beq.n	8007eb8 <_dtoa_r+0x5f8>
 8007eb4:	46ba      	mov	sl, r7
 8007eb6:	e04a      	b.n	8007f4e <_dtoa_r+0x68e>
 8007eb8:	4615      	mov	r5, r2
 8007eba:	e7f6      	b.n	8007eaa <_dtoa_r+0x5ea>
 8007ebc:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <_dtoa_r+0x614>)
 8007ebe:	f7f8 fb0b 	bl	80004d8 <__aeabi_dmul>
 8007ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ec6:	e7bd      	b.n	8007e44 <_dtoa_r+0x584>
 8007ec8:	080097f8 	.word	0x080097f8
 8007ecc:	080097d0 	.word	0x080097d0
 8007ed0:	3ff00000 	.word	0x3ff00000
 8007ed4:	40240000 	.word	0x40240000
 8007ed8:	401c0000 	.word	0x401c0000
 8007edc:	40140000 	.word	0x40140000
 8007ee0:	3fe00000 	.word	0x3fe00000
 8007ee4:	9d06      	ldr	r5, [sp, #24]
 8007ee6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eee:	4630      	mov	r0, r6
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	f7f8 fc1b 	bl	800072c <__aeabi_ddiv>
 8007ef6:	f7f8 fd9f 	bl	8000a38 <__aeabi_d2iz>
 8007efa:	4681      	mov	r9, r0
 8007efc:	f7f8 fa82 	bl	8000404 <__aeabi_i2d>
 8007f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f04:	f7f8 fae8 	bl	80004d8 <__aeabi_dmul>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7f8 f92a 	bl	8000168 <__aeabi_dsub>
 8007f14:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007f18:	f805 6b01 	strb.w	r6, [r5], #1
 8007f1c:	9e06      	ldr	r6, [sp, #24]
 8007f1e:	4602      	mov	r2, r0
 8007f20:	1bae      	subs	r6, r5, r6
 8007f22:	45b0      	cmp	r8, r6
 8007f24:	460b      	mov	r3, r1
 8007f26:	d135      	bne.n	8007f94 <_dtoa_r+0x6d4>
 8007f28:	f7f8 f920 	bl	800016c <__adddf3>
 8007f2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f30:	4606      	mov	r6, r0
 8007f32:	460f      	mov	r7, r1
 8007f34:	f7f8 fd60 	bl	80009f8 <__aeabi_dcmpgt>
 8007f38:	b9c8      	cbnz	r0, 8007f6e <_dtoa_r+0x6ae>
 8007f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f3e:	4630      	mov	r0, r6
 8007f40:	4639      	mov	r1, r7
 8007f42:	f7f8 fd31 	bl	80009a8 <__aeabi_dcmpeq>
 8007f46:	b110      	cbz	r0, 8007f4e <_dtoa_r+0x68e>
 8007f48:	f019 0f01 	tst.w	r9, #1
 8007f4c:	d10f      	bne.n	8007f6e <_dtoa_r+0x6ae>
 8007f4e:	4659      	mov	r1, fp
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fdfb 	bl	8008b4c <_Bfree>
 8007f56:	2300      	movs	r3, #0
 8007f58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f5a:	702b      	strb	r3, [r5, #0]
 8007f5c:	f10a 0301 	add.w	r3, sl, #1
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f43f acf3 	beq.w	8007950 <_dtoa_r+0x90>
 8007f6a:	601d      	str	r5, [r3, #0]
 8007f6c:	e4f0      	b.n	8007950 <_dtoa_r+0x90>
 8007f6e:	4657      	mov	r7, sl
 8007f70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f74:	1e6b      	subs	r3, r5, #1
 8007f76:	2a39      	cmp	r2, #57	; 0x39
 8007f78:	d106      	bne.n	8007f88 <_dtoa_r+0x6c8>
 8007f7a:	9a06      	ldr	r2, [sp, #24]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d107      	bne.n	8007f90 <_dtoa_r+0x6d0>
 8007f80:	2330      	movs	r3, #48	; 0x30
 8007f82:	7013      	strb	r3, [r2, #0]
 8007f84:	4613      	mov	r3, r2
 8007f86:	3701      	adds	r7, #1
 8007f88:	781a      	ldrb	r2, [r3, #0]
 8007f8a:	3201      	adds	r2, #1
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	e791      	b.n	8007eb4 <_dtoa_r+0x5f4>
 8007f90:	461d      	mov	r5, r3
 8007f92:	e7ed      	b.n	8007f70 <_dtoa_r+0x6b0>
 8007f94:	2200      	movs	r2, #0
 8007f96:	4b99      	ldr	r3, [pc, #612]	; (80081fc <_dtoa_r+0x93c>)
 8007f98:	f7f8 fa9e 	bl	80004d8 <__aeabi_dmul>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	460f      	mov	r7, r1
 8007fa4:	f7f8 fd00 	bl	80009a8 <__aeabi_dcmpeq>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d09e      	beq.n	8007eea <_dtoa_r+0x62a>
 8007fac:	e7cf      	b.n	8007f4e <_dtoa_r+0x68e>
 8007fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fb0:	2a00      	cmp	r2, #0
 8007fb2:	f000 8088 	beq.w	80080c6 <_dtoa_r+0x806>
 8007fb6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007fb8:	2a01      	cmp	r2, #1
 8007fba:	dc6d      	bgt.n	8008098 <_dtoa_r+0x7d8>
 8007fbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	d066      	beq.n	8008090 <_dtoa_r+0x7d0>
 8007fc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fc6:	464d      	mov	r5, r9
 8007fc8:	9e08      	ldr	r6, [sp, #32]
 8007fca:	9a07      	ldr	r2, [sp, #28]
 8007fcc:	2101      	movs	r1, #1
 8007fce:	441a      	add	r2, r3
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	4499      	add	r9, r3
 8007fd4:	9207      	str	r2, [sp, #28]
 8007fd6:	f000 fe97 	bl	8008d08 <__i2b>
 8007fda:	4607      	mov	r7, r0
 8007fdc:	2d00      	cmp	r5, #0
 8007fde:	dd0b      	ble.n	8007ff8 <_dtoa_r+0x738>
 8007fe0:	9b07      	ldr	r3, [sp, #28]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	dd08      	ble.n	8007ff8 <_dtoa_r+0x738>
 8007fe6:	42ab      	cmp	r3, r5
 8007fe8:	bfa8      	it	ge
 8007fea:	462b      	movge	r3, r5
 8007fec:	9a07      	ldr	r2, [sp, #28]
 8007fee:	eba9 0903 	sub.w	r9, r9, r3
 8007ff2:	1aed      	subs	r5, r5, r3
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	9307      	str	r3, [sp, #28]
 8007ff8:	9b08      	ldr	r3, [sp, #32]
 8007ffa:	b1eb      	cbz	r3, 8008038 <_dtoa_r+0x778>
 8007ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d065      	beq.n	80080ce <_dtoa_r+0x80e>
 8008002:	b18e      	cbz	r6, 8008028 <_dtoa_r+0x768>
 8008004:	4639      	mov	r1, r7
 8008006:	4632      	mov	r2, r6
 8008008:	4620      	mov	r0, r4
 800800a:	f000 ff1b 	bl	8008e44 <__pow5mult>
 800800e:	465a      	mov	r2, fp
 8008010:	4601      	mov	r1, r0
 8008012:	4607      	mov	r7, r0
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fe80 	bl	8008d1a <__multiply>
 800801a:	4659      	mov	r1, fp
 800801c:	900a      	str	r0, [sp, #40]	; 0x28
 800801e:	4620      	mov	r0, r4
 8008020:	f000 fd94 	bl	8008b4c <_Bfree>
 8008024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008026:	469b      	mov	fp, r3
 8008028:	9b08      	ldr	r3, [sp, #32]
 800802a:	1b9a      	subs	r2, r3, r6
 800802c:	d004      	beq.n	8008038 <_dtoa_r+0x778>
 800802e:	4659      	mov	r1, fp
 8008030:	4620      	mov	r0, r4
 8008032:	f000 ff07 	bl	8008e44 <__pow5mult>
 8008036:	4683      	mov	fp, r0
 8008038:	2101      	movs	r1, #1
 800803a:	4620      	mov	r0, r4
 800803c:	f000 fe64 	bl	8008d08 <__i2b>
 8008040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008042:	4606      	mov	r6, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 81c6 	beq.w	80083d6 <_dtoa_r+0xb16>
 800804a:	461a      	mov	r2, r3
 800804c:	4601      	mov	r1, r0
 800804e:	4620      	mov	r0, r4
 8008050:	f000 fef8 	bl	8008e44 <__pow5mult>
 8008054:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008056:	4606      	mov	r6, r0
 8008058:	2b01      	cmp	r3, #1
 800805a:	dc3e      	bgt.n	80080da <_dtoa_r+0x81a>
 800805c:	9b02      	ldr	r3, [sp, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d137      	bne.n	80080d2 <_dtoa_r+0x812>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008068:	2b00      	cmp	r3, #0
 800806a:	d134      	bne.n	80080d6 <_dtoa_r+0x816>
 800806c:	9b03      	ldr	r3, [sp, #12]
 800806e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008072:	0d1b      	lsrs	r3, r3, #20
 8008074:	051b      	lsls	r3, r3, #20
 8008076:	b12b      	cbz	r3, 8008084 <_dtoa_r+0x7c4>
 8008078:	9b07      	ldr	r3, [sp, #28]
 800807a:	f109 0901 	add.w	r9, r9, #1
 800807e:	3301      	adds	r3, #1
 8008080:	9307      	str	r3, [sp, #28]
 8008082:	2301      	movs	r3, #1
 8008084:	9308      	str	r3, [sp, #32]
 8008086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008088:	2b00      	cmp	r3, #0
 800808a:	d128      	bne.n	80080de <_dtoa_r+0x81e>
 800808c:	2001      	movs	r0, #1
 800808e:	e02e      	b.n	80080ee <_dtoa_r+0x82e>
 8008090:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008092:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008096:	e796      	b.n	8007fc6 <_dtoa_r+0x706>
 8008098:	9b08      	ldr	r3, [sp, #32]
 800809a:	f108 36ff 	add.w	r6, r8, #4294967295
 800809e:	42b3      	cmp	r3, r6
 80080a0:	bfb7      	itett	lt
 80080a2:	9b08      	ldrlt	r3, [sp, #32]
 80080a4:	1b9e      	subge	r6, r3, r6
 80080a6:	1af2      	sublt	r2, r6, r3
 80080a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80080aa:	bfbf      	itttt	lt
 80080ac:	9608      	strlt	r6, [sp, #32]
 80080ae:	189b      	addlt	r3, r3, r2
 80080b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80080b2:	2600      	movlt	r6, #0
 80080b4:	f1b8 0f00 	cmp.w	r8, #0
 80080b8:	bfb9      	ittee	lt
 80080ba:	eba9 0508 	sublt.w	r5, r9, r8
 80080be:	2300      	movlt	r3, #0
 80080c0:	464d      	movge	r5, r9
 80080c2:	4643      	movge	r3, r8
 80080c4:	e781      	b.n	8007fca <_dtoa_r+0x70a>
 80080c6:	9e08      	ldr	r6, [sp, #32]
 80080c8:	464d      	mov	r5, r9
 80080ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80080cc:	e786      	b.n	8007fdc <_dtoa_r+0x71c>
 80080ce:	9a08      	ldr	r2, [sp, #32]
 80080d0:	e7ad      	b.n	800802e <_dtoa_r+0x76e>
 80080d2:	2300      	movs	r3, #0
 80080d4:	e7d6      	b.n	8008084 <_dtoa_r+0x7c4>
 80080d6:	9b02      	ldr	r3, [sp, #8]
 80080d8:	e7d4      	b.n	8008084 <_dtoa_r+0x7c4>
 80080da:	2300      	movs	r3, #0
 80080dc:	9308      	str	r3, [sp, #32]
 80080de:	6933      	ldr	r3, [r6, #16]
 80080e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80080e4:	6918      	ldr	r0, [r3, #16]
 80080e6:	f000 fdc1 	bl	8008c6c <__hi0bits>
 80080ea:	f1c0 0020 	rsb	r0, r0, #32
 80080ee:	9b07      	ldr	r3, [sp, #28]
 80080f0:	4418      	add	r0, r3
 80080f2:	f010 001f 	ands.w	r0, r0, #31
 80080f6:	d047      	beq.n	8008188 <_dtoa_r+0x8c8>
 80080f8:	f1c0 0320 	rsb	r3, r0, #32
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	dd3b      	ble.n	8008178 <_dtoa_r+0x8b8>
 8008100:	9b07      	ldr	r3, [sp, #28]
 8008102:	f1c0 001c 	rsb	r0, r0, #28
 8008106:	4481      	add	r9, r0
 8008108:	4405      	add	r5, r0
 800810a:	4403      	add	r3, r0
 800810c:	9307      	str	r3, [sp, #28]
 800810e:	f1b9 0f00 	cmp.w	r9, #0
 8008112:	dd05      	ble.n	8008120 <_dtoa_r+0x860>
 8008114:	4659      	mov	r1, fp
 8008116:	464a      	mov	r2, r9
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fee1 	bl	8008ee0 <__lshift>
 800811e:	4683      	mov	fp, r0
 8008120:	9b07      	ldr	r3, [sp, #28]
 8008122:	2b00      	cmp	r3, #0
 8008124:	dd05      	ble.n	8008132 <_dtoa_r+0x872>
 8008126:	4631      	mov	r1, r6
 8008128:	461a      	mov	r2, r3
 800812a:	4620      	mov	r0, r4
 800812c:	f000 fed8 	bl	8008ee0 <__lshift>
 8008130:	4606      	mov	r6, r0
 8008132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008134:	b353      	cbz	r3, 800818c <_dtoa_r+0x8cc>
 8008136:	4631      	mov	r1, r6
 8008138:	4658      	mov	r0, fp
 800813a:	f000 ff25 	bl	8008f88 <__mcmp>
 800813e:	2800      	cmp	r0, #0
 8008140:	da24      	bge.n	800818c <_dtoa_r+0x8cc>
 8008142:	2300      	movs	r3, #0
 8008144:	4659      	mov	r1, fp
 8008146:	220a      	movs	r2, #10
 8008148:	4620      	mov	r0, r4
 800814a:	f000 fd16 	bl	8008b7a <__multadd>
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008154:	4683      	mov	fp, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 8144 	beq.w	80083e4 <_dtoa_r+0xb24>
 800815c:	2300      	movs	r3, #0
 800815e:	4639      	mov	r1, r7
 8008160:	220a      	movs	r2, #10
 8008162:	4620      	mov	r0, r4
 8008164:	f000 fd09 	bl	8008b7a <__multadd>
 8008168:	9b04      	ldr	r3, [sp, #16]
 800816a:	4607      	mov	r7, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	dc4d      	bgt.n	800820c <_dtoa_r+0x94c>
 8008170:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008172:	2b02      	cmp	r3, #2
 8008174:	dd4a      	ble.n	800820c <_dtoa_r+0x94c>
 8008176:	e011      	b.n	800819c <_dtoa_r+0x8dc>
 8008178:	d0c9      	beq.n	800810e <_dtoa_r+0x84e>
 800817a:	9a07      	ldr	r2, [sp, #28]
 800817c:	331c      	adds	r3, #28
 800817e:	441a      	add	r2, r3
 8008180:	4499      	add	r9, r3
 8008182:	441d      	add	r5, r3
 8008184:	4613      	mov	r3, r2
 8008186:	e7c1      	b.n	800810c <_dtoa_r+0x84c>
 8008188:	4603      	mov	r3, r0
 800818a:	e7f6      	b.n	800817a <_dtoa_r+0x8ba>
 800818c:	f1b8 0f00 	cmp.w	r8, #0
 8008190:	dc36      	bgt.n	8008200 <_dtoa_r+0x940>
 8008192:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008194:	2b02      	cmp	r3, #2
 8008196:	dd33      	ble.n	8008200 <_dtoa_r+0x940>
 8008198:	f8cd 8010 	str.w	r8, [sp, #16]
 800819c:	9b04      	ldr	r3, [sp, #16]
 800819e:	b963      	cbnz	r3, 80081ba <_dtoa_r+0x8fa>
 80081a0:	4631      	mov	r1, r6
 80081a2:	2205      	movs	r2, #5
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 fce8 	bl	8008b7a <__multadd>
 80081aa:	4601      	mov	r1, r0
 80081ac:	4606      	mov	r6, r0
 80081ae:	4658      	mov	r0, fp
 80081b0:	f000 feea 	bl	8008f88 <__mcmp>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	f73f add3 	bgt.w	8007d60 <_dtoa_r+0x4a0>
 80081ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80081bc:	9d06      	ldr	r5, [sp, #24]
 80081be:	ea6f 0a03 	mvn.w	sl, r3
 80081c2:	f04f 0900 	mov.w	r9, #0
 80081c6:	4631      	mov	r1, r6
 80081c8:	4620      	mov	r0, r4
 80081ca:	f000 fcbf 	bl	8008b4c <_Bfree>
 80081ce:	2f00      	cmp	r7, #0
 80081d0:	f43f aebd 	beq.w	8007f4e <_dtoa_r+0x68e>
 80081d4:	f1b9 0f00 	cmp.w	r9, #0
 80081d8:	d005      	beq.n	80081e6 <_dtoa_r+0x926>
 80081da:	45b9      	cmp	r9, r7
 80081dc:	d003      	beq.n	80081e6 <_dtoa_r+0x926>
 80081de:	4649      	mov	r1, r9
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 fcb3 	bl	8008b4c <_Bfree>
 80081e6:	4639      	mov	r1, r7
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fcaf 	bl	8008b4c <_Bfree>
 80081ee:	e6ae      	b.n	8007f4e <_dtoa_r+0x68e>
 80081f0:	2600      	movs	r6, #0
 80081f2:	4637      	mov	r7, r6
 80081f4:	e7e1      	b.n	80081ba <_dtoa_r+0x8fa>
 80081f6:	46ba      	mov	sl, r7
 80081f8:	4637      	mov	r7, r6
 80081fa:	e5b1      	b.n	8007d60 <_dtoa_r+0x4a0>
 80081fc:	40240000 	.word	0x40240000
 8008200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008202:	f8cd 8010 	str.w	r8, [sp, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80f3 	beq.w	80083f2 <_dtoa_r+0xb32>
 800820c:	2d00      	cmp	r5, #0
 800820e:	dd05      	ble.n	800821c <_dtoa_r+0x95c>
 8008210:	4639      	mov	r1, r7
 8008212:	462a      	mov	r2, r5
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fe63 	bl	8008ee0 <__lshift>
 800821a:	4607      	mov	r7, r0
 800821c:	9b08      	ldr	r3, [sp, #32]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d04c      	beq.n	80082bc <_dtoa_r+0x9fc>
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	4620      	mov	r0, r4
 8008226:	f000 fc5d 	bl	8008ae4 <_Balloc>
 800822a:	4605      	mov	r5, r0
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	f107 010c 	add.w	r1, r7, #12
 8008232:	3202      	adds	r2, #2
 8008234:	0092      	lsls	r2, r2, #2
 8008236:	300c      	adds	r0, #12
 8008238:	f7fd fcd6 	bl	8005be8 <memcpy>
 800823c:	2201      	movs	r2, #1
 800823e:	4629      	mov	r1, r5
 8008240:	4620      	mov	r0, r4
 8008242:	f000 fe4d 	bl	8008ee0 <__lshift>
 8008246:	46b9      	mov	r9, r7
 8008248:	4607      	mov	r7, r0
 800824a:	9b06      	ldr	r3, [sp, #24]
 800824c:	9307      	str	r3, [sp, #28]
 800824e:	9b02      	ldr	r3, [sp, #8]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	9308      	str	r3, [sp, #32]
 8008256:	4631      	mov	r1, r6
 8008258:	4658      	mov	r0, fp
 800825a:	f7ff faa3 	bl	80077a4 <quorem>
 800825e:	4649      	mov	r1, r9
 8008260:	4605      	mov	r5, r0
 8008262:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008266:	4658      	mov	r0, fp
 8008268:	f000 fe8e 	bl	8008f88 <__mcmp>
 800826c:	463a      	mov	r2, r7
 800826e:	9002      	str	r0, [sp, #8]
 8008270:	4631      	mov	r1, r6
 8008272:	4620      	mov	r0, r4
 8008274:	f000 fea2 	bl	8008fbc <__mdiff>
 8008278:	68c3      	ldr	r3, [r0, #12]
 800827a:	4602      	mov	r2, r0
 800827c:	bb03      	cbnz	r3, 80082c0 <_dtoa_r+0xa00>
 800827e:	4601      	mov	r1, r0
 8008280:	9009      	str	r0, [sp, #36]	; 0x24
 8008282:	4658      	mov	r0, fp
 8008284:	f000 fe80 	bl	8008f88 <__mcmp>
 8008288:	4603      	mov	r3, r0
 800828a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800828c:	4611      	mov	r1, r2
 800828e:	4620      	mov	r0, r4
 8008290:	9309      	str	r3, [sp, #36]	; 0x24
 8008292:	f000 fc5b 	bl	8008b4c <_Bfree>
 8008296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008298:	b9a3      	cbnz	r3, 80082c4 <_dtoa_r+0xa04>
 800829a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800829c:	b992      	cbnz	r2, 80082c4 <_dtoa_r+0xa04>
 800829e:	9a08      	ldr	r2, [sp, #32]
 80082a0:	b982      	cbnz	r2, 80082c4 <_dtoa_r+0xa04>
 80082a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80082a6:	d029      	beq.n	80082fc <_dtoa_r+0xa3c>
 80082a8:	9b02      	ldr	r3, [sp, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dd01      	ble.n	80082b2 <_dtoa_r+0x9f2>
 80082ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80082b2:	9b07      	ldr	r3, [sp, #28]
 80082b4:	1c5d      	adds	r5, r3, #1
 80082b6:	f883 8000 	strb.w	r8, [r3]
 80082ba:	e784      	b.n	80081c6 <_dtoa_r+0x906>
 80082bc:	4638      	mov	r0, r7
 80082be:	e7c2      	b.n	8008246 <_dtoa_r+0x986>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e7e3      	b.n	800828c <_dtoa_r+0x9cc>
 80082c4:	9a02      	ldr	r2, [sp, #8]
 80082c6:	2a00      	cmp	r2, #0
 80082c8:	db04      	blt.n	80082d4 <_dtoa_r+0xa14>
 80082ca:	d123      	bne.n	8008314 <_dtoa_r+0xa54>
 80082cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80082ce:	bb0a      	cbnz	r2, 8008314 <_dtoa_r+0xa54>
 80082d0:	9a08      	ldr	r2, [sp, #32]
 80082d2:	b9fa      	cbnz	r2, 8008314 <_dtoa_r+0xa54>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	ddec      	ble.n	80082b2 <_dtoa_r+0x9f2>
 80082d8:	4659      	mov	r1, fp
 80082da:	2201      	movs	r2, #1
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 fdff 	bl	8008ee0 <__lshift>
 80082e2:	4631      	mov	r1, r6
 80082e4:	4683      	mov	fp, r0
 80082e6:	f000 fe4f 	bl	8008f88 <__mcmp>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	dc03      	bgt.n	80082f6 <_dtoa_r+0xa36>
 80082ee:	d1e0      	bne.n	80082b2 <_dtoa_r+0x9f2>
 80082f0:	f018 0f01 	tst.w	r8, #1
 80082f4:	d0dd      	beq.n	80082b2 <_dtoa_r+0x9f2>
 80082f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80082fa:	d1d8      	bne.n	80082ae <_dtoa_r+0x9ee>
 80082fc:	9b07      	ldr	r3, [sp, #28]
 80082fe:	9a07      	ldr	r2, [sp, #28]
 8008300:	1c5d      	adds	r5, r3, #1
 8008302:	2339      	movs	r3, #57	; 0x39
 8008304:	7013      	strb	r3, [r2, #0]
 8008306:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800830a:	1e6a      	subs	r2, r5, #1
 800830c:	2b39      	cmp	r3, #57	; 0x39
 800830e:	d04d      	beq.n	80083ac <_dtoa_r+0xaec>
 8008310:	3301      	adds	r3, #1
 8008312:	e052      	b.n	80083ba <_dtoa_r+0xafa>
 8008314:	9a07      	ldr	r2, [sp, #28]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f102 0501 	add.w	r5, r2, #1
 800831c:	dd06      	ble.n	800832c <_dtoa_r+0xa6c>
 800831e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008322:	d0eb      	beq.n	80082fc <_dtoa_r+0xa3c>
 8008324:	f108 0801 	add.w	r8, r8, #1
 8008328:	9b07      	ldr	r3, [sp, #28]
 800832a:	e7c4      	b.n	80082b6 <_dtoa_r+0x9f6>
 800832c:	9b06      	ldr	r3, [sp, #24]
 800832e:	9a04      	ldr	r2, [sp, #16]
 8008330:	1aeb      	subs	r3, r5, r3
 8008332:	4293      	cmp	r3, r2
 8008334:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008338:	d021      	beq.n	800837e <_dtoa_r+0xabe>
 800833a:	4659      	mov	r1, fp
 800833c:	2300      	movs	r3, #0
 800833e:	220a      	movs	r2, #10
 8008340:	4620      	mov	r0, r4
 8008342:	f000 fc1a 	bl	8008b7a <__multadd>
 8008346:	45b9      	cmp	r9, r7
 8008348:	4683      	mov	fp, r0
 800834a:	f04f 0300 	mov.w	r3, #0
 800834e:	f04f 020a 	mov.w	r2, #10
 8008352:	4649      	mov	r1, r9
 8008354:	4620      	mov	r0, r4
 8008356:	d105      	bne.n	8008364 <_dtoa_r+0xaa4>
 8008358:	f000 fc0f 	bl	8008b7a <__multadd>
 800835c:	4681      	mov	r9, r0
 800835e:	4607      	mov	r7, r0
 8008360:	9507      	str	r5, [sp, #28]
 8008362:	e778      	b.n	8008256 <_dtoa_r+0x996>
 8008364:	f000 fc09 	bl	8008b7a <__multadd>
 8008368:	4639      	mov	r1, r7
 800836a:	4681      	mov	r9, r0
 800836c:	2300      	movs	r3, #0
 800836e:	220a      	movs	r2, #10
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fc02 	bl	8008b7a <__multadd>
 8008376:	4607      	mov	r7, r0
 8008378:	e7f2      	b.n	8008360 <_dtoa_r+0xaa0>
 800837a:	f04f 0900 	mov.w	r9, #0
 800837e:	4659      	mov	r1, fp
 8008380:	2201      	movs	r2, #1
 8008382:	4620      	mov	r0, r4
 8008384:	f000 fdac 	bl	8008ee0 <__lshift>
 8008388:	4631      	mov	r1, r6
 800838a:	4683      	mov	fp, r0
 800838c:	f000 fdfc 	bl	8008f88 <__mcmp>
 8008390:	2800      	cmp	r0, #0
 8008392:	dcb8      	bgt.n	8008306 <_dtoa_r+0xa46>
 8008394:	d102      	bne.n	800839c <_dtoa_r+0xadc>
 8008396:	f018 0f01 	tst.w	r8, #1
 800839a:	d1b4      	bne.n	8008306 <_dtoa_r+0xa46>
 800839c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083a0:	1e6a      	subs	r2, r5, #1
 80083a2:	2b30      	cmp	r3, #48	; 0x30
 80083a4:	f47f af0f 	bne.w	80081c6 <_dtoa_r+0x906>
 80083a8:	4615      	mov	r5, r2
 80083aa:	e7f7      	b.n	800839c <_dtoa_r+0xadc>
 80083ac:	9b06      	ldr	r3, [sp, #24]
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d105      	bne.n	80083be <_dtoa_r+0xafe>
 80083b2:	2331      	movs	r3, #49	; 0x31
 80083b4:	9a06      	ldr	r2, [sp, #24]
 80083b6:	f10a 0a01 	add.w	sl, sl, #1
 80083ba:	7013      	strb	r3, [r2, #0]
 80083bc:	e703      	b.n	80081c6 <_dtoa_r+0x906>
 80083be:	4615      	mov	r5, r2
 80083c0:	e7a1      	b.n	8008306 <_dtoa_r+0xa46>
 80083c2:	4b17      	ldr	r3, [pc, #92]	; (8008420 <_dtoa_r+0xb60>)
 80083c4:	f7ff bae1 	b.w	800798a <_dtoa_r+0xca>
 80083c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f47f aabb 	bne.w	8007946 <_dtoa_r+0x86>
 80083d0:	4b14      	ldr	r3, [pc, #80]	; (8008424 <_dtoa_r+0xb64>)
 80083d2:	f7ff bada 	b.w	800798a <_dtoa_r+0xca>
 80083d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083d8:	2b01      	cmp	r3, #1
 80083da:	f77f ae3f 	ble.w	800805c <_dtoa_r+0x79c>
 80083de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083e0:	9308      	str	r3, [sp, #32]
 80083e2:	e653      	b.n	800808c <_dtoa_r+0x7cc>
 80083e4:	9b04      	ldr	r3, [sp, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dc03      	bgt.n	80083f2 <_dtoa_r+0xb32>
 80083ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	f73f aed5 	bgt.w	800819c <_dtoa_r+0x8dc>
 80083f2:	9d06      	ldr	r5, [sp, #24]
 80083f4:	4631      	mov	r1, r6
 80083f6:	4658      	mov	r0, fp
 80083f8:	f7ff f9d4 	bl	80077a4 <quorem>
 80083fc:	9b06      	ldr	r3, [sp, #24]
 80083fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008402:	f805 8b01 	strb.w	r8, [r5], #1
 8008406:	9a04      	ldr	r2, [sp, #16]
 8008408:	1aeb      	subs	r3, r5, r3
 800840a:	429a      	cmp	r2, r3
 800840c:	ddb5      	ble.n	800837a <_dtoa_r+0xaba>
 800840e:	4659      	mov	r1, fp
 8008410:	2300      	movs	r3, #0
 8008412:	220a      	movs	r2, #10
 8008414:	4620      	mov	r0, r4
 8008416:	f000 fbb0 	bl	8008b7a <__multadd>
 800841a:	4683      	mov	fp, r0
 800841c:	e7ea      	b.n	80083f4 <_dtoa_r+0xb34>
 800841e:	bf00      	nop
 8008420:	0800973c 	.word	0x0800973c
 8008424:	080097b8 	.word	0x080097b8

08008428 <rshift>:
 8008428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842a:	6906      	ldr	r6, [r0, #16]
 800842c:	114b      	asrs	r3, r1, #5
 800842e:	429e      	cmp	r6, r3
 8008430:	f100 0414 	add.w	r4, r0, #20
 8008434:	dd31      	ble.n	800849a <rshift+0x72>
 8008436:	f011 011f 	ands.w	r1, r1, #31
 800843a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800843e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008442:	d108      	bne.n	8008456 <rshift+0x2e>
 8008444:	4621      	mov	r1, r4
 8008446:	42b2      	cmp	r2, r6
 8008448:	460b      	mov	r3, r1
 800844a:	d211      	bcs.n	8008470 <rshift+0x48>
 800844c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008450:	f841 3b04 	str.w	r3, [r1], #4
 8008454:	e7f7      	b.n	8008446 <rshift+0x1e>
 8008456:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800845a:	4623      	mov	r3, r4
 800845c:	f1c1 0c20 	rsb	ip, r1, #32
 8008460:	40cd      	lsrs	r5, r1
 8008462:	3204      	adds	r2, #4
 8008464:	42b2      	cmp	r2, r6
 8008466:	4617      	mov	r7, r2
 8008468:	d30d      	bcc.n	8008486 <rshift+0x5e>
 800846a:	601d      	str	r5, [r3, #0]
 800846c:	b105      	cbz	r5, 8008470 <rshift+0x48>
 800846e:	3304      	adds	r3, #4
 8008470:	42a3      	cmp	r3, r4
 8008472:	eba3 0204 	sub.w	r2, r3, r4
 8008476:	bf08      	it	eq
 8008478:	2300      	moveq	r3, #0
 800847a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800847e:	6102      	str	r2, [r0, #16]
 8008480:	bf08      	it	eq
 8008482:	6143      	streq	r3, [r0, #20]
 8008484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008486:	683f      	ldr	r7, [r7, #0]
 8008488:	fa07 f70c 	lsl.w	r7, r7, ip
 800848c:	433d      	orrs	r5, r7
 800848e:	f843 5b04 	str.w	r5, [r3], #4
 8008492:	f852 5b04 	ldr.w	r5, [r2], #4
 8008496:	40cd      	lsrs	r5, r1
 8008498:	e7e4      	b.n	8008464 <rshift+0x3c>
 800849a:	4623      	mov	r3, r4
 800849c:	e7e8      	b.n	8008470 <rshift+0x48>

0800849e <__hexdig_fun>:
 800849e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80084a2:	2b09      	cmp	r3, #9
 80084a4:	d802      	bhi.n	80084ac <__hexdig_fun+0xe>
 80084a6:	3820      	subs	r0, #32
 80084a8:	b2c0      	uxtb	r0, r0
 80084aa:	4770      	bx	lr
 80084ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80084b0:	2b05      	cmp	r3, #5
 80084b2:	d801      	bhi.n	80084b8 <__hexdig_fun+0x1a>
 80084b4:	3847      	subs	r0, #71	; 0x47
 80084b6:	e7f7      	b.n	80084a8 <__hexdig_fun+0xa>
 80084b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80084bc:	2b05      	cmp	r3, #5
 80084be:	d801      	bhi.n	80084c4 <__hexdig_fun+0x26>
 80084c0:	3827      	subs	r0, #39	; 0x27
 80084c2:	e7f1      	b.n	80084a8 <__hexdig_fun+0xa>
 80084c4:	2000      	movs	r0, #0
 80084c6:	4770      	bx	lr

080084c8 <__gethex>:
 80084c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	b08b      	sub	sp, #44	; 0x2c
 80084ce:	9002      	str	r0, [sp, #8]
 80084d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80084d2:	468a      	mov	sl, r1
 80084d4:	4690      	mov	r8, r2
 80084d6:	9306      	str	r3, [sp, #24]
 80084d8:	f000 fad1 	bl	8008a7e <__localeconv_l>
 80084dc:	6803      	ldr	r3, [r0, #0]
 80084de:	f04f 0b00 	mov.w	fp, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	9303      	str	r3, [sp, #12]
 80084e6:	f7f7 fe33 	bl	8000150 <strlen>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	9001      	str	r0, [sp, #4]
 80084ee:	4403      	add	r3, r0
 80084f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80084f4:	9307      	str	r3, [sp, #28]
 80084f6:	f8da 3000 	ldr.w	r3, [sl]
 80084fa:	3302      	adds	r3, #2
 80084fc:	461f      	mov	r7, r3
 80084fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008502:	2830      	cmp	r0, #48	; 0x30
 8008504:	d06c      	beq.n	80085e0 <__gethex+0x118>
 8008506:	f7ff ffca 	bl	800849e <__hexdig_fun>
 800850a:	4604      	mov	r4, r0
 800850c:	2800      	cmp	r0, #0
 800850e:	d16a      	bne.n	80085e6 <__gethex+0x11e>
 8008510:	9a01      	ldr	r2, [sp, #4]
 8008512:	9903      	ldr	r1, [sp, #12]
 8008514:	4638      	mov	r0, r7
 8008516:	f001 f83d 	bl	8009594 <strncmp>
 800851a:	2800      	cmp	r0, #0
 800851c:	d166      	bne.n	80085ec <__gethex+0x124>
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	5cf8      	ldrb	r0, [r7, r3]
 8008522:	18fe      	adds	r6, r7, r3
 8008524:	f7ff ffbb 	bl	800849e <__hexdig_fun>
 8008528:	2800      	cmp	r0, #0
 800852a:	d062      	beq.n	80085f2 <__gethex+0x12a>
 800852c:	4633      	mov	r3, r6
 800852e:	7818      	ldrb	r0, [r3, #0]
 8008530:	461f      	mov	r7, r3
 8008532:	2830      	cmp	r0, #48	; 0x30
 8008534:	f103 0301 	add.w	r3, r3, #1
 8008538:	d0f9      	beq.n	800852e <__gethex+0x66>
 800853a:	f7ff ffb0 	bl	800849e <__hexdig_fun>
 800853e:	fab0 f580 	clz	r5, r0
 8008542:	4634      	mov	r4, r6
 8008544:	f04f 0b01 	mov.w	fp, #1
 8008548:	096d      	lsrs	r5, r5, #5
 800854a:	463a      	mov	r2, r7
 800854c:	4616      	mov	r6, r2
 800854e:	7830      	ldrb	r0, [r6, #0]
 8008550:	3201      	adds	r2, #1
 8008552:	f7ff ffa4 	bl	800849e <__hexdig_fun>
 8008556:	2800      	cmp	r0, #0
 8008558:	d1f8      	bne.n	800854c <__gethex+0x84>
 800855a:	9a01      	ldr	r2, [sp, #4]
 800855c:	9903      	ldr	r1, [sp, #12]
 800855e:	4630      	mov	r0, r6
 8008560:	f001 f818 	bl	8009594 <strncmp>
 8008564:	b950      	cbnz	r0, 800857c <__gethex+0xb4>
 8008566:	b954      	cbnz	r4, 800857e <__gethex+0xb6>
 8008568:	9b01      	ldr	r3, [sp, #4]
 800856a:	18f4      	adds	r4, r6, r3
 800856c:	4622      	mov	r2, r4
 800856e:	4616      	mov	r6, r2
 8008570:	7830      	ldrb	r0, [r6, #0]
 8008572:	3201      	adds	r2, #1
 8008574:	f7ff ff93 	bl	800849e <__hexdig_fun>
 8008578:	2800      	cmp	r0, #0
 800857a:	d1f8      	bne.n	800856e <__gethex+0xa6>
 800857c:	b10c      	cbz	r4, 8008582 <__gethex+0xba>
 800857e:	1ba4      	subs	r4, r4, r6
 8008580:	00a4      	lsls	r4, r4, #2
 8008582:	7833      	ldrb	r3, [r6, #0]
 8008584:	2b50      	cmp	r3, #80	; 0x50
 8008586:	d001      	beq.n	800858c <__gethex+0xc4>
 8008588:	2b70      	cmp	r3, #112	; 0x70
 800858a:	d140      	bne.n	800860e <__gethex+0x146>
 800858c:	7873      	ldrb	r3, [r6, #1]
 800858e:	2b2b      	cmp	r3, #43	; 0x2b
 8008590:	d031      	beq.n	80085f6 <__gethex+0x12e>
 8008592:	2b2d      	cmp	r3, #45	; 0x2d
 8008594:	d033      	beq.n	80085fe <__gethex+0x136>
 8008596:	f04f 0900 	mov.w	r9, #0
 800859a:	1c71      	adds	r1, r6, #1
 800859c:	7808      	ldrb	r0, [r1, #0]
 800859e:	f7ff ff7e 	bl	800849e <__hexdig_fun>
 80085a2:	1e43      	subs	r3, r0, #1
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b18      	cmp	r3, #24
 80085a8:	d831      	bhi.n	800860e <__gethex+0x146>
 80085aa:	f1a0 0210 	sub.w	r2, r0, #16
 80085ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80085b2:	f7ff ff74 	bl	800849e <__hexdig_fun>
 80085b6:	1e43      	subs	r3, r0, #1
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b18      	cmp	r3, #24
 80085bc:	d922      	bls.n	8008604 <__gethex+0x13c>
 80085be:	f1b9 0f00 	cmp.w	r9, #0
 80085c2:	d000      	beq.n	80085c6 <__gethex+0xfe>
 80085c4:	4252      	negs	r2, r2
 80085c6:	4414      	add	r4, r2
 80085c8:	f8ca 1000 	str.w	r1, [sl]
 80085cc:	b30d      	cbz	r5, 8008612 <__gethex+0x14a>
 80085ce:	f1bb 0f00 	cmp.w	fp, #0
 80085d2:	bf0c      	ite	eq
 80085d4:	2706      	moveq	r7, #6
 80085d6:	2700      	movne	r7, #0
 80085d8:	4638      	mov	r0, r7
 80085da:	b00b      	add	sp, #44	; 0x2c
 80085dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e0:	f10b 0b01 	add.w	fp, fp, #1
 80085e4:	e78a      	b.n	80084fc <__gethex+0x34>
 80085e6:	2500      	movs	r5, #0
 80085e8:	462c      	mov	r4, r5
 80085ea:	e7ae      	b.n	800854a <__gethex+0x82>
 80085ec:	463e      	mov	r6, r7
 80085ee:	2501      	movs	r5, #1
 80085f0:	e7c7      	b.n	8008582 <__gethex+0xba>
 80085f2:	4604      	mov	r4, r0
 80085f4:	e7fb      	b.n	80085ee <__gethex+0x126>
 80085f6:	f04f 0900 	mov.w	r9, #0
 80085fa:	1cb1      	adds	r1, r6, #2
 80085fc:	e7ce      	b.n	800859c <__gethex+0xd4>
 80085fe:	f04f 0901 	mov.w	r9, #1
 8008602:	e7fa      	b.n	80085fa <__gethex+0x132>
 8008604:	230a      	movs	r3, #10
 8008606:	fb03 0202 	mla	r2, r3, r2, r0
 800860a:	3a10      	subs	r2, #16
 800860c:	e7cf      	b.n	80085ae <__gethex+0xe6>
 800860e:	4631      	mov	r1, r6
 8008610:	e7da      	b.n	80085c8 <__gethex+0x100>
 8008612:	4629      	mov	r1, r5
 8008614:	1bf3      	subs	r3, r6, r7
 8008616:	3b01      	subs	r3, #1
 8008618:	2b07      	cmp	r3, #7
 800861a:	dc49      	bgt.n	80086b0 <__gethex+0x1e8>
 800861c:	9802      	ldr	r0, [sp, #8]
 800861e:	f000 fa61 	bl	8008ae4 <_Balloc>
 8008622:	f04f 0b00 	mov.w	fp, #0
 8008626:	4605      	mov	r5, r0
 8008628:	46da      	mov	sl, fp
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	f100 0914 	add.w	r9, r0, #20
 8008630:	f1c3 0301 	rsb	r3, r3, #1
 8008634:	f8cd 9010 	str.w	r9, [sp, #16]
 8008638:	9308      	str	r3, [sp, #32]
 800863a:	42b7      	cmp	r7, r6
 800863c:	d33b      	bcc.n	80086b6 <__gethex+0x1ee>
 800863e:	9804      	ldr	r0, [sp, #16]
 8008640:	f840 ab04 	str.w	sl, [r0], #4
 8008644:	eba0 0009 	sub.w	r0, r0, r9
 8008648:	1080      	asrs	r0, r0, #2
 800864a:	6128      	str	r0, [r5, #16]
 800864c:	0147      	lsls	r7, r0, #5
 800864e:	4650      	mov	r0, sl
 8008650:	f000 fb0c 	bl	8008c6c <__hi0bits>
 8008654:	f8d8 6000 	ldr.w	r6, [r8]
 8008658:	1a3f      	subs	r7, r7, r0
 800865a:	42b7      	cmp	r7, r6
 800865c:	dd64      	ble.n	8008728 <__gethex+0x260>
 800865e:	1bbf      	subs	r7, r7, r6
 8008660:	4639      	mov	r1, r7
 8008662:	4628      	mov	r0, r5
 8008664:	f000 fe15 	bl	8009292 <__any_on>
 8008668:	4682      	mov	sl, r0
 800866a:	b178      	cbz	r0, 800868c <__gethex+0x1c4>
 800866c:	f04f 0a01 	mov.w	sl, #1
 8008670:	1e7b      	subs	r3, r7, #1
 8008672:	1159      	asrs	r1, r3, #5
 8008674:	f003 021f 	and.w	r2, r3, #31
 8008678:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800867c:	fa0a f202 	lsl.w	r2, sl, r2
 8008680:	420a      	tst	r2, r1
 8008682:	d003      	beq.n	800868c <__gethex+0x1c4>
 8008684:	4553      	cmp	r3, sl
 8008686:	dc46      	bgt.n	8008716 <__gethex+0x24e>
 8008688:	f04f 0a02 	mov.w	sl, #2
 800868c:	4639      	mov	r1, r7
 800868e:	4628      	mov	r0, r5
 8008690:	f7ff feca 	bl	8008428 <rshift>
 8008694:	443c      	add	r4, r7
 8008696:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800869a:	42a3      	cmp	r3, r4
 800869c:	da52      	bge.n	8008744 <__gethex+0x27c>
 800869e:	4629      	mov	r1, r5
 80086a0:	9802      	ldr	r0, [sp, #8]
 80086a2:	f000 fa53 	bl	8008b4c <_Bfree>
 80086a6:	2300      	movs	r3, #0
 80086a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086aa:	27a3      	movs	r7, #163	; 0xa3
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	e793      	b.n	80085d8 <__gethex+0x110>
 80086b0:	3101      	adds	r1, #1
 80086b2:	105b      	asrs	r3, r3, #1
 80086b4:	e7b0      	b.n	8008618 <__gethex+0x150>
 80086b6:	1e73      	subs	r3, r6, #1
 80086b8:	9305      	str	r3, [sp, #20]
 80086ba:	9a07      	ldr	r2, [sp, #28]
 80086bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d018      	beq.n	80086f6 <__gethex+0x22e>
 80086c4:	f1bb 0f20 	cmp.w	fp, #32
 80086c8:	d107      	bne.n	80086da <__gethex+0x212>
 80086ca:	9b04      	ldr	r3, [sp, #16]
 80086cc:	f8c3 a000 	str.w	sl, [r3]
 80086d0:	f04f 0a00 	mov.w	sl, #0
 80086d4:	46d3      	mov	fp, sl
 80086d6:	3304      	adds	r3, #4
 80086d8:	9304      	str	r3, [sp, #16]
 80086da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80086de:	f7ff fede 	bl	800849e <__hexdig_fun>
 80086e2:	f000 000f 	and.w	r0, r0, #15
 80086e6:	fa00 f00b 	lsl.w	r0, r0, fp
 80086ea:	ea4a 0a00 	orr.w	sl, sl, r0
 80086ee:	f10b 0b04 	add.w	fp, fp, #4
 80086f2:	9b05      	ldr	r3, [sp, #20]
 80086f4:	e00d      	b.n	8008712 <__gethex+0x24a>
 80086f6:	9b05      	ldr	r3, [sp, #20]
 80086f8:	9a08      	ldr	r2, [sp, #32]
 80086fa:	4413      	add	r3, r2
 80086fc:	42bb      	cmp	r3, r7
 80086fe:	d3e1      	bcc.n	80086c4 <__gethex+0x1fc>
 8008700:	4618      	mov	r0, r3
 8008702:	9a01      	ldr	r2, [sp, #4]
 8008704:	9903      	ldr	r1, [sp, #12]
 8008706:	9309      	str	r3, [sp, #36]	; 0x24
 8008708:	f000 ff44 	bl	8009594 <strncmp>
 800870c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870e:	2800      	cmp	r0, #0
 8008710:	d1d8      	bne.n	80086c4 <__gethex+0x1fc>
 8008712:	461e      	mov	r6, r3
 8008714:	e791      	b.n	800863a <__gethex+0x172>
 8008716:	1eb9      	subs	r1, r7, #2
 8008718:	4628      	mov	r0, r5
 800871a:	f000 fdba 	bl	8009292 <__any_on>
 800871e:	2800      	cmp	r0, #0
 8008720:	d0b2      	beq.n	8008688 <__gethex+0x1c0>
 8008722:	f04f 0a03 	mov.w	sl, #3
 8008726:	e7b1      	b.n	800868c <__gethex+0x1c4>
 8008728:	da09      	bge.n	800873e <__gethex+0x276>
 800872a:	1bf7      	subs	r7, r6, r7
 800872c:	4629      	mov	r1, r5
 800872e:	463a      	mov	r2, r7
 8008730:	9802      	ldr	r0, [sp, #8]
 8008732:	f000 fbd5 	bl	8008ee0 <__lshift>
 8008736:	4605      	mov	r5, r0
 8008738:	1be4      	subs	r4, r4, r7
 800873a:	f100 0914 	add.w	r9, r0, #20
 800873e:	f04f 0a00 	mov.w	sl, #0
 8008742:	e7a8      	b.n	8008696 <__gethex+0x1ce>
 8008744:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008748:	42a0      	cmp	r0, r4
 800874a:	dd6b      	ble.n	8008824 <__gethex+0x35c>
 800874c:	1b04      	subs	r4, r0, r4
 800874e:	42a6      	cmp	r6, r4
 8008750:	dc2e      	bgt.n	80087b0 <__gethex+0x2e8>
 8008752:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008756:	2b02      	cmp	r3, #2
 8008758:	d022      	beq.n	80087a0 <__gethex+0x2d8>
 800875a:	2b03      	cmp	r3, #3
 800875c:	d024      	beq.n	80087a8 <__gethex+0x2e0>
 800875e:	2b01      	cmp	r3, #1
 8008760:	d115      	bne.n	800878e <__gethex+0x2c6>
 8008762:	42a6      	cmp	r6, r4
 8008764:	d113      	bne.n	800878e <__gethex+0x2c6>
 8008766:	2e01      	cmp	r6, #1
 8008768:	dc0b      	bgt.n	8008782 <__gethex+0x2ba>
 800876a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800876e:	9a06      	ldr	r2, [sp, #24]
 8008770:	2762      	movs	r7, #98	; 0x62
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	2301      	movs	r3, #1
 8008776:	612b      	str	r3, [r5, #16]
 8008778:	f8c9 3000 	str.w	r3, [r9]
 800877c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800877e:	601d      	str	r5, [r3, #0]
 8008780:	e72a      	b.n	80085d8 <__gethex+0x110>
 8008782:	1e71      	subs	r1, r6, #1
 8008784:	4628      	mov	r0, r5
 8008786:	f000 fd84 	bl	8009292 <__any_on>
 800878a:	2800      	cmp	r0, #0
 800878c:	d1ed      	bne.n	800876a <__gethex+0x2a2>
 800878e:	4629      	mov	r1, r5
 8008790:	9802      	ldr	r0, [sp, #8]
 8008792:	f000 f9db 	bl	8008b4c <_Bfree>
 8008796:	2300      	movs	r3, #0
 8008798:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800879a:	2750      	movs	r7, #80	; 0x50
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	e71b      	b.n	80085d8 <__gethex+0x110>
 80087a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0e1      	beq.n	800876a <__gethex+0x2a2>
 80087a6:	e7f2      	b.n	800878e <__gethex+0x2c6>
 80087a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1dd      	bne.n	800876a <__gethex+0x2a2>
 80087ae:	e7ee      	b.n	800878e <__gethex+0x2c6>
 80087b0:	1e67      	subs	r7, r4, #1
 80087b2:	f1ba 0f00 	cmp.w	sl, #0
 80087b6:	d132      	bne.n	800881e <__gethex+0x356>
 80087b8:	b127      	cbz	r7, 80087c4 <__gethex+0x2fc>
 80087ba:	4639      	mov	r1, r7
 80087bc:	4628      	mov	r0, r5
 80087be:	f000 fd68 	bl	8009292 <__any_on>
 80087c2:	4682      	mov	sl, r0
 80087c4:	2301      	movs	r3, #1
 80087c6:	117a      	asrs	r2, r7, #5
 80087c8:	f007 071f 	and.w	r7, r7, #31
 80087cc:	fa03 f707 	lsl.w	r7, r3, r7
 80087d0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80087d4:	4621      	mov	r1, r4
 80087d6:	421f      	tst	r7, r3
 80087d8:	f04f 0702 	mov.w	r7, #2
 80087dc:	4628      	mov	r0, r5
 80087de:	bf18      	it	ne
 80087e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80087e4:	1b36      	subs	r6, r6, r4
 80087e6:	f7ff fe1f 	bl	8008428 <rshift>
 80087ea:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80087ee:	f1ba 0f00 	cmp.w	sl, #0
 80087f2:	d048      	beq.n	8008886 <__gethex+0x3be>
 80087f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d015      	beq.n	8008828 <__gethex+0x360>
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d017      	beq.n	8008830 <__gethex+0x368>
 8008800:	2b01      	cmp	r3, #1
 8008802:	d109      	bne.n	8008818 <__gethex+0x350>
 8008804:	f01a 0f02 	tst.w	sl, #2
 8008808:	d006      	beq.n	8008818 <__gethex+0x350>
 800880a:	f8d9 3000 	ldr.w	r3, [r9]
 800880e:	ea4a 0a03 	orr.w	sl, sl, r3
 8008812:	f01a 0f01 	tst.w	sl, #1
 8008816:	d10e      	bne.n	8008836 <__gethex+0x36e>
 8008818:	f047 0710 	orr.w	r7, r7, #16
 800881c:	e033      	b.n	8008886 <__gethex+0x3be>
 800881e:	f04f 0a01 	mov.w	sl, #1
 8008822:	e7cf      	b.n	80087c4 <__gethex+0x2fc>
 8008824:	2701      	movs	r7, #1
 8008826:	e7e2      	b.n	80087ee <__gethex+0x326>
 8008828:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800882a:	f1c3 0301 	rsb	r3, r3, #1
 800882e:	9315      	str	r3, [sp, #84]	; 0x54
 8008830:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0f0      	beq.n	8008818 <__gethex+0x350>
 8008836:	f04f 0c00 	mov.w	ip, #0
 800883a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800883e:	f105 0314 	add.w	r3, r5, #20
 8008842:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008846:	eb03 010a 	add.w	r1, r3, sl
 800884a:	4618      	mov	r0, r3
 800884c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008850:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008854:	d01c      	beq.n	8008890 <__gethex+0x3c8>
 8008856:	3201      	adds	r2, #1
 8008858:	6002      	str	r2, [r0, #0]
 800885a:	2f02      	cmp	r7, #2
 800885c:	f105 0314 	add.w	r3, r5, #20
 8008860:	d138      	bne.n	80088d4 <__gethex+0x40c>
 8008862:	f8d8 2000 	ldr.w	r2, [r8]
 8008866:	3a01      	subs	r2, #1
 8008868:	42b2      	cmp	r2, r6
 800886a:	d10a      	bne.n	8008882 <__gethex+0x3ba>
 800886c:	2201      	movs	r2, #1
 800886e:	1171      	asrs	r1, r6, #5
 8008870:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008874:	f006 061f 	and.w	r6, r6, #31
 8008878:	fa02 f606 	lsl.w	r6, r2, r6
 800887c:	421e      	tst	r6, r3
 800887e:	bf18      	it	ne
 8008880:	4617      	movne	r7, r2
 8008882:	f047 0720 	orr.w	r7, r7, #32
 8008886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008888:	601d      	str	r5, [r3, #0]
 800888a:	9b06      	ldr	r3, [sp, #24]
 800888c:	601c      	str	r4, [r3, #0]
 800888e:	e6a3      	b.n	80085d8 <__gethex+0x110>
 8008890:	4299      	cmp	r1, r3
 8008892:	f843 cc04 	str.w	ip, [r3, #-4]
 8008896:	d8d8      	bhi.n	800884a <__gethex+0x382>
 8008898:	68ab      	ldr	r3, [r5, #8]
 800889a:	4599      	cmp	r9, r3
 800889c:	db12      	blt.n	80088c4 <__gethex+0x3fc>
 800889e:	6869      	ldr	r1, [r5, #4]
 80088a0:	9802      	ldr	r0, [sp, #8]
 80088a2:	3101      	adds	r1, #1
 80088a4:	f000 f91e 	bl	8008ae4 <_Balloc>
 80088a8:	4683      	mov	fp, r0
 80088aa:	692a      	ldr	r2, [r5, #16]
 80088ac:	f105 010c 	add.w	r1, r5, #12
 80088b0:	3202      	adds	r2, #2
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	300c      	adds	r0, #12
 80088b6:	f7fd f997 	bl	8005be8 <memcpy>
 80088ba:	4629      	mov	r1, r5
 80088bc:	9802      	ldr	r0, [sp, #8]
 80088be:	f000 f945 	bl	8008b4c <_Bfree>
 80088c2:	465d      	mov	r5, fp
 80088c4:	692b      	ldr	r3, [r5, #16]
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	612a      	str	r2, [r5, #16]
 80088ca:	2201      	movs	r2, #1
 80088cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80088d0:	615a      	str	r2, [r3, #20]
 80088d2:	e7c2      	b.n	800885a <__gethex+0x392>
 80088d4:	692a      	ldr	r2, [r5, #16]
 80088d6:	454a      	cmp	r2, r9
 80088d8:	dd0b      	ble.n	80088f2 <__gethex+0x42a>
 80088da:	2101      	movs	r1, #1
 80088dc:	4628      	mov	r0, r5
 80088de:	f7ff fda3 	bl	8008428 <rshift>
 80088e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088e6:	3401      	adds	r4, #1
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	f6ff aed8 	blt.w	800869e <__gethex+0x1d6>
 80088ee:	2701      	movs	r7, #1
 80088f0:	e7c7      	b.n	8008882 <__gethex+0x3ba>
 80088f2:	f016 061f 	ands.w	r6, r6, #31
 80088f6:	d0fa      	beq.n	80088ee <__gethex+0x426>
 80088f8:	449a      	add	sl, r3
 80088fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80088fe:	f000 f9b5 	bl	8008c6c <__hi0bits>
 8008902:	f1c6 0620 	rsb	r6, r6, #32
 8008906:	42b0      	cmp	r0, r6
 8008908:	dbe7      	blt.n	80088da <__gethex+0x412>
 800890a:	e7f0      	b.n	80088ee <__gethex+0x426>

0800890c <L_shift>:
 800890c:	f1c2 0208 	rsb	r2, r2, #8
 8008910:	0092      	lsls	r2, r2, #2
 8008912:	b570      	push	{r4, r5, r6, lr}
 8008914:	f1c2 0620 	rsb	r6, r2, #32
 8008918:	6843      	ldr	r3, [r0, #4]
 800891a:	6804      	ldr	r4, [r0, #0]
 800891c:	fa03 f506 	lsl.w	r5, r3, r6
 8008920:	432c      	orrs	r4, r5
 8008922:	40d3      	lsrs	r3, r2
 8008924:	6004      	str	r4, [r0, #0]
 8008926:	f840 3f04 	str.w	r3, [r0, #4]!
 800892a:	4288      	cmp	r0, r1
 800892c:	d3f4      	bcc.n	8008918 <L_shift+0xc>
 800892e:	bd70      	pop	{r4, r5, r6, pc}

08008930 <__match>:
 8008930:	b530      	push	{r4, r5, lr}
 8008932:	6803      	ldr	r3, [r0, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893a:	b914      	cbnz	r4, 8008942 <__match+0x12>
 800893c:	6003      	str	r3, [r0, #0]
 800893e:	2001      	movs	r0, #1
 8008940:	bd30      	pop	{r4, r5, pc}
 8008942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008946:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800894a:	2d19      	cmp	r5, #25
 800894c:	bf98      	it	ls
 800894e:	3220      	addls	r2, #32
 8008950:	42a2      	cmp	r2, r4
 8008952:	d0f0      	beq.n	8008936 <__match+0x6>
 8008954:	2000      	movs	r0, #0
 8008956:	e7f3      	b.n	8008940 <__match+0x10>

08008958 <__hexnan>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	2500      	movs	r5, #0
 800895e:	680b      	ldr	r3, [r1, #0]
 8008960:	4682      	mov	sl, r0
 8008962:	115f      	asrs	r7, r3, #5
 8008964:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008968:	f013 031f 	ands.w	r3, r3, #31
 800896c:	bf18      	it	ne
 800896e:	3704      	addne	r7, #4
 8008970:	1f3e      	subs	r6, r7, #4
 8008972:	4690      	mov	r8, r2
 8008974:	46b1      	mov	r9, r6
 8008976:	4634      	mov	r4, r6
 8008978:	46ab      	mov	fp, r5
 800897a:	b087      	sub	sp, #28
 800897c:	6801      	ldr	r1, [r0, #0]
 800897e:	9301      	str	r3, [sp, #4]
 8008980:	f847 5c04 	str.w	r5, [r7, #-4]
 8008984:	9502      	str	r5, [sp, #8]
 8008986:	784a      	ldrb	r2, [r1, #1]
 8008988:	1c4b      	adds	r3, r1, #1
 800898a:	9303      	str	r3, [sp, #12]
 800898c:	b342      	cbz	r2, 80089e0 <__hexnan+0x88>
 800898e:	4610      	mov	r0, r2
 8008990:	9105      	str	r1, [sp, #20]
 8008992:	9204      	str	r2, [sp, #16]
 8008994:	f7ff fd83 	bl	800849e <__hexdig_fun>
 8008998:	2800      	cmp	r0, #0
 800899a:	d143      	bne.n	8008a24 <__hexnan+0xcc>
 800899c:	9a04      	ldr	r2, [sp, #16]
 800899e:	9905      	ldr	r1, [sp, #20]
 80089a0:	2a20      	cmp	r2, #32
 80089a2:	d818      	bhi.n	80089d6 <__hexnan+0x7e>
 80089a4:	9b02      	ldr	r3, [sp, #8]
 80089a6:	459b      	cmp	fp, r3
 80089a8:	dd13      	ble.n	80089d2 <__hexnan+0x7a>
 80089aa:	454c      	cmp	r4, r9
 80089ac:	d206      	bcs.n	80089bc <__hexnan+0x64>
 80089ae:	2d07      	cmp	r5, #7
 80089b0:	dc04      	bgt.n	80089bc <__hexnan+0x64>
 80089b2:	462a      	mov	r2, r5
 80089b4:	4649      	mov	r1, r9
 80089b6:	4620      	mov	r0, r4
 80089b8:	f7ff ffa8 	bl	800890c <L_shift>
 80089bc:	4544      	cmp	r4, r8
 80089be:	d944      	bls.n	8008a4a <__hexnan+0xf2>
 80089c0:	2300      	movs	r3, #0
 80089c2:	f1a4 0904 	sub.w	r9, r4, #4
 80089c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80089ca:	461d      	mov	r5, r3
 80089cc:	464c      	mov	r4, r9
 80089ce:	f8cd b008 	str.w	fp, [sp, #8]
 80089d2:	9903      	ldr	r1, [sp, #12]
 80089d4:	e7d7      	b.n	8008986 <__hexnan+0x2e>
 80089d6:	2a29      	cmp	r2, #41	; 0x29
 80089d8:	d14a      	bne.n	8008a70 <__hexnan+0x118>
 80089da:	3102      	adds	r1, #2
 80089dc:	f8ca 1000 	str.w	r1, [sl]
 80089e0:	f1bb 0f00 	cmp.w	fp, #0
 80089e4:	d044      	beq.n	8008a70 <__hexnan+0x118>
 80089e6:	454c      	cmp	r4, r9
 80089e8:	d206      	bcs.n	80089f8 <__hexnan+0xa0>
 80089ea:	2d07      	cmp	r5, #7
 80089ec:	dc04      	bgt.n	80089f8 <__hexnan+0xa0>
 80089ee:	462a      	mov	r2, r5
 80089f0:	4649      	mov	r1, r9
 80089f2:	4620      	mov	r0, r4
 80089f4:	f7ff ff8a 	bl	800890c <L_shift>
 80089f8:	4544      	cmp	r4, r8
 80089fa:	d928      	bls.n	8008a4e <__hexnan+0xf6>
 80089fc:	4643      	mov	r3, r8
 80089fe:	f854 2b04 	ldr.w	r2, [r4], #4
 8008a02:	42a6      	cmp	r6, r4
 8008a04:	f843 2b04 	str.w	r2, [r3], #4
 8008a08:	d2f9      	bcs.n	80089fe <__hexnan+0xa6>
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f843 2b04 	str.w	r2, [r3], #4
 8008a10:	429e      	cmp	r6, r3
 8008a12:	d2fb      	bcs.n	8008a0c <__hexnan+0xb4>
 8008a14:	6833      	ldr	r3, [r6, #0]
 8008a16:	b91b      	cbnz	r3, 8008a20 <__hexnan+0xc8>
 8008a18:	4546      	cmp	r6, r8
 8008a1a:	d127      	bne.n	8008a6c <__hexnan+0x114>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	6033      	str	r3, [r6, #0]
 8008a20:	2005      	movs	r0, #5
 8008a22:	e026      	b.n	8008a72 <__hexnan+0x11a>
 8008a24:	3501      	adds	r5, #1
 8008a26:	2d08      	cmp	r5, #8
 8008a28:	f10b 0b01 	add.w	fp, fp, #1
 8008a2c:	dd06      	ble.n	8008a3c <__hexnan+0xe4>
 8008a2e:	4544      	cmp	r4, r8
 8008a30:	d9cf      	bls.n	80089d2 <__hexnan+0x7a>
 8008a32:	2300      	movs	r3, #0
 8008a34:	2501      	movs	r5, #1
 8008a36:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a3a:	3c04      	subs	r4, #4
 8008a3c:	6822      	ldr	r2, [r4, #0]
 8008a3e:	f000 000f 	and.w	r0, r0, #15
 8008a42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008a46:	6020      	str	r0, [r4, #0]
 8008a48:	e7c3      	b.n	80089d2 <__hexnan+0x7a>
 8008a4a:	2508      	movs	r5, #8
 8008a4c:	e7c1      	b.n	80089d2 <__hexnan+0x7a>
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d0df      	beq.n	8008a14 <__hexnan+0xbc>
 8008a54:	f04f 32ff 	mov.w	r2, #4294967295
 8008a58:	f1c3 0320 	rsb	r3, r3, #32
 8008a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a60:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008a64:	401a      	ands	r2, r3
 8008a66:	f847 2c04 	str.w	r2, [r7, #-4]
 8008a6a:	e7d3      	b.n	8008a14 <__hexnan+0xbc>
 8008a6c:	3e04      	subs	r6, #4
 8008a6e:	e7d1      	b.n	8008a14 <__hexnan+0xbc>
 8008a70:	2004      	movs	r0, #4
 8008a72:	b007      	add	sp, #28
 8008a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a78 <__locale_ctype_ptr_l>:
 8008a78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008a7c:	4770      	bx	lr

08008a7e <__localeconv_l>:
 8008a7e:	30f0      	adds	r0, #240	; 0xf0
 8008a80:	4770      	bx	lr
	...

08008a84 <_localeconv_r>:
 8008a84:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <_localeconv_r+0x14>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6a18      	ldr	r0, [r3, #32]
 8008a8a:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <_localeconv_r+0x18>)
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	bf08      	it	eq
 8008a90:	4618      	moveq	r0, r3
 8008a92:	30f0      	adds	r0, #240	; 0xf0
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000010 	.word	0x20000010
 8008a9c:	20000074 	.word	0x20000074

08008aa0 <__ascii_mbtowc>:
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	b901      	cbnz	r1, 8008aa6 <__ascii_mbtowc+0x6>
 8008aa4:	a901      	add	r1, sp, #4
 8008aa6:	b142      	cbz	r2, 8008aba <__ascii_mbtowc+0x1a>
 8008aa8:	b14b      	cbz	r3, 8008abe <__ascii_mbtowc+0x1e>
 8008aaa:	7813      	ldrb	r3, [r2, #0]
 8008aac:	600b      	str	r3, [r1, #0]
 8008aae:	7812      	ldrb	r2, [r2, #0]
 8008ab0:	1c10      	adds	r0, r2, #0
 8008ab2:	bf18      	it	ne
 8008ab4:	2001      	movne	r0, #1
 8008ab6:	b002      	add	sp, #8
 8008ab8:	4770      	bx	lr
 8008aba:	4610      	mov	r0, r2
 8008abc:	e7fb      	b.n	8008ab6 <__ascii_mbtowc+0x16>
 8008abe:	f06f 0001 	mvn.w	r0, #1
 8008ac2:	e7f8      	b.n	8008ab6 <__ascii_mbtowc+0x16>

08008ac4 <memchr>:
 8008ac4:	b510      	push	{r4, lr}
 8008ac6:	b2c9      	uxtb	r1, r1
 8008ac8:	4402      	add	r2, r0
 8008aca:	4290      	cmp	r0, r2
 8008acc:	4603      	mov	r3, r0
 8008ace:	d101      	bne.n	8008ad4 <memchr+0x10>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e003      	b.n	8008adc <memchr+0x18>
 8008ad4:	781c      	ldrb	r4, [r3, #0]
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	428c      	cmp	r4, r1
 8008ada:	d1f6      	bne.n	8008aca <memchr+0x6>
 8008adc:	4618      	mov	r0, r3
 8008ade:	bd10      	pop	{r4, pc}

08008ae0 <__malloc_lock>:
 8008ae0:	4770      	bx	lr

08008ae2 <__malloc_unlock>:
 8008ae2:	4770      	bx	lr

08008ae4 <_Balloc>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460e      	mov	r6, r1
 8008aec:	b93d      	cbnz	r5, 8008afe <_Balloc+0x1a>
 8008aee:	2010      	movs	r0, #16
 8008af0:	f7fd f872 	bl	8005bd8 <malloc>
 8008af4:	6260      	str	r0, [r4, #36]	; 0x24
 8008af6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008afa:	6005      	str	r5, [r0, #0]
 8008afc:	60c5      	str	r5, [r0, #12]
 8008afe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b00:	68eb      	ldr	r3, [r5, #12]
 8008b02:	b183      	cbz	r3, 8008b26 <_Balloc+0x42>
 8008b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b0c:	b9b8      	cbnz	r0, 8008b3e <_Balloc+0x5a>
 8008b0e:	2101      	movs	r1, #1
 8008b10:	fa01 f506 	lsl.w	r5, r1, r6
 8008b14:	1d6a      	adds	r2, r5, #5
 8008b16:	0092      	lsls	r2, r2, #2
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fbdb 	bl	80092d4 <_calloc_r>
 8008b1e:	b160      	cbz	r0, 8008b3a <_Balloc+0x56>
 8008b20:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008b24:	e00e      	b.n	8008b44 <_Balloc+0x60>
 8008b26:	2221      	movs	r2, #33	; 0x21
 8008b28:	2104      	movs	r1, #4
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 fbd2 	bl	80092d4 <_calloc_r>
 8008b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b32:	60e8      	str	r0, [r5, #12]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e4      	bne.n	8008b04 <_Balloc+0x20>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	bd70      	pop	{r4, r5, r6, pc}
 8008b3e:	6802      	ldr	r2, [r0, #0]
 8008b40:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008b44:	2300      	movs	r3, #0
 8008b46:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b4a:	e7f7      	b.n	8008b3c <_Balloc+0x58>

08008b4c <_Bfree>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b50:	4606      	mov	r6, r0
 8008b52:	460d      	mov	r5, r1
 8008b54:	b93c      	cbnz	r4, 8008b66 <_Bfree+0x1a>
 8008b56:	2010      	movs	r0, #16
 8008b58:	f7fd f83e 	bl	8005bd8 <malloc>
 8008b5c:	6270      	str	r0, [r6, #36]	; 0x24
 8008b5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b62:	6004      	str	r4, [r0, #0]
 8008b64:	60c4      	str	r4, [r0, #12]
 8008b66:	b13d      	cbz	r5, 8008b78 <_Bfree+0x2c>
 8008b68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b6a:	686a      	ldr	r2, [r5, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b72:	6029      	str	r1, [r5, #0]
 8008b74:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008b78:	bd70      	pop	{r4, r5, r6, pc}

08008b7a <__multadd>:
 8008b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7e:	461f      	mov	r7, r3
 8008b80:	4606      	mov	r6, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	2300      	movs	r3, #0
 8008b86:	690d      	ldr	r5, [r1, #16]
 8008b88:	f101 0c14 	add.w	ip, r1, #20
 8008b8c:	f8dc 0000 	ldr.w	r0, [ip]
 8008b90:	3301      	adds	r3, #1
 8008b92:	b281      	uxth	r1, r0
 8008b94:	fb02 7101 	mla	r1, r2, r1, r7
 8008b98:	0c00      	lsrs	r0, r0, #16
 8008b9a:	0c0f      	lsrs	r7, r1, #16
 8008b9c:	fb02 7000 	mla	r0, r2, r0, r7
 8008ba0:	b289      	uxth	r1, r1
 8008ba2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008ba6:	429d      	cmp	r5, r3
 8008ba8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008bac:	f84c 1b04 	str.w	r1, [ip], #4
 8008bb0:	dcec      	bgt.n	8008b8c <__multadd+0x12>
 8008bb2:	b1d7      	cbz	r7, 8008bea <__multadd+0x70>
 8008bb4:	68a3      	ldr	r3, [r4, #8]
 8008bb6:	42ab      	cmp	r3, r5
 8008bb8:	dc12      	bgt.n	8008be0 <__multadd+0x66>
 8008bba:	6861      	ldr	r1, [r4, #4]
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	3101      	adds	r1, #1
 8008bc0:	f7ff ff90 	bl	8008ae4 <_Balloc>
 8008bc4:	4680      	mov	r8, r0
 8008bc6:	6922      	ldr	r2, [r4, #16]
 8008bc8:	f104 010c 	add.w	r1, r4, #12
 8008bcc:	3202      	adds	r2, #2
 8008bce:	0092      	lsls	r2, r2, #2
 8008bd0:	300c      	adds	r0, #12
 8008bd2:	f7fd f809 	bl	8005be8 <memcpy>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f7ff ffb7 	bl	8008b4c <_Bfree>
 8008bde:	4644      	mov	r4, r8
 8008be0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008be4:	3501      	adds	r5, #1
 8008be6:	615f      	str	r7, [r3, #20]
 8008be8:	6125      	str	r5, [r4, #16]
 8008bea:	4620      	mov	r0, r4
 8008bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008bf0 <__s2b>:
 8008bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	4615      	mov	r5, r2
 8008bf6:	2209      	movs	r2, #9
 8008bf8:	461f      	mov	r7, r3
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c02:	4606      	mov	r6, r0
 8008c04:	2201      	movs	r2, #1
 8008c06:	2100      	movs	r1, #0
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	db20      	blt.n	8008c4e <__s2b+0x5e>
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7ff ff69 	bl	8008ae4 <_Balloc>
 8008c12:	9b08      	ldr	r3, [sp, #32]
 8008c14:	2d09      	cmp	r5, #9
 8008c16:	6143      	str	r3, [r0, #20]
 8008c18:	f04f 0301 	mov.w	r3, #1
 8008c1c:	6103      	str	r3, [r0, #16]
 8008c1e:	dd19      	ble.n	8008c54 <__s2b+0x64>
 8008c20:	f104 0809 	add.w	r8, r4, #9
 8008c24:	46c1      	mov	r9, r8
 8008c26:	442c      	add	r4, r5
 8008c28:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	3b30      	subs	r3, #48	; 0x30
 8008c30:	220a      	movs	r2, #10
 8008c32:	4630      	mov	r0, r6
 8008c34:	f7ff ffa1 	bl	8008b7a <__multadd>
 8008c38:	45a1      	cmp	r9, r4
 8008c3a:	d1f5      	bne.n	8008c28 <__s2b+0x38>
 8008c3c:	eb08 0405 	add.w	r4, r8, r5
 8008c40:	3c08      	subs	r4, #8
 8008c42:	1b2d      	subs	r5, r5, r4
 8008c44:	1963      	adds	r3, r4, r5
 8008c46:	42bb      	cmp	r3, r7
 8008c48:	db07      	blt.n	8008c5a <__s2b+0x6a>
 8008c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c4e:	0052      	lsls	r2, r2, #1
 8008c50:	3101      	adds	r1, #1
 8008c52:	e7d9      	b.n	8008c08 <__s2b+0x18>
 8008c54:	340a      	adds	r4, #10
 8008c56:	2509      	movs	r5, #9
 8008c58:	e7f3      	b.n	8008c42 <__s2b+0x52>
 8008c5a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c5e:	4601      	mov	r1, r0
 8008c60:	3b30      	subs	r3, #48	; 0x30
 8008c62:	220a      	movs	r2, #10
 8008c64:	4630      	mov	r0, r6
 8008c66:	f7ff ff88 	bl	8008b7a <__multadd>
 8008c6a:	e7eb      	b.n	8008c44 <__s2b+0x54>

08008c6c <__hi0bits>:
 8008c6c:	0c02      	lsrs	r2, r0, #16
 8008c6e:	0412      	lsls	r2, r2, #16
 8008c70:	4603      	mov	r3, r0
 8008c72:	b9b2      	cbnz	r2, 8008ca2 <__hi0bits+0x36>
 8008c74:	0403      	lsls	r3, r0, #16
 8008c76:	2010      	movs	r0, #16
 8008c78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c7c:	bf04      	itt	eq
 8008c7e:	021b      	lsleq	r3, r3, #8
 8008c80:	3008      	addeq	r0, #8
 8008c82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c86:	bf04      	itt	eq
 8008c88:	011b      	lsleq	r3, r3, #4
 8008c8a:	3004      	addeq	r0, #4
 8008c8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c90:	bf04      	itt	eq
 8008c92:	009b      	lsleq	r3, r3, #2
 8008c94:	3002      	addeq	r0, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	db06      	blt.n	8008ca8 <__hi0bits+0x3c>
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	d503      	bpl.n	8008ca6 <__hi0bits+0x3a>
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	4770      	bx	lr
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	e7e8      	b.n	8008c78 <__hi0bits+0xc>
 8008ca6:	2020      	movs	r0, #32
 8008ca8:	4770      	bx	lr

08008caa <__lo0bits>:
 8008caa:	6803      	ldr	r3, [r0, #0]
 8008cac:	4601      	mov	r1, r0
 8008cae:	f013 0207 	ands.w	r2, r3, #7
 8008cb2:	d00b      	beq.n	8008ccc <__lo0bits+0x22>
 8008cb4:	07da      	lsls	r2, r3, #31
 8008cb6:	d423      	bmi.n	8008d00 <__lo0bits+0x56>
 8008cb8:	0798      	lsls	r0, r3, #30
 8008cba:	bf49      	itett	mi
 8008cbc:	085b      	lsrmi	r3, r3, #1
 8008cbe:	089b      	lsrpl	r3, r3, #2
 8008cc0:	2001      	movmi	r0, #1
 8008cc2:	600b      	strmi	r3, [r1, #0]
 8008cc4:	bf5c      	itt	pl
 8008cc6:	600b      	strpl	r3, [r1, #0]
 8008cc8:	2002      	movpl	r0, #2
 8008cca:	4770      	bx	lr
 8008ccc:	b298      	uxth	r0, r3
 8008cce:	b9a8      	cbnz	r0, 8008cfc <__lo0bits+0x52>
 8008cd0:	2010      	movs	r0, #16
 8008cd2:	0c1b      	lsrs	r3, r3, #16
 8008cd4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008cd8:	bf04      	itt	eq
 8008cda:	0a1b      	lsreq	r3, r3, #8
 8008cdc:	3008      	addeq	r0, #8
 8008cde:	071a      	lsls	r2, r3, #28
 8008ce0:	bf04      	itt	eq
 8008ce2:	091b      	lsreq	r3, r3, #4
 8008ce4:	3004      	addeq	r0, #4
 8008ce6:	079a      	lsls	r2, r3, #30
 8008ce8:	bf04      	itt	eq
 8008cea:	089b      	lsreq	r3, r3, #2
 8008cec:	3002      	addeq	r0, #2
 8008cee:	07da      	lsls	r2, r3, #31
 8008cf0:	d402      	bmi.n	8008cf8 <__lo0bits+0x4e>
 8008cf2:	085b      	lsrs	r3, r3, #1
 8008cf4:	d006      	beq.n	8008d04 <__lo0bits+0x5a>
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	600b      	str	r3, [r1, #0]
 8008cfa:	4770      	bx	lr
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	e7e9      	b.n	8008cd4 <__lo0bits+0x2a>
 8008d00:	2000      	movs	r0, #0
 8008d02:	4770      	bx	lr
 8008d04:	2020      	movs	r0, #32
 8008d06:	4770      	bx	lr

08008d08 <__i2b>:
 8008d08:	b510      	push	{r4, lr}
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	f7ff fee9 	bl	8008ae4 <_Balloc>
 8008d12:	2201      	movs	r2, #1
 8008d14:	6144      	str	r4, [r0, #20]
 8008d16:	6102      	str	r2, [r0, #16]
 8008d18:	bd10      	pop	{r4, pc}

08008d1a <__multiply>:
 8008d1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1e:	4614      	mov	r4, r2
 8008d20:	690a      	ldr	r2, [r1, #16]
 8008d22:	6923      	ldr	r3, [r4, #16]
 8008d24:	4688      	mov	r8, r1
 8008d26:	429a      	cmp	r2, r3
 8008d28:	bfbe      	ittt	lt
 8008d2a:	460b      	movlt	r3, r1
 8008d2c:	46a0      	movlt	r8, r4
 8008d2e:	461c      	movlt	r4, r3
 8008d30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d40:	eb07 0609 	add.w	r6, r7, r9
 8008d44:	42b3      	cmp	r3, r6
 8008d46:	bfb8      	it	lt
 8008d48:	3101      	addlt	r1, #1
 8008d4a:	f7ff fecb 	bl	8008ae4 <_Balloc>
 8008d4e:	f100 0514 	add.w	r5, r0, #20
 8008d52:	462b      	mov	r3, r5
 8008d54:	2200      	movs	r2, #0
 8008d56:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008d5a:	4573      	cmp	r3, lr
 8008d5c:	d316      	bcc.n	8008d8c <__multiply+0x72>
 8008d5e:	f104 0214 	add.w	r2, r4, #20
 8008d62:	f108 0114 	add.w	r1, r8, #20
 8008d66:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008d6a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	9b00      	ldr	r3, [sp, #0]
 8008d72:	9201      	str	r2, [sp, #4]
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d80c      	bhi.n	8008d92 <__multiply+0x78>
 8008d78:	2e00      	cmp	r6, #0
 8008d7a:	dd03      	ble.n	8008d84 <__multiply+0x6a>
 8008d7c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d05d      	beq.n	8008e40 <__multiply+0x126>
 8008d84:	6106      	str	r6, [r0, #16]
 8008d86:	b003      	add	sp, #12
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	f843 2b04 	str.w	r2, [r3], #4
 8008d90:	e7e3      	b.n	8008d5a <__multiply+0x40>
 8008d92:	f8b2 b000 	ldrh.w	fp, [r2]
 8008d96:	f1bb 0f00 	cmp.w	fp, #0
 8008d9a:	d023      	beq.n	8008de4 <__multiply+0xca>
 8008d9c:	4689      	mov	r9, r1
 8008d9e:	46ac      	mov	ip, r5
 8008da0:	f04f 0800 	mov.w	r8, #0
 8008da4:	f859 4b04 	ldr.w	r4, [r9], #4
 8008da8:	f8dc a000 	ldr.w	sl, [ip]
 8008dac:	b2a3      	uxth	r3, r4
 8008dae:	fa1f fa8a 	uxth.w	sl, sl
 8008db2:	fb0b a303 	mla	r3, fp, r3, sl
 8008db6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008dba:	f8dc 4000 	ldr.w	r4, [ip]
 8008dbe:	4443      	add	r3, r8
 8008dc0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dc4:	fb0b 840a 	mla	r4, fp, sl, r8
 8008dc8:	46e2      	mov	sl, ip
 8008dca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008dd4:	454f      	cmp	r7, r9
 8008dd6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dda:	f84a 3b04 	str.w	r3, [sl], #4
 8008dde:	d82b      	bhi.n	8008e38 <__multiply+0x11e>
 8008de0:	f8cc 8004 	str.w	r8, [ip, #4]
 8008de4:	9b01      	ldr	r3, [sp, #4]
 8008de6:	3204      	adds	r2, #4
 8008de8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008dec:	f1ba 0f00 	cmp.w	sl, #0
 8008df0:	d020      	beq.n	8008e34 <__multiply+0x11a>
 8008df2:	4689      	mov	r9, r1
 8008df4:	46a8      	mov	r8, r5
 8008df6:	f04f 0b00 	mov.w	fp, #0
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	f8b9 c000 	ldrh.w	ip, [r9]
 8008e00:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	fb0a 440c 	mla	r4, sl, ip, r4
 8008e0a:	46c4      	mov	ip, r8
 8008e0c:	445c      	add	r4, fp
 8008e0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e12:	f84c 3b04 	str.w	r3, [ip], #4
 8008e16:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e1a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	fb0a b303 	mla	r3, sl, r3, fp
 8008e24:	454f      	cmp	r7, r9
 8008e26:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008e2a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008e2e:	d805      	bhi.n	8008e3c <__multiply+0x122>
 8008e30:	f8c8 3004 	str.w	r3, [r8, #4]
 8008e34:	3504      	adds	r5, #4
 8008e36:	e79b      	b.n	8008d70 <__multiply+0x56>
 8008e38:	46d4      	mov	ip, sl
 8008e3a:	e7b3      	b.n	8008da4 <__multiply+0x8a>
 8008e3c:	46e0      	mov	r8, ip
 8008e3e:	e7dd      	b.n	8008dfc <__multiply+0xe2>
 8008e40:	3e01      	subs	r6, #1
 8008e42:	e799      	b.n	8008d78 <__multiply+0x5e>

08008e44 <__pow5mult>:
 8008e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e48:	4615      	mov	r5, r2
 8008e4a:	f012 0203 	ands.w	r2, r2, #3
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460f      	mov	r7, r1
 8008e52:	d007      	beq.n	8008e64 <__pow5mult+0x20>
 8008e54:	4c21      	ldr	r4, [pc, #132]	; (8008edc <__pow5mult+0x98>)
 8008e56:	3a01      	subs	r2, #1
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e5e:	f7ff fe8c 	bl	8008b7a <__multadd>
 8008e62:	4607      	mov	r7, r0
 8008e64:	10ad      	asrs	r5, r5, #2
 8008e66:	d035      	beq.n	8008ed4 <__pow5mult+0x90>
 8008e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e6a:	b93c      	cbnz	r4, 8008e7c <__pow5mult+0x38>
 8008e6c:	2010      	movs	r0, #16
 8008e6e:	f7fc feb3 	bl	8005bd8 <malloc>
 8008e72:	6270      	str	r0, [r6, #36]	; 0x24
 8008e74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e78:	6004      	str	r4, [r0, #0]
 8008e7a:	60c4      	str	r4, [r0, #12]
 8008e7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e84:	b94c      	cbnz	r4, 8008e9a <__pow5mult+0x56>
 8008e86:	f240 2171 	movw	r1, #625	; 0x271
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff ff3c 	bl	8008d08 <__i2b>
 8008e90:	2300      	movs	r3, #0
 8008e92:	4604      	mov	r4, r0
 8008e94:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	f04f 0800 	mov.w	r8, #0
 8008e9e:	07eb      	lsls	r3, r5, #31
 8008ea0:	d50a      	bpl.n	8008eb8 <__pow5mult+0x74>
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f7ff ff37 	bl	8008d1a <__multiply>
 8008eac:	4681      	mov	r9, r0
 8008eae:	4639      	mov	r1, r7
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f7ff fe4b 	bl	8008b4c <_Bfree>
 8008eb6:	464f      	mov	r7, r9
 8008eb8:	106d      	asrs	r5, r5, #1
 8008eba:	d00b      	beq.n	8008ed4 <__pow5mult+0x90>
 8008ebc:	6820      	ldr	r0, [r4, #0]
 8008ebe:	b938      	cbnz	r0, 8008ed0 <__pow5mult+0x8c>
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f7ff ff28 	bl	8008d1a <__multiply>
 8008eca:	6020      	str	r0, [r4, #0]
 8008ecc:	f8c0 8000 	str.w	r8, [r0]
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	e7e4      	b.n	8008e9e <__pow5mult+0x5a>
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eda:	bf00      	nop
 8008edc:	080098c0 	.word	0x080098c0

08008ee0 <__lshift>:
 8008ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	4616      	mov	r6, r2
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ef0:	eb0a 0903 	add.w	r9, sl, r3
 8008ef4:	6849      	ldr	r1, [r1, #4]
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	f109 0501 	add.w	r5, r9, #1
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	db32      	blt.n	8008f66 <__lshift+0x86>
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff fdef 	bl	8008ae4 <_Balloc>
 8008f06:	2300      	movs	r3, #0
 8008f08:	4680      	mov	r8, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f100 0114 	add.w	r1, r0, #20
 8008f10:	4553      	cmp	r3, sl
 8008f12:	db2b      	blt.n	8008f6c <__lshift+0x8c>
 8008f14:	6920      	ldr	r0, [r4, #16]
 8008f16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f1a:	f104 0314 	add.w	r3, r4, #20
 8008f1e:	f016 021f 	ands.w	r2, r6, #31
 8008f22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f2a:	d025      	beq.n	8008f78 <__lshift+0x98>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	f1c2 0e20 	rsb	lr, r2, #32
 8008f32:	468a      	mov	sl, r1
 8008f34:	681e      	ldr	r6, [r3, #0]
 8008f36:	4096      	lsls	r6, r2
 8008f38:	4330      	orrs	r0, r6
 8008f3a:	f84a 0b04 	str.w	r0, [sl], #4
 8008f3e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f42:	459c      	cmp	ip, r3
 8008f44:	fa20 f00e 	lsr.w	r0, r0, lr
 8008f48:	d814      	bhi.n	8008f74 <__lshift+0x94>
 8008f4a:	6048      	str	r0, [r1, #4]
 8008f4c:	b108      	cbz	r0, 8008f52 <__lshift+0x72>
 8008f4e:	f109 0502 	add.w	r5, r9, #2
 8008f52:	3d01      	subs	r5, #1
 8008f54:	4638      	mov	r0, r7
 8008f56:	f8c8 5010 	str.w	r5, [r8, #16]
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	f7ff fdf6 	bl	8008b4c <_Bfree>
 8008f60:	4640      	mov	r0, r8
 8008f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f66:	3101      	adds	r1, #1
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	e7c7      	b.n	8008efc <__lshift+0x1c>
 8008f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008f70:	3301      	adds	r3, #1
 8008f72:	e7cd      	b.n	8008f10 <__lshift+0x30>
 8008f74:	4651      	mov	r1, sl
 8008f76:	e7dc      	b.n	8008f32 <__lshift+0x52>
 8008f78:	3904      	subs	r1, #4
 8008f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7e:	459c      	cmp	ip, r3
 8008f80:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f84:	d8f9      	bhi.n	8008f7a <__lshift+0x9a>
 8008f86:	e7e4      	b.n	8008f52 <__lshift+0x72>

08008f88 <__mcmp>:
 8008f88:	6903      	ldr	r3, [r0, #16]
 8008f8a:	690a      	ldr	r2, [r1, #16]
 8008f8c:	b530      	push	{r4, r5, lr}
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	d10c      	bne.n	8008fac <__mcmp+0x24>
 8008f92:	0092      	lsls	r2, r2, #2
 8008f94:	3014      	adds	r0, #20
 8008f96:	3114      	adds	r1, #20
 8008f98:	1884      	adds	r4, r0, r2
 8008f9a:	4411      	add	r1, r2
 8008f9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fa0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fa4:	4295      	cmp	r5, r2
 8008fa6:	d003      	beq.n	8008fb0 <__mcmp+0x28>
 8008fa8:	d305      	bcc.n	8008fb6 <__mcmp+0x2e>
 8008faa:	2301      	movs	r3, #1
 8008fac:	4618      	mov	r0, r3
 8008fae:	bd30      	pop	{r4, r5, pc}
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d3f3      	bcc.n	8008f9c <__mcmp+0x14>
 8008fb4:	e7fa      	b.n	8008fac <__mcmp+0x24>
 8008fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fba:	e7f7      	b.n	8008fac <__mcmp+0x24>

08008fbc <__mdiff>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	460d      	mov	r5, r1
 8008fc2:	4607      	mov	r7, r0
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	4614      	mov	r4, r2
 8008fca:	f7ff ffdd 	bl	8008f88 <__mcmp>
 8008fce:	1e06      	subs	r6, r0, #0
 8008fd0:	d108      	bne.n	8008fe4 <__mdiff+0x28>
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f7ff fd85 	bl	8008ae4 <_Balloc>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe4:	bfa4      	itt	ge
 8008fe6:	4623      	movge	r3, r4
 8008fe8:	462c      	movge	r4, r5
 8008fea:	4638      	mov	r0, r7
 8008fec:	6861      	ldr	r1, [r4, #4]
 8008fee:	bfa6      	itte	ge
 8008ff0:	461d      	movge	r5, r3
 8008ff2:	2600      	movge	r6, #0
 8008ff4:	2601      	movlt	r6, #1
 8008ff6:	f7ff fd75 	bl	8008ae4 <_Balloc>
 8008ffa:	f04f 0e00 	mov.w	lr, #0
 8008ffe:	60c6      	str	r6, [r0, #12]
 8009000:	692b      	ldr	r3, [r5, #16]
 8009002:	6926      	ldr	r6, [r4, #16]
 8009004:	f104 0214 	add.w	r2, r4, #20
 8009008:	f105 0914 	add.w	r9, r5, #20
 800900c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009010:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009014:	f100 0114 	add.w	r1, r0, #20
 8009018:	f852 ab04 	ldr.w	sl, [r2], #4
 800901c:	f859 5b04 	ldr.w	r5, [r9], #4
 8009020:	fa1f f38a 	uxth.w	r3, sl
 8009024:	4473      	add	r3, lr
 8009026:	b2ac      	uxth	r4, r5
 8009028:	1b1b      	subs	r3, r3, r4
 800902a:	0c2c      	lsrs	r4, r5, #16
 800902c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009030:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009034:	b29b      	uxth	r3, r3
 8009036:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800903a:	45c8      	cmp	r8, r9
 800903c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009040:	4694      	mov	ip, r2
 8009042:	f841 4b04 	str.w	r4, [r1], #4
 8009046:	d8e7      	bhi.n	8009018 <__mdiff+0x5c>
 8009048:	45bc      	cmp	ip, r7
 800904a:	d304      	bcc.n	8009056 <__mdiff+0x9a>
 800904c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009050:	b183      	cbz	r3, 8009074 <__mdiff+0xb8>
 8009052:	6106      	str	r6, [r0, #16]
 8009054:	e7c4      	b.n	8008fe0 <__mdiff+0x24>
 8009056:	f85c 4b04 	ldr.w	r4, [ip], #4
 800905a:	b2a2      	uxth	r2, r4
 800905c:	4472      	add	r2, lr
 800905e:	1413      	asrs	r3, r2, #16
 8009060:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009064:	b292      	uxth	r2, r2
 8009066:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800906a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800906e:	f841 2b04 	str.w	r2, [r1], #4
 8009072:	e7e9      	b.n	8009048 <__mdiff+0x8c>
 8009074:	3e01      	subs	r6, #1
 8009076:	e7e9      	b.n	800904c <__mdiff+0x90>

08009078 <__ulp>:
 8009078:	4b10      	ldr	r3, [pc, #64]	; (80090bc <__ulp+0x44>)
 800907a:	400b      	ands	r3, r1
 800907c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009080:	2b00      	cmp	r3, #0
 8009082:	dd02      	ble.n	800908a <__ulp+0x12>
 8009084:	2000      	movs	r0, #0
 8009086:	4619      	mov	r1, r3
 8009088:	4770      	bx	lr
 800908a:	425b      	negs	r3, r3
 800908c:	151b      	asrs	r3, r3, #20
 800908e:	2b13      	cmp	r3, #19
 8009090:	f04f 0000 	mov.w	r0, #0
 8009094:	f04f 0100 	mov.w	r1, #0
 8009098:	dc04      	bgt.n	80090a4 <__ulp+0x2c>
 800909a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800909e:	fa42 f103 	asr.w	r1, r2, r3
 80090a2:	4770      	bx	lr
 80090a4:	2201      	movs	r2, #1
 80090a6:	3b14      	subs	r3, #20
 80090a8:	2b1e      	cmp	r3, #30
 80090aa:	bfce      	itee	gt
 80090ac:	4613      	movgt	r3, r2
 80090ae:	f1c3 031f 	rsble	r3, r3, #31
 80090b2:	fa02 f303 	lslle.w	r3, r2, r3
 80090b6:	4618      	mov	r0, r3
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	7ff00000 	.word	0x7ff00000

080090c0 <__b2d>:
 80090c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c4:	6907      	ldr	r7, [r0, #16]
 80090c6:	f100 0914 	add.w	r9, r0, #20
 80090ca:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80090ce:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80090d2:	f1a7 0804 	sub.w	r8, r7, #4
 80090d6:	4630      	mov	r0, r6
 80090d8:	f7ff fdc8 	bl	8008c6c <__hi0bits>
 80090dc:	f1c0 0320 	rsb	r3, r0, #32
 80090e0:	280a      	cmp	r0, #10
 80090e2:	600b      	str	r3, [r1, #0]
 80090e4:	491e      	ldr	r1, [pc, #120]	; (8009160 <__b2d+0xa0>)
 80090e6:	dc17      	bgt.n	8009118 <__b2d+0x58>
 80090e8:	45c1      	cmp	r9, r8
 80090ea:	bf28      	it	cs
 80090ec:	2200      	movcs	r2, #0
 80090ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80090f2:	fa26 f30c 	lsr.w	r3, r6, ip
 80090f6:	bf38      	it	cc
 80090f8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80090fc:	ea43 0501 	orr.w	r5, r3, r1
 8009100:	f100 0315 	add.w	r3, r0, #21
 8009104:	fa06 f303 	lsl.w	r3, r6, r3
 8009108:	fa22 f20c 	lsr.w	r2, r2, ip
 800910c:	ea43 0402 	orr.w	r4, r3, r2
 8009110:	4620      	mov	r0, r4
 8009112:	4629      	mov	r1, r5
 8009114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009118:	45c1      	cmp	r9, r8
 800911a:	bf3a      	itte	cc
 800911c:	f1a7 0808 	subcc.w	r8, r7, #8
 8009120:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009124:	2200      	movcs	r2, #0
 8009126:	f1b0 030b 	subs.w	r3, r0, #11
 800912a:	d015      	beq.n	8009158 <__b2d+0x98>
 800912c:	409e      	lsls	r6, r3
 800912e:	f1c3 0720 	rsb	r7, r3, #32
 8009132:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009136:	fa22 f107 	lsr.w	r1, r2, r7
 800913a:	45c8      	cmp	r8, r9
 800913c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009140:	ea46 0501 	orr.w	r5, r6, r1
 8009144:	bf94      	ite	ls
 8009146:	2100      	movls	r1, #0
 8009148:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800914c:	fa02 f003 	lsl.w	r0, r2, r3
 8009150:	40f9      	lsrs	r1, r7
 8009152:	ea40 0401 	orr.w	r4, r0, r1
 8009156:	e7db      	b.n	8009110 <__b2d+0x50>
 8009158:	ea46 0501 	orr.w	r5, r6, r1
 800915c:	4614      	mov	r4, r2
 800915e:	e7d7      	b.n	8009110 <__b2d+0x50>
 8009160:	3ff00000 	.word	0x3ff00000

08009164 <__d2b>:
 8009164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009168:	461c      	mov	r4, r3
 800916a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800916e:	2101      	movs	r1, #1
 8009170:	4690      	mov	r8, r2
 8009172:	f7ff fcb7 	bl	8008ae4 <_Balloc>
 8009176:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800917a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800917e:	4607      	mov	r7, r0
 8009180:	bb34      	cbnz	r4, 80091d0 <__d2b+0x6c>
 8009182:	9201      	str	r2, [sp, #4]
 8009184:	f1b8 0200 	subs.w	r2, r8, #0
 8009188:	d027      	beq.n	80091da <__d2b+0x76>
 800918a:	a802      	add	r0, sp, #8
 800918c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009190:	f7ff fd8b 	bl	8008caa <__lo0bits>
 8009194:	9900      	ldr	r1, [sp, #0]
 8009196:	b1f0      	cbz	r0, 80091d6 <__d2b+0x72>
 8009198:	9a01      	ldr	r2, [sp, #4]
 800919a:	f1c0 0320 	rsb	r3, r0, #32
 800919e:	fa02 f303 	lsl.w	r3, r2, r3
 80091a2:	430b      	orrs	r3, r1
 80091a4:	40c2      	lsrs	r2, r0
 80091a6:	617b      	str	r3, [r7, #20]
 80091a8:	9201      	str	r2, [sp, #4]
 80091aa:	9b01      	ldr	r3, [sp, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bf14      	ite	ne
 80091b0:	2102      	movne	r1, #2
 80091b2:	2101      	moveq	r1, #1
 80091b4:	61bb      	str	r3, [r7, #24]
 80091b6:	6139      	str	r1, [r7, #16]
 80091b8:	b1c4      	cbz	r4, 80091ec <__d2b+0x88>
 80091ba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80091be:	4404      	add	r4, r0
 80091c0:	6034      	str	r4, [r6, #0]
 80091c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091c6:	6028      	str	r0, [r5, #0]
 80091c8:	4638      	mov	r0, r7
 80091ca:	b002      	add	sp, #8
 80091cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80091d4:	e7d5      	b.n	8009182 <__d2b+0x1e>
 80091d6:	6179      	str	r1, [r7, #20]
 80091d8:	e7e7      	b.n	80091aa <__d2b+0x46>
 80091da:	a801      	add	r0, sp, #4
 80091dc:	f7ff fd65 	bl	8008caa <__lo0bits>
 80091e0:	2101      	movs	r1, #1
 80091e2:	9b01      	ldr	r3, [sp, #4]
 80091e4:	6139      	str	r1, [r7, #16]
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	3020      	adds	r0, #32
 80091ea:	e7e5      	b.n	80091b8 <__d2b+0x54>
 80091ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091f0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80091f4:	6030      	str	r0, [r6, #0]
 80091f6:	6918      	ldr	r0, [r3, #16]
 80091f8:	f7ff fd38 	bl	8008c6c <__hi0bits>
 80091fc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009200:	e7e1      	b.n	80091c6 <__d2b+0x62>

08009202 <__ratio>:
 8009202:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009206:	4688      	mov	r8, r1
 8009208:	4669      	mov	r1, sp
 800920a:	4681      	mov	r9, r0
 800920c:	f7ff ff58 	bl	80090c0 <__b2d>
 8009210:	468b      	mov	fp, r1
 8009212:	4606      	mov	r6, r0
 8009214:	460f      	mov	r7, r1
 8009216:	4640      	mov	r0, r8
 8009218:	a901      	add	r1, sp, #4
 800921a:	f7ff ff51 	bl	80090c0 <__b2d>
 800921e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009222:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009226:	460d      	mov	r5, r1
 8009228:	eba3 0c02 	sub.w	ip, r3, r2
 800922c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009230:	1a9b      	subs	r3, r3, r2
 8009232:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009236:	2b00      	cmp	r3, #0
 8009238:	bfd5      	itete	le
 800923a:	460a      	movle	r2, r1
 800923c:	463a      	movgt	r2, r7
 800923e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009242:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009246:	bfd8      	it	le
 8009248:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800924c:	462b      	mov	r3, r5
 800924e:	4602      	mov	r2, r0
 8009250:	4659      	mov	r1, fp
 8009252:	4630      	mov	r0, r6
 8009254:	f7f7 fa6a 	bl	800072c <__aeabi_ddiv>
 8009258:	b003      	add	sp, #12
 800925a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800925e <__copybits>:
 800925e:	3901      	subs	r1, #1
 8009260:	b510      	push	{r4, lr}
 8009262:	1149      	asrs	r1, r1, #5
 8009264:	6914      	ldr	r4, [r2, #16]
 8009266:	3101      	adds	r1, #1
 8009268:	f102 0314 	add.w	r3, r2, #20
 800926c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009270:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009274:	42a3      	cmp	r3, r4
 8009276:	4602      	mov	r2, r0
 8009278:	d303      	bcc.n	8009282 <__copybits+0x24>
 800927a:	2300      	movs	r3, #0
 800927c:	428a      	cmp	r2, r1
 800927e:	d305      	bcc.n	800928c <__copybits+0x2e>
 8009280:	bd10      	pop	{r4, pc}
 8009282:	f853 2b04 	ldr.w	r2, [r3], #4
 8009286:	f840 2b04 	str.w	r2, [r0], #4
 800928a:	e7f3      	b.n	8009274 <__copybits+0x16>
 800928c:	f842 3b04 	str.w	r3, [r2], #4
 8009290:	e7f4      	b.n	800927c <__copybits+0x1e>

08009292 <__any_on>:
 8009292:	f100 0214 	add.w	r2, r0, #20
 8009296:	6900      	ldr	r0, [r0, #16]
 8009298:	114b      	asrs	r3, r1, #5
 800929a:	4298      	cmp	r0, r3
 800929c:	b510      	push	{r4, lr}
 800929e:	db11      	blt.n	80092c4 <__any_on+0x32>
 80092a0:	dd0a      	ble.n	80092b8 <__any_on+0x26>
 80092a2:	f011 011f 	ands.w	r1, r1, #31
 80092a6:	d007      	beq.n	80092b8 <__any_on+0x26>
 80092a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80092ac:	fa24 f001 	lsr.w	r0, r4, r1
 80092b0:	fa00 f101 	lsl.w	r1, r0, r1
 80092b4:	428c      	cmp	r4, r1
 80092b6:	d10b      	bne.n	80092d0 <__any_on+0x3e>
 80092b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092bc:	4293      	cmp	r3, r2
 80092be:	d803      	bhi.n	80092c8 <__any_on+0x36>
 80092c0:	2000      	movs	r0, #0
 80092c2:	bd10      	pop	{r4, pc}
 80092c4:	4603      	mov	r3, r0
 80092c6:	e7f7      	b.n	80092b8 <__any_on+0x26>
 80092c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092cc:	2900      	cmp	r1, #0
 80092ce:	d0f5      	beq.n	80092bc <__any_on+0x2a>
 80092d0:	2001      	movs	r0, #1
 80092d2:	e7f6      	b.n	80092c2 <__any_on+0x30>

080092d4 <_calloc_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	fb02 f401 	mul.w	r4, r2, r1
 80092da:	4621      	mov	r1, r4
 80092dc:	f7fc fce4 	bl	8005ca8 <_malloc_r>
 80092e0:	4605      	mov	r5, r0
 80092e2:	b118      	cbz	r0, 80092ec <_calloc_r+0x18>
 80092e4:	4622      	mov	r2, r4
 80092e6:	2100      	movs	r1, #0
 80092e8:	f7fc fc89 	bl	8005bfe <memset>
 80092ec:	4628      	mov	r0, r5
 80092ee:	bd38      	pop	{r3, r4, r5, pc}

080092f0 <__ssputs_r>:
 80092f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092f4:	688e      	ldr	r6, [r1, #8]
 80092f6:	4682      	mov	sl, r0
 80092f8:	429e      	cmp	r6, r3
 80092fa:	460c      	mov	r4, r1
 80092fc:	4690      	mov	r8, r2
 80092fe:	4699      	mov	r9, r3
 8009300:	d837      	bhi.n	8009372 <__ssputs_r+0x82>
 8009302:	898a      	ldrh	r2, [r1, #12]
 8009304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009308:	d031      	beq.n	800936e <__ssputs_r+0x7e>
 800930a:	2302      	movs	r3, #2
 800930c:	6825      	ldr	r5, [r4, #0]
 800930e:	6909      	ldr	r1, [r1, #16]
 8009310:	1a6f      	subs	r7, r5, r1
 8009312:	6965      	ldr	r5, [r4, #20]
 8009314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009318:	fb95 f5f3 	sdiv	r5, r5, r3
 800931c:	f109 0301 	add.w	r3, r9, #1
 8009320:	443b      	add	r3, r7
 8009322:	429d      	cmp	r5, r3
 8009324:	bf38      	it	cc
 8009326:	461d      	movcc	r5, r3
 8009328:	0553      	lsls	r3, r2, #21
 800932a:	d530      	bpl.n	800938e <__ssputs_r+0x9e>
 800932c:	4629      	mov	r1, r5
 800932e:	f7fc fcbb 	bl	8005ca8 <_malloc_r>
 8009332:	4606      	mov	r6, r0
 8009334:	b950      	cbnz	r0, 800934c <__ssputs_r+0x5c>
 8009336:	230c      	movs	r3, #12
 8009338:	f04f 30ff 	mov.w	r0, #4294967295
 800933c:	f8ca 3000 	str.w	r3, [sl]
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934c:	463a      	mov	r2, r7
 800934e:	6921      	ldr	r1, [r4, #16]
 8009350:	f7fc fc4a 	bl	8005be8 <memcpy>
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800935a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	6126      	str	r6, [r4, #16]
 8009362:	443e      	add	r6, r7
 8009364:	6026      	str	r6, [r4, #0]
 8009366:	464e      	mov	r6, r9
 8009368:	6165      	str	r5, [r4, #20]
 800936a:	1bed      	subs	r5, r5, r7
 800936c:	60a5      	str	r5, [r4, #8]
 800936e:	454e      	cmp	r6, r9
 8009370:	d900      	bls.n	8009374 <__ssputs_r+0x84>
 8009372:	464e      	mov	r6, r9
 8009374:	4632      	mov	r2, r6
 8009376:	4641      	mov	r1, r8
 8009378:	6820      	ldr	r0, [r4, #0]
 800937a:	f000 f92a 	bl	80095d2 <memmove>
 800937e:	68a3      	ldr	r3, [r4, #8]
 8009380:	2000      	movs	r0, #0
 8009382:	1b9b      	subs	r3, r3, r6
 8009384:	60a3      	str	r3, [r4, #8]
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	441e      	add	r6, r3
 800938a:	6026      	str	r6, [r4, #0]
 800938c:	e7dc      	b.n	8009348 <__ssputs_r+0x58>
 800938e:	462a      	mov	r2, r5
 8009390:	f000 f938 	bl	8009604 <_realloc_r>
 8009394:	4606      	mov	r6, r0
 8009396:	2800      	cmp	r0, #0
 8009398:	d1e2      	bne.n	8009360 <__ssputs_r+0x70>
 800939a:	6921      	ldr	r1, [r4, #16]
 800939c:	4650      	mov	r0, sl
 800939e:	f7fc fc37 	bl	8005c10 <_free_r>
 80093a2:	e7c8      	b.n	8009336 <__ssputs_r+0x46>

080093a4 <_svfiprintf_r>:
 80093a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a8:	461d      	mov	r5, r3
 80093aa:	898b      	ldrh	r3, [r1, #12]
 80093ac:	b09d      	sub	sp, #116	; 0x74
 80093ae:	061f      	lsls	r7, r3, #24
 80093b0:	4680      	mov	r8, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	4616      	mov	r6, r2
 80093b6:	d50f      	bpl.n	80093d8 <_svfiprintf_r+0x34>
 80093b8:	690b      	ldr	r3, [r1, #16]
 80093ba:	b96b      	cbnz	r3, 80093d8 <_svfiprintf_r+0x34>
 80093bc:	2140      	movs	r1, #64	; 0x40
 80093be:	f7fc fc73 	bl	8005ca8 <_malloc_r>
 80093c2:	6020      	str	r0, [r4, #0]
 80093c4:	6120      	str	r0, [r4, #16]
 80093c6:	b928      	cbnz	r0, 80093d4 <_svfiprintf_r+0x30>
 80093c8:	230c      	movs	r3, #12
 80093ca:	f8c8 3000 	str.w	r3, [r8]
 80093ce:	f04f 30ff 	mov.w	r0, #4294967295
 80093d2:	e0c8      	b.n	8009566 <_svfiprintf_r+0x1c2>
 80093d4:	2340      	movs	r3, #64	; 0x40
 80093d6:	6163      	str	r3, [r4, #20]
 80093d8:	2300      	movs	r3, #0
 80093da:	9309      	str	r3, [sp, #36]	; 0x24
 80093dc:	2320      	movs	r3, #32
 80093de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093e2:	2330      	movs	r3, #48	; 0x30
 80093e4:	f04f 0b01 	mov.w	fp, #1
 80093e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ec:	9503      	str	r5, [sp, #12]
 80093ee:	4637      	mov	r7, r6
 80093f0:	463d      	mov	r5, r7
 80093f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093f6:	b10b      	cbz	r3, 80093fc <_svfiprintf_r+0x58>
 80093f8:	2b25      	cmp	r3, #37	; 0x25
 80093fa:	d13e      	bne.n	800947a <_svfiprintf_r+0xd6>
 80093fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009400:	d00b      	beq.n	800941a <_svfiprintf_r+0x76>
 8009402:	4653      	mov	r3, sl
 8009404:	4632      	mov	r2, r6
 8009406:	4621      	mov	r1, r4
 8009408:	4640      	mov	r0, r8
 800940a:	f7ff ff71 	bl	80092f0 <__ssputs_r>
 800940e:	3001      	adds	r0, #1
 8009410:	f000 80a4 	beq.w	800955c <_svfiprintf_r+0x1b8>
 8009414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009416:	4453      	add	r3, sl
 8009418:	9309      	str	r3, [sp, #36]	; 0x24
 800941a:	783b      	ldrb	r3, [r7, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 809d 	beq.w	800955c <_svfiprintf_r+0x1b8>
 8009422:	2300      	movs	r3, #0
 8009424:	f04f 32ff 	mov.w	r2, #4294967295
 8009428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800942c:	9304      	str	r3, [sp, #16]
 800942e:	9307      	str	r3, [sp, #28]
 8009430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009434:	931a      	str	r3, [sp, #104]	; 0x68
 8009436:	462f      	mov	r7, r5
 8009438:	2205      	movs	r2, #5
 800943a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800943e:	4850      	ldr	r0, [pc, #320]	; (8009580 <_svfiprintf_r+0x1dc>)
 8009440:	f7ff fb40 	bl	8008ac4 <memchr>
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	b9d0      	cbnz	r0, 800947e <_svfiprintf_r+0xda>
 8009448:	06d9      	lsls	r1, r3, #27
 800944a:	bf44      	itt	mi
 800944c:	2220      	movmi	r2, #32
 800944e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009452:	071a      	lsls	r2, r3, #28
 8009454:	bf44      	itt	mi
 8009456:	222b      	movmi	r2, #43	; 0x2b
 8009458:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800945c:	782a      	ldrb	r2, [r5, #0]
 800945e:	2a2a      	cmp	r2, #42	; 0x2a
 8009460:	d015      	beq.n	800948e <_svfiprintf_r+0xea>
 8009462:	462f      	mov	r7, r5
 8009464:	2000      	movs	r0, #0
 8009466:	250a      	movs	r5, #10
 8009468:	9a07      	ldr	r2, [sp, #28]
 800946a:	4639      	mov	r1, r7
 800946c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009470:	3b30      	subs	r3, #48	; 0x30
 8009472:	2b09      	cmp	r3, #9
 8009474:	d94d      	bls.n	8009512 <_svfiprintf_r+0x16e>
 8009476:	b1b8      	cbz	r0, 80094a8 <_svfiprintf_r+0x104>
 8009478:	e00f      	b.n	800949a <_svfiprintf_r+0xf6>
 800947a:	462f      	mov	r7, r5
 800947c:	e7b8      	b.n	80093f0 <_svfiprintf_r+0x4c>
 800947e:	4a40      	ldr	r2, [pc, #256]	; (8009580 <_svfiprintf_r+0x1dc>)
 8009480:	463d      	mov	r5, r7
 8009482:	1a80      	subs	r0, r0, r2
 8009484:	fa0b f000 	lsl.w	r0, fp, r0
 8009488:	4318      	orrs	r0, r3
 800948a:	9004      	str	r0, [sp, #16]
 800948c:	e7d3      	b.n	8009436 <_svfiprintf_r+0x92>
 800948e:	9a03      	ldr	r2, [sp, #12]
 8009490:	1d11      	adds	r1, r2, #4
 8009492:	6812      	ldr	r2, [r2, #0]
 8009494:	9103      	str	r1, [sp, #12]
 8009496:	2a00      	cmp	r2, #0
 8009498:	db01      	blt.n	800949e <_svfiprintf_r+0xfa>
 800949a:	9207      	str	r2, [sp, #28]
 800949c:	e004      	b.n	80094a8 <_svfiprintf_r+0x104>
 800949e:	4252      	negs	r2, r2
 80094a0:	f043 0302 	orr.w	r3, r3, #2
 80094a4:	9207      	str	r2, [sp, #28]
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	783b      	ldrb	r3, [r7, #0]
 80094aa:	2b2e      	cmp	r3, #46	; 0x2e
 80094ac:	d10c      	bne.n	80094c8 <_svfiprintf_r+0x124>
 80094ae:	787b      	ldrb	r3, [r7, #1]
 80094b0:	2b2a      	cmp	r3, #42	; 0x2a
 80094b2:	d133      	bne.n	800951c <_svfiprintf_r+0x178>
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	3702      	adds	r7, #2
 80094b8:	1d1a      	adds	r2, r3, #4
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	9203      	str	r2, [sp, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bfb8      	it	lt
 80094c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80094c6:	9305      	str	r3, [sp, #20]
 80094c8:	4d2e      	ldr	r5, [pc, #184]	; (8009584 <_svfiprintf_r+0x1e0>)
 80094ca:	2203      	movs	r2, #3
 80094cc:	7839      	ldrb	r1, [r7, #0]
 80094ce:	4628      	mov	r0, r5
 80094d0:	f7ff faf8 	bl	8008ac4 <memchr>
 80094d4:	b138      	cbz	r0, 80094e6 <_svfiprintf_r+0x142>
 80094d6:	2340      	movs	r3, #64	; 0x40
 80094d8:	1b40      	subs	r0, r0, r5
 80094da:	fa03 f000 	lsl.w	r0, r3, r0
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	3701      	adds	r7, #1
 80094e2:	4303      	orrs	r3, r0
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	7839      	ldrb	r1, [r7, #0]
 80094e8:	2206      	movs	r2, #6
 80094ea:	4827      	ldr	r0, [pc, #156]	; (8009588 <_svfiprintf_r+0x1e4>)
 80094ec:	1c7e      	adds	r6, r7, #1
 80094ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094f2:	f7ff fae7 	bl	8008ac4 <memchr>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d038      	beq.n	800956c <_svfiprintf_r+0x1c8>
 80094fa:	4b24      	ldr	r3, [pc, #144]	; (800958c <_svfiprintf_r+0x1e8>)
 80094fc:	bb13      	cbnz	r3, 8009544 <_svfiprintf_r+0x1a0>
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	3307      	adds	r3, #7
 8009502:	f023 0307 	bic.w	r3, r3, #7
 8009506:	3308      	adds	r3, #8
 8009508:	9303      	str	r3, [sp, #12]
 800950a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800950c:	444b      	add	r3, r9
 800950e:	9309      	str	r3, [sp, #36]	; 0x24
 8009510:	e76d      	b.n	80093ee <_svfiprintf_r+0x4a>
 8009512:	fb05 3202 	mla	r2, r5, r2, r3
 8009516:	2001      	movs	r0, #1
 8009518:	460f      	mov	r7, r1
 800951a:	e7a6      	b.n	800946a <_svfiprintf_r+0xc6>
 800951c:	2300      	movs	r3, #0
 800951e:	250a      	movs	r5, #10
 8009520:	4619      	mov	r1, r3
 8009522:	3701      	adds	r7, #1
 8009524:	9305      	str	r3, [sp, #20]
 8009526:	4638      	mov	r0, r7
 8009528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800952c:	3a30      	subs	r2, #48	; 0x30
 800952e:	2a09      	cmp	r2, #9
 8009530:	d903      	bls.n	800953a <_svfiprintf_r+0x196>
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0c8      	beq.n	80094c8 <_svfiprintf_r+0x124>
 8009536:	9105      	str	r1, [sp, #20]
 8009538:	e7c6      	b.n	80094c8 <_svfiprintf_r+0x124>
 800953a:	fb05 2101 	mla	r1, r5, r1, r2
 800953e:	2301      	movs	r3, #1
 8009540:	4607      	mov	r7, r0
 8009542:	e7f0      	b.n	8009526 <_svfiprintf_r+0x182>
 8009544:	ab03      	add	r3, sp, #12
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	4622      	mov	r2, r4
 800954a:	4b11      	ldr	r3, [pc, #68]	; (8009590 <_svfiprintf_r+0x1ec>)
 800954c:	a904      	add	r1, sp, #16
 800954e:	4640      	mov	r0, r8
 8009550:	f7fc fc96 	bl	8005e80 <_printf_float>
 8009554:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009558:	4681      	mov	r9, r0
 800955a:	d1d6      	bne.n	800950a <_svfiprintf_r+0x166>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	065b      	lsls	r3, r3, #25
 8009560:	f53f af35 	bmi.w	80093ce <_svfiprintf_r+0x2a>
 8009564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009566:	b01d      	add	sp, #116	; 0x74
 8009568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956c:	ab03      	add	r3, sp, #12
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	4622      	mov	r2, r4
 8009572:	4b07      	ldr	r3, [pc, #28]	; (8009590 <_svfiprintf_r+0x1ec>)
 8009574:	a904      	add	r1, sp, #16
 8009576:	4640      	mov	r0, r8
 8009578:	f7fc ff2e 	bl	80063d8 <_printf_i>
 800957c:	e7ea      	b.n	8009554 <_svfiprintf_r+0x1b0>
 800957e:	bf00      	nop
 8009580:	080098cc 	.word	0x080098cc
 8009584:	080098d2 	.word	0x080098d2
 8009588:	080098d6 	.word	0x080098d6
 800958c:	08005e81 	.word	0x08005e81
 8009590:	080092f1 	.word	0x080092f1

08009594 <strncmp>:
 8009594:	b510      	push	{r4, lr}
 8009596:	b16a      	cbz	r2, 80095b4 <strncmp+0x20>
 8009598:	3901      	subs	r1, #1
 800959a:	1884      	adds	r4, r0, r2
 800959c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80095a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d103      	bne.n	80095b0 <strncmp+0x1c>
 80095a8:	42a0      	cmp	r0, r4
 80095aa:	d001      	beq.n	80095b0 <strncmp+0x1c>
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1f5      	bne.n	800959c <strncmp+0x8>
 80095b0:	1a98      	subs	r0, r3, r2
 80095b2:	bd10      	pop	{r4, pc}
 80095b4:	4610      	mov	r0, r2
 80095b6:	e7fc      	b.n	80095b2 <strncmp+0x1e>

080095b8 <__ascii_wctomb>:
 80095b8:	b149      	cbz	r1, 80095ce <__ascii_wctomb+0x16>
 80095ba:	2aff      	cmp	r2, #255	; 0xff
 80095bc:	bf8b      	itete	hi
 80095be:	238a      	movhi	r3, #138	; 0x8a
 80095c0:	700a      	strbls	r2, [r1, #0]
 80095c2:	6003      	strhi	r3, [r0, #0]
 80095c4:	2001      	movls	r0, #1
 80095c6:	bf88      	it	hi
 80095c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80095cc:	4770      	bx	lr
 80095ce:	4608      	mov	r0, r1
 80095d0:	4770      	bx	lr

080095d2 <memmove>:
 80095d2:	4288      	cmp	r0, r1
 80095d4:	b510      	push	{r4, lr}
 80095d6:	eb01 0302 	add.w	r3, r1, r2
 80095da:	d807      	bhi.n	80095ec <memmove+0x1a>
 80095dc:	1e42      	subs	r2, r0, #1
 80095de:	4299      	cmp	r1, r3
 80095e0:	d00a      	beq.n	80095f8 <memmove+0x26>
 80095e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80095ea:	e7f8      	b.n	80095de <memmove+0xc>
 80095ec:	4283      	cmp	r3, r0
 80095ee:	d9f5      	bls.n	80095dc <memmove+0xa>
 80095f0:	1881      	adds	r1, r0, r2
 80095f2:	1ad2      	subs	r2, r2, r3
 80095f4:	42d3      	cmn	r3, r2
 80095f6:	d100      	bne.n	80095fa <memmove+0x28>
 80095f8:	bd10      	pop	{r4, pc}
 80095fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80095fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009602:	e7f7      	b.n	80095f4 <memmove+0x22>

08009604 <_realloc_r>:
 8009604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009606:	4607      	mov	r7, r0
 8009608:	4614      	mov	r4, r2
 800960a:	460e      	mov	r6, r1
 800960c:	b921      	cbnz	r1, 8009618 <_realloc_r+0x14>
 800960e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009612:	4611      	mov	r1, r2
 8009614:	f7fc bb48 	b.w	8005ca8 <_malloc_r>
 8009618:	b922      	cbnz	r2, 8009624 <_realloc_r+0x20>
 800961a:	f7fc faf9 	bl	8005c10 <_free_r>
 800961e:	4625      	mov	r5, r4
 8009620:	4628      	mov	r0, r5
 8009622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009624:	f000 f814 	bl	8009650 <_malloc_usable_size_r>
 8009628:	42a0      	cmp	r0, r4
 800962a:	d20f      	bcs.n	800964c <_realloc_r+0x48>
 800962c:	4621      	mov	r1, r4
 800962e:	4638      	mov	r0, r7
 8009630:	f7fc fb3a 	bl	8005ca8 <_malloc_r>
 8009634:	4605      	mov	r5, r0
 8009636:	2800      	cmp	r0, #0
 8009638:	d0f2      	beq.n	8009620 <_realloc_r+0x1c>
 800963a:	4631      	mov	r1, r6
 800963c:	4622      	mov	r2, r4
 800963e:	f7fc fad3 	bl	8005be8 <memcpy>
 8009642:	4631      	mov	r1, r6
 8009644:	4638      	mov	r0, r7
 8009646:	f7fc fae3 	bl	8005c10 <_free_r>
 800964a:	e7e9      	b.n	8009620 <_realloc_r+0x1c>
 800964c:	4635      	mov	r5, r6
 800964e:	e7e7      	b.n	8009620 <_realloc_r+0x1c>

08009650 <_malloc_usable_size_r>:
 8009650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009654:	1f18      	subs	r0, r3, #4
 8009656:	2b00      	cmp	r3, #0
 8009658:	bfbc      	itt	lt
 800965a:	580b      	ldrlt	r3, [r1, r0]
 800965c:	18c0      	addlt	r0, r0, r3
 800965e:	4770      	bx	lr

08009660 <_init>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	bf00      	nop
 8009664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009666:	bc08      	pop	{r3}
 8009668:	469e      	mov	lr, r3
 800966a:	4770      	bx	lr

0800966c <_fini>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	bf00      	nop
 8009670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009672:	bc08      	pop	{r3}
 8009674:	469e      	mov	lr, r3
 8009676:	4770      	bx	lr
